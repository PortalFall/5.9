# Fall Portals (name pending)

# Author: Jacob
# Date: 7/14/2019 - 8/28/2019
# Version: 4.5
# Fall Portals story
# to do list:
# Add more chapters
# add background images
# Reconfigure the story
# Add mystical creature catalogue
# add enemey Dex

# remove health from gear/weapons

import msvcrt
import pickle
import cmd
import textwrap
import sys
from Maps_print import Healing_inn1, Healing_inn2, Healing_inn3, Healing_inn4, Healing_inn5, Healing_inn6, Healing_inn7, \
    Healing_inn8, Healing_inn9, Healing_inn10, Healing_inn11, Wild_Forest_BottomCenter1, Wild_Forest_BottomCenter2, \
    Wild_Forest_BottomCenter3, Wild_Forest_BottomCenter4, Wild_Forest_BottomCenter5, Wild_Forest_BottomCenter6, \
    Wild_Forest_BottomCenter7, Wild_Forest_BottomCenter8, Wild_Forest_BottomCenter9, Wild_Forest_BottomCenter10, \
    Wild_Forest_BottomCenter11, Wild_Forest_BottomCenter12, Wild_Forest_BottomCenter13, Wild_Forest_BottomCenter14, \
    Wild_Forest_BottomCenter15, Wild_Forest_BottomCenter16, Wild_Forest_BottomCenter17, Wild_Forest_BottomCenter18, \
    Wild_Forest_BottomCenter19, Wild_Forest_BottomCenter20, Wild_Forest_BottomCenter21, Wild_Forest_BottomCenter22, \
    Wild_Forest_BottomCenter23, Wild_Forest_BottomCenter24, Wild_Forest_BottomCenter25, Wild_Forest_BottomCenter26, \
    Wild_Forest_BottomCenter27, Wild_Forest_BottomCenter28, Wild_Forest_BottomCenter29, Wild_Forest_BottomCenter30, \
    Wild_Forest_TopCenter1, Wild_Forest_TopCenter2, Wild_Forest_TopCenter3, Wild_Forest_TopCenter4, \
    Wild_Forest_TopCenter5, Wild_Forest_TopCenter6, Wild_Forest_TopCenter7, Wild_Forest_TopCenter8, \
    Wild_Forest_TopCenter9, Wild_Forest_TopCenter10, Wild_Forest_TopCenter11, Wild_Forest_TopCenter12, \
    Wild_Forest_TopCenter13, Wild_Forest_TopCenter14, Wild_Forest_TopCenter15, Wild_Forest_TopCenter16, \
    Wild_Forest_TopCenter17, Wild_Forest_TopCenter18, Wild_Forest_TopCenter19, Wild_Forest_TopCenter20, \
    Wild_Forest_TopCenter21, Wild_Forest_TopCenter22, Wild_Forest_TopCenter23, Wild_Forest_TopCenter24, \
    Wild_Forest_TopCenter25, Wild_Forest_TopCenter26, Wild_Forest_TopCenter27, Wild_Forest_TopCenter28, \
    Wild_Forest_TopCenter29, Wild_Forest_TopCenter30, Wild_Forest_SideRight1, Wild_Forest_SideRight2, \
    Wild_Forest_SideRight3, Wild_Forest_SideRight4, Wild_Forest_SideRight5, Wild_Forest_SideRight6, \
    Wild_Forest_SideRight7, Wild_Forest_SideRight8, Wild_Forest_SideRight9, Wild_Forest_SideRight10, \
    Wild_Forest_SideRight11, Wild_Forest_SideRight12, Wild_Forest_SideRight13, Wild_Forest_SideRight14, \
    Wild_Forest_SideRight15, Wild_Forest_SideRight16, Wild_Forest_SideRight17, Wild_Forest_SideRight18, \
    Wild_Forest_SideRight19, Wild_Forest_SideRight20, Wild_Forest_SideRight21, Wild_Forest_SideRight22, \
    Wild_Forest_SideRight23, Wild_Forest_SideRight24, Wild_Forest_SideRight25, Wild_Forest_SideRight26, \
    Wild_Forest_SideRight27, Wild_Forest_SideRight28, Wild_Forest_SideRight29, Wild_Forest_SideRight30, \
    Wild_Forest_SideLeft1, Wild_Forest_SideLeft2, Wild_Forest_SideLeft3, Wild_Forest_SideLeft4, Wild_Forest_SideLeft5, \
    Wild_Forest_SideLeft6, Wild_Forest_SideLeft7, Wild_Forest_SideLeft8, Wild_Forest_SideLeft9, Wild_Forest_SideLeft10, \
    Wild_Forest_SideLeft11, Wild_Forest_SideLeft12, Wild_Forest_SideLeft13, Wild_Forest_SideLeft14, \
    Wild_Forest_SideLeft15, Wild_Forest_SideLeft16, Wild_Forest_SideLeft17, Wild_Forest_SideLeft18, \
    Wild_Forest_SideLeft19, Wild_Forest_SideLeft20, Wild_Forest_SideLeft21, Wild_Forest_SideLeft22, \
    Wild_Forest_SideLeft23, Wild_Forest_SideLeft24, Wild_Forest_SideLeft25, Wild_Forest_SideLeft26, \
    Wild_Forest_SideLeft27, Wild_Forest_SideLeft28, Wild_Forest_SideLeft29, Wild_Forest_SideLeft30, \
    Wild_Forest_CenterFour1, Wild_Forest_CenterFour2, Wild_Forest_CenterFour3, Wild_Forest_CenterFour4, \
    Wild_Forest_CenterFour5, Wild_Forest_CenterFour6, Wild_Forest_CenterFour7, Wild_Forest_CenterFour8, \
    Wild_Forest_CenterFour9, Wild_Forest_CenterFour10, Wild_Forest_CenterFour11, Wild_Forest_CenterFour12, \
    Wild_Forest_CenterFour13, Wild_Forest_CenterFour14, Wild_Forest_CenterFour15, Wild_Forest_CenterFour16, \
    Wild_Forest_CenterFour17, Wild_Forest_CenterFour18, Wild_Forest_CenterFour19, Wild_Forest_CenterFour20, \
    Wild_Forest_CenterFour21, Wild_Forest_CenterFour22, Wild_Forest_CenterFour23, Wild_Forest_CenterFour24, \
    Wild_Forest_CenterFour25, Wild_Forest_CenterFour26, Wild_Forest_CenterFour27, Wild_Forest_CenterFour28, \
    Wild_Forest_CenterFour29, Wild_Forest_CenterFour30, Wild_Forest_TopRight1, Wild_Forest_TopRight2, \
    Wild_Forest_TopRight3, Wild_Forest_TopRight4, Wild_Forest_TopRight5, Wild_Forest_TopRight6, Wild_Forest_TopRight7, \
    Wild_Forest_TopRight8, Wild_Forest_TopRight9, Wild_Forest_TopRight10, Wild_Forest_TopRight11, \
    Wild_Forest_TopRight12, Wild_Forest_TopRight13, Wild_Forest_TopRight14, Wild_Forest_TopRight15, \
    Wild_Forest_TopRight16, Wild_Forest_TopRight17, Wild_Forest_TopRight18, Wild_Forest_TopRight19, \
    Wild_Forest_TopRight20, Wild_Forest_TopRight21, Wild_Forest_TopRight22, Wild_Forest_TopRight23, \
    Wild_Forest_TopRight24, Wild_Forest_TopRight25, Wild_Forest_TopRight26, Wild_Forest_TopRight27, \
    Wild_Forest_TopRight28, Wild_Forest_TopRight29, Wild_Forest_TopRight30, Wild_Forest_TopLeft1, Wild_Forest_TopLeft2, \
    Wild_Forest_TopLeft3, Wild_Forest_TopLeft4, Wild_Forest_TopLeft5, Wild_Forest_TopLeft6, Wild_Forest_TopLeft7, \
    Wild_Forest_TopLeft8, Wild_Forest_TopLeft9, Wild_Forest_TopLeft10, Wild_Forest_TopLeft11, Wild_Forest_TopLeft12, \
    Wild_Forest_TopLeft13, Wild_Forest_TopLeft14, Wild_Forest_TopLeft15, Wild_Forest_TopLeft16, Wild_Forest_TopLeft17, \
    Wild_Forest_TopLeft18, Wild_Forest_TopLeft19, Wild_Forest_TopLeft20, Wild_Forest_TopLeft21, Wild_Forest_TopLeft22, \
    Wild_Forest_TopLeft23, Wild_Forest_TopLeft24, Wild_Forest_TopLeft25, Wild_Forest_TopLeft26, Wild_Forest_TopLeft27, \
    Wild_Forest_TopLeft28, Wild_Forest_TopLeft29, Wild_Forest_TopLeft30, Wild_Forest_BottomRight1, \
    Wild_Forest_BottomRight2, Wild_Forest_BottomRight3, Wild_Forest_BottomRight4, Wild_Forest_BottomRight5, \
    Wild_Forest_BottomRight6, Wild_Forest_BottomRight7, Wild_Forest_BottomRight8, Wild_Forest_BottomRight9, \
    Wild_Forest_BottomRight10, Wild_Forest_BottomRight11, Wild_Forest_BottomRight12, Wild_Forest_BottomRight13, \
    Wild_Forest_BottomRight14, Wild_Forest_BottomRight15, Wild_Forest_BottomRight16, Wild_Forest_BottomRight17, \
    Wild_Forest_BottomRight18, Wild_Forest_BottomRight19, Wild_Forest_BottomRight20, Wild_Forest_BottomRight21, \
    Wild_Forest_BottomRight22, Wild_Forest_BottomRight23, Wild_Forest_BottomRight24, Wild_Forest_BottomRight25, \
    Wild_Forest_BottomRight26, Wild_Forest_BottomRight27, Wild_Forest_BottomRight28, Wild_Forest_BottomRight29, \
    Wild_Forest_BottomRight30, Wild_Forest_BottomLeft1, Wild_Forest_BottomLeft2, Wild_Forest_BottomLeft3, \
    Wild_Forest_BottomLeft4, Wild_Forest_BottomLeft5, Wild_Forest_BottomLeft6, Wild_Forest_BottomLeft7, \
    Wild_Forest_BottomLeft8, Wild_Forest_BottomLeft9, Wild_Forest_BottomLeft10, Wild_Forest_BottomLeft11, \
    Wild_Forest_BottomLeft12, Wild_Forest_BottomLeft13, Wild_Forest_BottomLeft14, Wild_Forest_BottomLeft15, \
    Wild_Forest_BottomLeft16, Wild_Forest_BottomLeft17, Wild_Forest_BottomLeft18, Wild_Forest_BottomLeft19, \
    Wild_Forest_BottomLeft20, Wild_Forest_BottomLeft21, Wild_Forest_BottomLeft22, Wild_Forest_BottomLeft23, \
    Wild_Forest_BottomLeft24, Wild_Forest_BottomLeft25, Wild_Forest_BottomLeft26, Wild_Forest_BottomLeft27, \
    Wild_Forest_BottomLeft28, Wild_Forest_BottomLeft29, Wild_Forest_BottomLeft30, ForestMAPGYO, LivingRoom, Kitchen, \
    Bedroom, Guest_Lobby, Forest14, Street, Street3, Street2, Street4, Shack, Study, Basement, Guest_research, Forest15, \
    Forest1, Forest2, Forest3, Forest4, Forest5, Forest6, Forest7, Forest8, Forest9, Forest10, Forest11, Forest12, \
    Forest13, Foyer, Guest_cafe, Guest_Conference, CityOfAden1, CityOfAden2, CityOfAden3, CityOfAden4, CityOfAden5, \
    CityOfAden6, CityOfAden7, CityOfAden8, CityOfAden9, CityOfAden10, CityOfAden11, CityOfAden12, CityOfAden13, \
    CityOfAden14, CityOfAden15, CityOfAden16, CityOfAden17, CityOfAden18, CityOfAden19, CityOfAden20, CityOfAden21, \
    CityOfAden22, CityOfAden23, CityOfAdenLower1, CityOfAdenLower2, CityOfAdenLower3, CityOfAdenLower4, \
    CityOfAdenLower5, CityOfAdenLower6, CityOfAdenLower7, CityOfAdenLower8, CityOfAdenLower9, CityOfAdenLower10, \
    CityOfAdenLower11, CityOfAdenLower12, CityOfAdenLower13, CityOfAdenLower14, CityOfAdenLower15, CityOfAdenLower16, \
    CityOfAdenLower17, CityOfAdenLower18, CityOfAdenLower19, CityOfAdenLower20, CityOfAdenLower21, CityOfAdenLower22, \
    CityOfAdenLower23, CityOfAdenLower24, CityOfAdenLower25, CityOfAdenLower26, CityOfAdenLower27, CityOfAdenLower28, \
    CityOfAdenLower29, CityOfAdenLower30, CityOfAdenLower31, Foyer_House1, Foyer_House2, Foyer_House3, Foyer_House4, \
    Foyer_House5, BedRoom_House6, BedRoom_House7, LivingRoom_House9, LivingRoom_House8, LivingRoom_House10, \
    LivingRoom_House11, LivingRoom_House12, LivingRoom_House13, LivingRoom_House14, LivingRoom_House15, \
    LivingRoom_House16, Kitchen_House17, Garden1, Garden2, Garden3, Garden4, Garden5, Garden6, Garden7, Garden8, \
    Garden9, Garden10, Garden11, Garden12, Garden13, Garden14, Garden15, Garden16, Garden17, Garden18, Garden19, \
    Garden20, Garden21, Garden22, Garden23, Garden24, Garden25,Healing_inn_aden1, Healing_inn_aden2, Healing_inn_aden3, Healing_inn_aden4, Healing_inn_aden5, Healing_inn_aden6, Healing_inn_aden7, \
    Healing_inn_aden8, Healing_inn_aden9, Healing_inn_aden10, Healing_inn_aden11, \
    dungeon_Right1,dungeon_Right2,dungeon_Right3,dungeon_Right4,dungeon_Right5,dungeon_Right6,dungeon_Right7,dungeon_Right8,dungeon_Right9,dungeon_Right10,dungeon_Right11,dungeon_Right12,dungeon_Right13,dungeon_Right14,dungeon_Right15,dungeon_Right16,dungeon_Right17,dungeon_Right18,dungeon_Right19, \
    dungeon_Right20,dungeon_Right21,dungeon_Right22,dungeon_Right23,dungeon_Right24,dungeon_Right25,dungeon_Right26,dungeon_Right27, \
    dungeon_Main1,dungeon_Main2,dungeon_Main3,dungeon_Main4,dungeon_Main5,dungeon_Main6,dungeon_Main7,dungeon_Main8,dungeon_Main9,dungeon_Main10,dungeon_Main11,dungeon_Main12,dungeon_Main13,dungeon_Main14,dungeon_Main15, \
    dungeon_Main16,dungeon_Main17,dungeon_Main18,dungeon_Main19,dungeon_Main20,dungeon_Main21,dungeon_Main22,dungeon_Main23,dungeon_Main24,dungeon_Main25,dungeon_Main26, \
    dungeon_Bottom_Right1,dungeon_Bottom_Right2,dungeon_Bottom_Right3,dungeon_Bottom_Right4,dungeon_Bottom_Right5,dungeon_Bottom_Right6,dungeon_Bottom_Right7,dungeon_Bottom_Right8,dungeon_Bottom_Right9,dungeon_Bottom_Right10,dungeon_Bottom_Right11,dungeon_Bottom_Right12,dungeon_Bottom_Right13,dungeon_Bottom_Right14,dungeon_Bottom_Right15, \
    dungeon_Bottom_Right16,dungeon_Bottom_Right17,dungeon_Bottom_Right18,dungeon_Bottom_Right19,dungeon_Bottom_Right20,dungeon_Bottom_Right21,dungeon_Bottom_Right22, \
    dungeon_bottom_right_tunnel1,dungeon_bottom_right_tunnel2,dungeon_bottom_right_tunnel3,dungeon_bottom_right_tunnel4,dungeon_bottom_right_tunnel5,dungeon_bottom_right_tunnel6,dungeon_bottom_right_tunnel7, \
    dungeon_bottom_right_tunnel_miniboss1,dungeon_bottom_right_tunnel_miniboss2,dungeon_bottom_right_tunnel_miniboss3,dungeon_bottom_right_tunnel_miniboss4,dungeon_bottom_right_tunnel_miniboss5,dungeon_bottom_right_tunnel_miniboss6,dungeon_bottom_right_tunnel_miniboss7,dungeon_bottom_right_tunnel_miniboss8,dungeon_bottom_right_tunnel_miniboss9,dungeon_bottom_right_tunnel_miniboss10, \
    dungeon_left1,dungeon_left2,dungeon_left3,dungeon_left4,dungeon_left5,dungeon_left6,dungeon_left7,dungeon_left8,dungeon_left9, \
    dungeon_boss_room1,dungeon_boss_room2,dungeon_boss_room3,dungeon_boss_room4,dungeon_boss_room5,dungeon_boss_room6,dungeon_boss_room7,dungeon_boss_room8,dungeon_boss_room9,dungeon_boss_room10,dungeon_boss_room11,dungeon_boss_room12,dungeon_boss_room13,dungeon_boss_room14,dungeon_boss_room15, \
    dungeon_boss_room16,dungeon_boss_room17,dungeon_boss_room18,dungeon_boss_room19,dungeon_boss_room20,dungeon_boss_room21,dungeon_boss_room22

import os
import time
import random
import json
import re
import winsound
import math
from datetime import datetime
import fractions
from colorama import init, Fore, Back, Style


init(convert=True)

class puzzle_storage:
    def __init__(self):
        self.Depression = []

puzzle = puzzle_storage()
#puzzle 2 TF states
class Combo:
    def __init__(self):
        self.a = True
        self.b = False
        self.c = False
        self.d = False
        self.e = False
        self.f = False
        self.g = False
        self.h = False
        self.i = False

Combo_change = Combo()
# puzzle 3 buttons
class buttons:
    def __init__(self):
        self.button1 = False
        self.button2 = False
        self.button3 = False

puzzle3_button = buttons()

def Combo_print():
    if Combo_change.a == True:
        os.system('cls')
        print("┌─────────────────────────────────────┐")
        print('│            Unknown Symbols          │')
        print("│               Commands              │")
        print("│Left side: 1 | right side 2: 2 | Quit│")
        print("│                Submit               │")
        print("└─────────────────────────────────────┘")

        print('    ┌─────────────────────┬────────────────────┐')
        print('  ┌─┘                     │                    └─┐')
        print('  │      ╔         ╗      │     ╔         ╗      │')
        print('  │                       │                      │')
        print('  │            Ω                      Ω          │')
        print('  │                       │                      │')
        print('  │      ╙         ╜      │     ╙         ╜      │')
        print('  └─┐                     │                    ┌─┘')
        print('    └─────────────────────┴────────────────────┘')
    elif Combo_change.b == True:

        os.system('cls')
        print("┌─────────────────────────────────────┐")
        print('│            Unknown Symbols          │')
        print("│               Commands              │")
        print("│Left side: 1 | right side 2: 2 | Quit│")
        print("│                Submit               │")
        print("└─────────────────────────────────────┘")

        print('    ┌─────────────────────┬────────────────────┐')
        print('  ┌─┘                     │                    └─┐')
        print('  │      ╔         ╗      │     ╔         ╗      │')
        print('  │                       │                      │')
        print('  │            δ                      Ω          │')
        print('  │                       │                      │')
        print('  │      ╙         ╜      │     ╙         ╜      │')
        print('  └─┐                     │                    ┌─┘')
        print('    └─────────────────────┴────────────────────┘')
    elif Combo_change.c == True:

        os.system('cls')
        print("┌─────────────────────────────────────┐")
        print('│            Unknown Symbols          │')
        print("│               Commands              │")
        print("│Left side: 1 | right side 2: 2 | Quit│")
        print("│                Submit               │")
        print("└─────────────────────────────────────┘")

        print('    ┌─────────────────────┬────────────────────┐')
        print('  ┌─┘                     │                    └─┐')
        print('  │      ╔         ╗      │     ╔         ╗      │')
        print('  │                       │                      │')
        print('  │            Σ                      Ω          │')
        print('  │                       │                      │')
        print('  │      ╙         ╜      │     ╙         ╜      │')
        print('  └─┐                     │                    ┌─┘')
        print('    └─────────────────────┴────────────────────┘')
    elif Combo_change.d == True:
        os.system('cls')
        print("┌─────────────────────────────────────┐")
        print('│            Unknown Symbols          │')
        print("│               Commands              │")
        print("│Left side: 1 | right side 2: 2 | Quit│")
        print("│                Submit               │")
        print("└─────────────────────────────────────┘")

        print('    ┌─────────────────────┬────────────────────┐')
        print('  ┌─┘                     │                    └─┐')
        print('  │      ╔         ╗      │     ╔         ╗      │')
        print('  │                       │                      │')
        print('  │            Ω                      δ          │')
        print('  │                       │                      │')
        print('  │      ╙         ╜      │     ╙         ╜      │')
        print('  └─┐                     │                    ┌─┘')
        print('    └─────────────────────┴────────────────────┘')
    elif Combo_change.e == True:
        os.system('cls')
        print("┌─────────────────────────────────────┐")
        print('│            Unknown Symbols          │')
        print("│               Commands              │")
        print("│Left side: 1 | right side 2: 2 | Quit│")
        print("│                Submit               │")
        print("└─────────────────────────────────────┘")

        print('    ┌─────────────────────┬────────────────────┐')
        print('  ┌─┘                     │                    └─┐')
        print('  │      ╔         ╗      │     ╔         ╗      │')
        print('  │                       │                      │')
        print('  │            δ                      δ          │')
        print('  │                       │                      │')
        print('  │      ╙         ╜      │     ╙         ╜      │')
        print('  └─┐                     │                    ┌─┘')
        print('    └─────────────────────┴────────────────────┘')
    elif Combo_change.f == True:
        os.system('cls')
        print("┌─────────────────────────────────────┐")
        print('│            Unknown Symbols          │')
        print("│               Commands              │")
        print("│Left side: 1 | right side 2: 2 | Quit│")
        print("│                Submit               │")
        print("└─────────────────────────────────────┘")

        print('    ┌─────────────────────┬────────────────────┐')
        print('  ┌─┘                     │                    └─┐')
        print('  │      ╔         ╗      │     ╔         ╗      │')
        print('  │                       │                      │')
        print('  │            Σ                      δ          │')
        print('  │                       │                      │')
        print('  │      ╙         ╜      │     ╙         ╜      │')
        print('  └─┐                     │                    ┌─┘')
        print('    └─────────────────────┴────────────────────┘')

    elif Combo_change.g == True:
        os.system('cls')
        print("┌─────────────────────────────────────┐")
        print('│            Unknown Symbols          │')
        print("│               Commands              │")
        print("│Left side: 1 | right side 2: 2 | Quit│")
        print("│                Submit               │")
        print("└─────────────────────────────────────┘")

        print('    ┌─────────────────────┬────────────────────┐')
        print('  ┌─┘                     │                    └─┐')
        print('  │      ╔         ╗      │     ╔         ╗      │')
        print('  │                       │                      │')
        print('  │            Ω                      Σ          │')
        print('  │                       │                      │')
        print('  │      ╙         ╜      │     ╙         ╜      │')
        print('  └─┐                     │                    ┌─┘')
        print('    └─────────────────────┴────────────────────┘')
    elif Combo_change.h == True:
        os.system('cls')
        print("┌─────────────────────────────────────┐")
        print('│            Unknown Symbols          │')
        print("│               Commands              │")
        print("│Left side: 1 | right side 2: 2 | Quit│")
        print("│                Submit               │")
        print("└─────────────────────────────────────┘")

        print('    ┌─────────────────────┬────────────────────┐')
        print('  ┌─┘                     │                    └─┐')
        print('  │      ╔         ╗      │     ╔         ╗      │')
        print('  │                       │                      │')
        print('  │            δ                      Σ          │')
        print('  │                       │                      │')
        print('  │      ╙         ╜      │     ╙         ╜      │')
        print('  └─┐                     │                    ┌─┘')
        print('    └─────────────────────┴────────────────────┘')
    elif Combo_change.i == True:
        os.system('cls')
        print("┌─────────────────────────────────────┐")
        print('│            Unknown Symbols          │')
        print("│               Commands              │")
        print("│Left side: 1 | right side 2: 2 | Quit│")
        print("│                Submit               │")
        print("└─────────────────────────────────────┘")

        print('    ┌─────────────────────┬────────────────────┐')
        print('  ┌─┘                     │                    └─┐')
        print('  │      ╔         ╗      │     ╔         ╗      │')
        print('  │                       │                      │')
        print('  │            Σ                      Σ          │')
        print('  │                       │                      │')
        print('  │      ╙         ╜      │     ╙         ╜      │')
        print('  └─┐                     │                    ┌─┘')
        print('    └─────────────────────┴────────────────────┘')
class Puzzles:


    def puzzle1(self):
        os.system('cls')

        if myPlayer.location =='dungeon_Right23':
            if areamap[myPlayer.location][SOLVED] is True:
                print("┌───────────────────────────────────┐")
                print('│                                   │')
                print("│              Commands             │")
                print("│        Place | Take | Walk away   │")
                print("└───────────────────────────────────┘")
                print_medeum('*You see a small depression within the stone wall with strange symbols matching that of the artifact*\n')
                talk = input('> ')
                print('Depression in wall: '+ str(puzzle.Depression))
                if talk.lower()== 'place':
                    print(''.join(myPlayer.inventory))
                    talk = input('Place: ')
                    if talk.lower() in myPlayer.inventory:
                        puzzle.Depression.append(talk)
                        myPlayer.inventory.remove(talk)
                        if 'odd artifact' in puzzle.Depression:
                            print_medeum('*You hear a soft click and gears turning, suddenly a small key drops to your feet*\n')
                            myPlayer.inventory.append('dungeon key 1')

                            areamap[myPlayer.location][SOLVED] = False
                            areamap['dungeon_Right25'][SOUTH] = False
                            prompt()

                        else:
                            print_medeum('Nothng seems to be happening\n')
                    else:
                        print_medeum('You do not own that item')
                elif talk.lower() == 'take':
                    talk = input('Take: ')
                    if talk.lower() in puzzle.Depression:
                        puzzle.Depression.remove(talk)
                        myPlayer.inventory.append(talk)
                while talk.lower() != 'walk away':
                    os.system('cls')
                    print("┌───────────────────────────────────┐")
                    print('│                                   │')
                    print("│              Commands             │")
                    print("│        Place | Take | Walk away   │")
                    print("└───────────────────────────────────┘")
                    print_medeum(
                        '*You see a small depression within the stone wall with strange symbols matching that of the artifact*\n')
                    talk = input('> ')
                    print('Depression in wall: ' + str(puzzle.Depression))
                    if talk.lower() == 'place':
                        print(''.join(myPlayer.inventory))
                        talk = input('Place: ')
                        if talk.lower() in myPlayer.inventory:
                            puzzle.Depression.append(talk)
                            myPlayer.inventory.remove(talk)
                            if 'odd artifact' in puzzle.Depression:
                                print_medeum(
                                    '*You hear a soft click and gears turning, suddenly a small key drops to your feet*\n')
                                myPlayer.inventory.append('dungeon key 1')
                                areamap[myPlayer.location][SOLVED] = False
                                areamap['dungeon_Right25'][SOUTH] = False
                                prompt()
                            else:
                                print_medeum('Nothng seems to be happening\n')
                        else:
                            print_medeum('You do not own that item')
                    elif talk.lower() == 'take':
                        talk = input('Take: ')
                        if talk.lower() in puzzle.Depression:
                            puzzle.Depression.remove(talk)
                            myPlayer.inventory.append(talk)

    def puzzle2(self):
        os.system('cls')

        if myPlayer.location == 'dungeon_Bottom_Right18':
            if areamap[myPlayer.location][SOLVED] is True:
                os.system('cls')
                print_medeum('You see two symbols infront of you\n')
                print_medeum('You gather that they can be turned to reveal 3 sides each.\n')
                print_medeum('what do you want to do?\n')
                input('Press ENTER to continue')
                Combo_print()
                talk = input('> ')
                if talk == '1':
                    if Combo_change.a == True:
                        Combo_change.b = True
                        Combo_change.a = False
                        Combo_print()
                    elif Combo_change.b == True:
                        Combo_change.c = True
                        Combo_change.b = False
                        Combo_print()
                    elif Combo_change.c == True:
                        Combo_change.a = True
                        Combo_change.c = False
                        Combo_print()
                    elif Combo_change.d == True:
                        Combo_change.e = True
                        Combo_change.d = False
                        Combo_print()
                    elif Combo_change.e == True:
                        Combo_change.f = True
                        Combo_change.e = False
                        Combo_print()
                    elif Combo_change.f == True:
                        Combo_change.d = True
                        Combo_change.f = False
                        Combo_print()
                    elif Combo_change.h == True:
                        Combo_change.i = True
                        Combo_change.h = False
                        Combo_print()
                    elif Combo_change.i == True:
                        Combo_change.g = True
                        Combo_change.i = False
                        Combo_print()
                    elif Combo_change.g == True:
                        Combo_change.h = True
                        Combo_change.g = False
                        Combo_print()
                elif talk == '2':
                    if Combo_change.b == True:
                        Combo_change.e = True
                        Combo_change.b = False
                        Combo_print()
                    elif Combo_change.e == True:
                        Combo_change.h = True
                        Combo_change.e = False
                        Combo_print()
                    elif Combo_change.h == True:
                        Combo_change.b = True
                        Combo_change.h = False
                        Combo_print()
                    elif Combo_change.c == True:
                        Combo_change.f = True
                        Combo_change.c = False
                        Combo_print()
                    elif Combo_change.f == True:
                        Combo_change.i = True
                        Combo_change.f = False
                        Combo_print()
                    elif Combo_change.i == True:
                        Combo_change.c = True
                        Combo_change.i = False
                        Combo_print()
                    elif Combo_change.a == True:
                        Combo_change.d = True
                        Combo_change.a = False
                        Combo_print()
                    elif Combo_change.d == True:
                        Combo_change.g = True
                        Combo_change.d = False
                        Combo_print()
                    elif Combo_change.g == True:
                        Combo_change.a = True
                        Combo_change.g = False
                        Combo_print()
                elif talk.lower() == 'submit':
                    if Combo_change.h == True:
                        print_medeum('*....*\n')
                        print_medeum('*click*\n')
                        print_medeum('*A door unlocked*\n')
                        areamap[myPlayer.location][SOLVED] = False
                        areamap['dungeon_Main9'][WEST] = False
                        prompt()

                    else:
                        print_medeum('*....*\n')
                        print_medeum('*Nothing happened*\n')
                while talk != 'quit':


                    talk = input('> ')
                    if talk == '1':
                        if Combo_change.a == True:
                            Combo_change.b = True
                            Combo_change.a = False
                            Combo_print()
                        elif Combo_change.b == True:
                            Combo_change.c = True
                            Combo_change.b = False
                            Combo_print()
                        elif Combo_change.c == True:
                            Combo_change.a = True
                            Combo_change.c = False
                            Combo_print()
                        elif Combo_change.d == True:
                            Combo_change.e = True
                            Combo_change.d = False
                            Combo_print()
                        elif Combo_change.e == True:
                            Combo_change.f = True
                            Combo_change.e = False
                            Combo_print()
                        elif Combo_change.f == True:
                            Combo_change.d = True
                            Combo_change.f = False
                            Combo_print()
                        elif Combo_change.h == True:
                            Combo_change.i = True
                            Combo_change.h = False
                            Combo_print()
                        elif Combo_change.i == True:
                            Combo_change.g = True
                            Combo_change.i = False
                            Combo_print()
                        elif Combo_change.g == True:
                            Combo_change.h = True
                            Combo_change.g = False
                            Combo_print()
                    elif talk == '2':
                        if Combo_change.b == True:
                            Combo_change.e = True
                            Combo_change.b = False
                            Combo_print()
                        elif Combo_change.e == True:
                            Combo_change.h = True
                            Combo_change.e = False
                            Combo_print()
                        elif Combo_change.h == True:
                            Combo_change.b = True
                            Combo_change.h = False
                            Combo_print()
                        elif Combo_change.c == True:
                            Combo_change.f = True
                            Combo_change.c = False
                            Combo_print()
                        elif Combo_change.f == True:
                            Combo_change.i = True
                            Combo_change.f = False
                            Combo_print()
                        elif Combo_change.i == True:
                            Combo_change.c = True
                            Combo_change.i = False
                            Combo_print()
                        elif Combo_change.a == True:
                            Combo_change.d = True
                            Combo_change.a = False
                            Combo_print()
                        elif Combo_change.d == True:
                            Combo_change.g = True
                            Combo_change.d = False
                            Combo_print()
                        elif Combo_change.g == True:
                            Combo_change.a = True
                            Combo_change.g = False
                            Combo_print()
                    elif talk.lower() == 'submit':
                        if Combo_change.h == True:
                            print_medeum('*....*\n')
                            print_medeum('*click*\n')
                            print_medeum('*A door unlocked*\n')
                            areamap[myPlayer.location][SOLVED] = False
                            areamap['dungeon_Main9'][WEST] = False
                            prompt()
                        else:
                            print_medeum('*....\n*')
                            print_medeum('*Nothing happened\n*')
    def puzzle3(self):
        if myPlayer.location =='dungeon_Main8':
            print_medeum('You see a curious switch...\n')
            print_medeum('Press it?\n')
            print('Yes or No\n')
            talk = input('> ')
            if talk.lower() == 'yes':
                print_medeum('Switch 1 has been turned on\n')
                puzzle3_button.button1 = True

        elif myPlayer.location == 'dungeon_Right11':
            print_medeum('You see a curious switch...\n')
            print_medeum('Press it?\n')
            print('Yes or No\n')
            talk = input('> ')
            if talk.lower() == 'yes':
                print_medeum('Switch 2 has been turned on\n')
                puzzle3_button.button2 = True
        elif myPlayer.location == 'dungeon_Bottom_Right17':
            print_medeum('You see a curious switch...\n')
            print_medeum('Press it?\n')
            print('Yes or No\n')
            talk = input('> ')
            if talk.lower() == 'yes':
               if puzzle3_button.button1 == True:
                   if puzzle3_button.button2 == True:
                       print_medeum('*Click*\n')
                       print_medeum('A door opened\n')
                       areamap['dungeon_left5'][WEST]= False
                   else:
                       print_medeum('*Switches reset*\n')
                       print_medeum('Switch 1 has been turned off\n')
                       print_medeum('Switch 2 has been turned off\n')
                       puzzle3_button.button1 = False
                       puzzle3_button.button2 = False
               else:
                   print_medeum('*Switches reset*\n')
                   print_medeum('Switch 1 has been turned off\n')
                   print_medeum('Switch 2 has been turned off\n')
                   puzzle3_button.button1 = False
                   puzzle3_button.button2 = False

Game_puzzle = Puzzles()



def book_reading():
    os.system('cls')
    print("┌───────────────────────────────────┐")
    print('│               Books               │')
    print("│              Commands             │")
    print("│            Read | Quit            │")
    print("└───────────────────────────────────┘")
    print(''.join(myPlayer.inventory))
    talk = input('> ')
    if talk.lower() == 'read':
        print_medeum('What book would you like to read?\n')
        if talk.lower() in myPlayer.inventory:
            if Items[talk][TYPE] == 'book':
                print("┌──────────────────────────────────────────┐")
                print("│ Name: " + str(Items[talk][NAME]))
                print("│ Description: " + str(Items[talk][INFO]))
                print('└──────────────────────────────────────────┘')
                input('Press ENTER to continue')
    while talk.lower() != 'quit':
        os.system('cls')
        print("┌───────────────────────────────────┐")
        print('│               Books               │')
        print("│              Commands             │")
        print("│            Read | Quit            │")
        print("└───────────────────────────────────┘")
        print(''.join(myPlayer.inventory))
        talk = input('> ')
        if talk.lower() == 'read':
            print_medeum('What book would you like to read?\n')
            if talk.lower() in myPlayer.inventory:
                if Items[talk][TYPE] == 'book':
                    print("┌──────────────────────────────────────────┐")
                    print("│ Name: " + str(Items[talk][NAME]))
                    print("│ Description: " + str(Items[talk][INFO]))
                    print('└──────────────────────────────────────────┘')
                    input('Press ENTER to continue')

def opening_crate():
    Random_reward = random.randint(1,100)
    Random_amount = random.randint(1, 5)
    Random_gold = random.randint(1,10)

    Ingrediants_list = ['potato', 'carrot', 'cabbage', 'lettuce', 'garlic', 'trout', 'crab', 'venison']
    Random_Ingrediant = random.choice(Ingrediants_list)


    Alchemy_Ingrediants_list = ['lions mane mushroom', 'bat wing', 'moon root', 'vampire dust', 'green bindweed',
                                'forest avens', 'fire moss','cyclops fat','sphinxs ichor','qilin husk','eerie bloom','ebon borage']
    Random_Alchemy = random.choice(Alchemy_Ingrediants_list)

    print_medeum('Crate is opened to reveal...\n')
    if Random_reward <= 10:
        # ingrediant
        print(Random_Ingrediant)
        myPlayer.inventory.append(Random_Ingrediant)

    if Random_reward <= 30:
        # Ingrediant arrow
        print(Random_Ingrediant)
        print('you found ' + str(Random_amount) + ' Arrow(s)!\n')
        weapon_loaded.Add_arrow(Random_amount)
        myPlayer.inventory.append(Random_Ingrediant)

    if Random_reward <= 50:
        # Alchemy Ingrediant
        print(Random_Alchemy)
        print(Random_Ingrediant)
        myPlayer.inventory.append(Random_Ingrediant)
        myPlayer.inventory.append(Random_Alchemy)

    if Random_reward <= 70:
        # Gold
        print('Gold Φ' + str(Random_gold))
        my_wallet.deposit(Random_gold)

    if Random_reward <= 90:
        # Alchemy
        print(Random_Alchemy)
        myPlayer.inventory.append(Random_Alchemy)


    if Random_reward >= 91:
        print_medeum('Container was empty!\n')


class Chest_TF:
    def __init__(self):
        self.state1 = False

locked_chest = Chest_TF()

def Locked_chest():
    PlayerLocation = ''.join(myPlayer.location)
    if areamap[PlayerLocation][LOCKED_CHEST] is True:
        if myPlayer.location == 'BedRoom_House7':
            if 'chest key' in myPlayer.inventory:
                if locked_chest.state1 == False:
                    locked_chest.state1 = True
                    areamap[PlayerLocation][LOCKED_CHEST] = False
                    print_medeum('You open the chest to find...\n')
                    print('*X 3 Large health potions have been added to your inventory*')
                    myPlayer.inventory.append('Large Health Potion')
                    myPlayer.inventory.append('Large Health Potion')
                    myPlayer.inventory.append('Large Health Potion')

                    input('Press ENTER to continue\n')
            else:
                print('The chest is locked...\n')
                time.sleep(1.0)


def Crate_location():
    PlayerLocation  = ''.join(myPlayer.location)
    if areamap[PlayerLocation][CRATE] is True:
        areamap[PlayerLocation][CRATE] = False
        opening_crate()
        input('Press ENTER to continue\n')


def ranged_weapon_dexterity():
    ranged_enhancer1 = fractions.Fraction(5, 10) * Total_attribute_points.Dexterity
    return int(ranged_enhancer1)

def weapon_enhancement_strength():
    weapon_enhancer1 = fractions.Fraction(5, 10) * Total_attribute_points.Strength
    return int(weapon_enhancer1)

def inteligence_potion_add():
    potion_changer1 = fractions.Fraction(5, 10) * Total_attribute_points.Intelligence
    return int(potion_changer1)
##################
# Crafting Table #
##################
def Crafting_Table():
    crafting_recipe = ['iron arrow x 5','steel arrow x 5']
    steel_arrow = ['steel arrow head','wood','feathers']
    iron_arrow = ['iron arrow head','wood','feathers']
    if myPlayer.location in within.CraftingTable:
        os.system('cls')
        print_medeum('*Accessing Crafting Table*\n')
        print("┌───────────────────────────────────┐")
        print('│           Crafting Table          │')
        print("│              Commands             │")
        print("│  Craft | Quit | Storage | Recipe  │")
        print("└───────────────────────────────────┘")
        talk = input('> ')
        if talk.lower() == 'craft':
            print("┌───────────────────────────────────┐")
            print('│           Crafting Menu           │')
            print("│             Commands              │")
            print("│         Create | Quit             │")
            print("└───────────────────────────────────┘")
            prGreen("Items: \n" + ' <><> \n'.join(crafting_recipe) + '\n')
            talk = input('> ')
            if talk.lower() == 'create':
                print_medeum('What item do you wish to craft?\n')
                ###############Iron Arrow#####################
                os.system('cls')
                print("┌───────────────────────────────────┐")
                print('│           Creating Menu           │')
                print("│             Commands              │")
                print("│               Quit                │")
                print("└───────────────────────────────────┘")
                prGreen("Items: \n" + ' <><> \n'.join(crafting_recipe) + '\n')
                talk = input('> ')
                if talk.lower() == 'iron arrow':
                    if 'iron arrow head' in myPlayer.inventory:
                        if 'wood' in myPlayer.inventory:
                            if 'feathers' in myPlayer.inventory:
                                print_medeum('Crafting....\n')
                                myPlayer.inventory.remove('iron arrow head')
                                myPlayer.inventory.remove('wood')
                                myPlayer.inventory.remove('feathers')
                                myPlayer.quiver.append('iron arrow')
                                myPlayer.quiver.append('iron arrow')
                                myPlayer.quiver.append('iron arrow')
                                myPlayer.quiver.append('iron arrow')
                                myPlayer.quiver.append('iron arrow')

                                print('Done!\n')
                                input('Press ENTER to continue')

                            else:
                                print_medeum('Do not have feathers!\n')

                        else:
                            print_medeum('Do not have wood!\n')
                    else:
                        print_medeum('Do not have a arrow head!\n')

                ###############Steel Arrow#####################
                if talk.lower() == 'steel arrow':
                    if 'steel arrow head' in myPlayer.inventory:
                        if 'wood' in myPlayer.inventory:
                            if 'feathers' in myPlayer.inventory:
                                print_medeum('Crafting....\n')
                                myPlayer.inventory.remove('steel arrow head')
                                myPlayer.inventory.remove('wood')
                                myPlayer.inventory.remove('feathers')
                                myPlayer.quiver.append('steel arrow')
                                myPlayer.quiver.append('steel arrow')
                                myPlayer.quiver.append('steel arrow')
                                myPlayer.quiver.append('steel arrow')
                                myPlayer.quiver.append('steel arrow')

                                print('Done!\n')
                                input('Press ENTER to continue')

                            else:
                                print_medeum('Do not have feathers!\n')

                        else:
                            print_medeum('Do not have wood!\n')
                    else:
                        print_medeum('Do not have a arrow head!\n')

                while talk.lower() != 'quit':
                    talk = input('> ')
                    if talk.lower() == 'iron arrow':
                        if 'iron arrow head' in myPlayer.inventory:
                            if 'wood' in myPlayer.inventory:
                                if 'feathers' in myPlayer.inventory:
                                    print_medeum('Crafting....\n')
                                    myPlayer.inventory.remove('iron arrow head')
                                    myPlayer.inventory.remove('wood')
                                    myPlayer.inventory.remove('feathers')
                                    myPlayer.quiver.append('iron arrow')
                                    myPlayer.quiver.append('iron arrow')
                                    myPlayer.quiver.append('iron arrow')
                                    myPlayer.quiver.append('iron arrow')
                                    myPlayer.quiver.append('iron arrow')

                                    print('Done!\n')
                                    input('Press ENTER to continue')

                                else:
                                    print_medeum('Do not have feathers!\n')

                            else:
                                print_medeum('Do not have wood!\n')
                        else:
                            print_medeum('Do not have a arrow head!\n')

                    ###############Steel Arrow#####################
                    if talk.lower() == 'steel arrow':
                        if 'steel arrow head' in myPlayer.inventory:
                            if 'wood' in myPlayer.inventory:
                                if 'feathers' in myPlayer.inventory:
                                    print_medeum('Crafting....\n')
                                    myPlayer.inventory.remove('steel arrow head')
                                    myPlayer.inventory.remove('wood')
                                    myPlayer.inventory.remove('feathers')
                                    myPlayer.quiver.append('steel arrow')
                                    myPlayer.quiver.append('steel arrow')
                                    myPlayer.quiver.append('steel arrow')
                                    myPlayer.quiver.append('steel arrow')
                                    myPlayer.quiver.append('steel arrow')

                                    print('Done!\n')
                                    input('Press ENTER to continue')

                                else:
                                    print_medeum('Do not have feathers!\n')

                            else:
                                print_medeum('Do not have wood!\n')
                        else:
                            print_medeum('Do not have a arrow head!\n')

        while talk.lower() != 'quit':
            os.system('cls')
            print_medeum('*Accessing Crafting Table*\n')
            print("┌───────────────────────────────────┐")
            print('│           Crafting Table          │')
            print("│              Commands             │")
            print("│  Craft | Quit | Storage | Recipe  │")
            print("└───────────────────────────────────┘")
            talk = input('> ')
            if talk.lower() == 'craft':
                print("┌───────────────────────────────────┐")
                print('│           Crafting Menu           │')
                print("│             Commands              │")
                print("│         Create | Quit             │")
                print("└───────────────────────────────────┘")
                prGreen("Items: \n" + ' <><> \n'.join(crafting_recipe) + '\n')
                talk = input('> ')
                if talk.lower() == 'create':
                    print_medeum('What item do you wish to craft?\n')
                    ###############Iron Arrow#####################
                    os.system('cls')
                    print("┌───────────────────────────────────┐")
                    print('│           Creating Menu           │')
                    print("│             Commands              │")
                    print("│               Quit                │")
                    print("└───────────────────────────────────┘")
                    prGreen("Items: \n" + ' <><> \n'.join(crafting_recipe) + '\n')
                    talk = input('> ')
                    if talk.lower() == 'iron arrow':
                        if 'iron arrow head' in myPlayer.inventory:
                            if 'wood' in myPlayer.inventory:
                                if 'feathers' in myPlayer.inventory:
                                    print_medeum('Crafting....\n')
                                    myPlayer.inventory.remove('iron arrow head')
                                    myPlayer.inventory.remove('wood')
                                    myPlayer.inventory.remove('feathers')
                                    myPlayer.quiver.append('iron arrow')
                                    myPlayer.quiver.append('iron arrow')
                                    myPlayer.quiver.append('iron arrow')
                                    myPlayer.quiver.append('iron arrow')
                                    myPlayer.quiver.append('iron arrow')

                                    print('Done!\n')
                                    input('Press ENTER to continue')

                                else:
                                    print_medeum('Do not have feathers!\n')

                            else:
                                print_medeum('Do not have wood!\n')
                        else:
                            print_medeum('Do not have a arrow head!\n')

                    ###############Steel Arrow#####################
                    if talk.lower() == 'steel arrow':
                        if 'steel arrow head' in myPlayer.inventory:
                            if 'wood' in myPlayer.inventory:
                                if 'feathers' in myPlayer.inventory:
                                    print_medeum('Crafting....\n')
                                    myPlayer.inventory.remove('steel arrow head')
                                    myPlayer.inventory.remove('wood')
                                    myPlayer.inventory.remove('feathers')
                                    myPlayer.quiver.append('steel arrow')
                                    myPlayer.quiver.append('steel arrow')
                                    myPlayer.quiver.append('steel arrow')
                                    myPlayer.quiver.append('steel arrow')
                                    myPlayer.quiver.append('steel arrow')

                                    print('Done!\n')
                                    input('Press ENTER to continue')

                                else:
                                    print_medeum('Do not have feathers!\n')

                            else:
                                print_medeum('Do not have wood!\n')
                        else:
                            print_medeum('Do not have a arrow head!\n')

                    while talk.lower() != 'quit':
                        talk = input('> ')
                        if talk.lower() == 'iron arrow':
                            if 'iron arrow head' in myPlayer.inventory:
                                if 'wood' in myPlayer.inventory:
                                    if 'feathers' in myPlayer.inventory:
                                        print_medeum('Crafting....\n')
                                        myPlayer.inventory.remove('iron arrow head')
                                        myPlayer.inventory.remove('wood')
                                        myPlayer.inventory.remove('feathers')
                                        myPlayer.quiver.append('iron arrow')
                                        myPlayer.quiver.append('iron arrow')
                                        myPlayer.quiver.append('iron arrow')
                                        myPlayer.quiver.append('iron arrow')
                                        myPlayer.quiver.append('iron arrow')

                                        print('Done!\n')
                                        input('Press ENTER to continue')

                                    else:
                                        print_medeum('Do not have feathers!\n')

                                else:
                                    print_medeum('Do not have wood!\n')
                            else:
                                print_medeum('Do not have a arrow head!\n')

                        ###############Steel Arrow#####################
                        if talk.lower() == 'steel arrow':
                            if 'steel arrow head' in myPlayer.inventory:
                                if 'wood' in myPlayer.inventory:
                                    if 'feathers' in myPlayer.inventory:
                                        print_medeum('Crafting....\n')
                                        myPlayer.inventory.remove('steel arrow head')
                                        myPlayer.inventory.remove('wood')
                                        myPlayer.inventory.remove('feathers')
                                        myPlayer.quiver.append('steel arrow')
                                        myPlayer.quiver.append('steel arrow')
                                        myPlayer.quiver.append('steel arrow')
                                        myPlayer.quiver.append('steel arrow')
                                        myPlayer.quiver.append('steel arrow')

                                        print('Done!\n')
                                        input('Press ENTER to continue')

                                    else:
                                        print_medeum('Do not have feathers!\n')

                                else:
                                    print_medeum('Do not have wood!\n')
                            else:
                                print_medeum('Do not have a arrow head!\n')


################
#    Alchemy   #
################
#Player will create a potion like the gear generator and then it will append the dictionary
# from there the player can create potions with certain ingrediants and use them to aid his adventure.
global Potion_heal
global Potion_mana
global Potion_name
global Potion_info


def Alchemy_Table():

    if myPlayer.location in within.AlchemyTable:
        os.system('cls')
        print("┌───────────────────────────────────┐")
        print('│            Alchemy Table          │')
        print("│              Commands             │")
        print("│           Create | Quit           │")
        print("└───────────────────────────────────┘")
        talk = input('> ')
        if talk.lower() == 'create':
            prGreen("Inventory: \n" + ' <><> \n'.join(myPlayer.inventory) + '\n')
            print_medeum('Choose 1st Ingrediant\n')
            choice1 = input('> ')
            if choice1.lower() in Alchemy_Ingrediants:
                if choice1.lower() in myPlayer.inventory:
                    myPlayer.inventory.remove(choice1)
                    print_medeum('Choose 2nd Ingrediant\n')
                    choice2 = input('> ')
                    if choice2.lower() in Alchemy_Ingrediants:

                        if choice2.lower() in myPlayer.inventory:
                            myPlayer.inventory.remove(choice2)

                            print("┌───────────────────────────────────┐")
                            print('│            Alchemy Table          │')
                            print('│          First Ingrediant        │')
                            print("│Name: " + Alchemy_Ingrediants[choice1][ANAME] + " │")
                            print("│Healing: " + str(Alchemy_Ingrediants[choice1][AHEAL]) + " │")
                            print("│Mana: " + str(Alchemy_Ingrediants[choice1][AMANA]) + " │")
                            print('│          Second Ingrediant        │')
                            print("│Name: " + Alchemy_Ingrediants[choice2][ANAME] + " │")
                            print("│Healing: " + str(Alchemy_Ingrediants[choice2][AHEAL]) + " │")
                            print("│Mana: " + str(Alchemy_Ingrediants[choice2][AMANA]) + " │")
                            print("└───────────────────────────────────┘")
                            print_medeum('Do you want to create a potion with these?\n')
                            talk = input('> ')
                            if talk.lower() in within.accept:
                                print_medeum('Please enter the potion name here\n')
                                Potion_name = input('> ')
                                print_medeum('Please enter the potion info here\n')
                                Potion_info = input('> ')
                                print_medeum('Creating potion....\n')

                                Potion_heal = Alchemy_Ingrediants[choice1][AHEAL] + Alchemy_Ingrediants[choice2][
                                    AHEAL] + inteligence_potion_add()
                                Potion_mana = Alchemy_Ingrediants[choice1][AMANA] + Alchemy_Ingrediants[choice2][
                                    AMANA] + inteligence_potion_add()
                                if Potion_heal > 0:
                                    HPOTION_TF = True
                                else:
                                    HPOTION_TF = False
                                if Potion_mana > 0:
                                    MPOTION_TF = True
                                else:
                                    MPOTION_TF = False
                                print_medeum('Done!\n')
                                Potion[Potion_name] = {NAME:Potion_name, INFO: Potion_info, TYPE: 'Custom',
                                                       EQUIPABLE: False, EFFECT: 'Replinishes Health or Mana',
                                                       HEAL: Potion_heal,
                                                       REPLENISH: Potion_mana, HPOTION: HPOTION_TF,
                                                       MPOTION: MPOTION_TF, ANTIDOTE: False, PARALYSIS: False}
                                myPlayer.inventory.append(Potion_name)
                            else:
                                myPlayer.inventory.append(choice1)
                                myPlayer.inventory.append(choice2)


                        else:
                            print('You dont own that item\n')
                            myPlayer.inventory.append(choice1)

                    else:
                        print('Not a valid ingrediant\n')
                        myPlayer.inventory.append(choice1)

                else:
                    print('You dont own that item\n')

            else:
                print('Not a valid ingrediant\n')
        while talk.lower() != 'quit':
            os.system('cls')
            print("┌───────────────────────────────────┐")
            print('│            Alchemy Table          │')
            print("│              Commands             │")
            print("│           Create | Quit           │")
            print("└───────────────────────────────────┘")
            talk = input('> ')
            if talk.lower() == 'create':
                prGreen("Inventory: \n" + ' <><> \n'.join(myPlayer.inventory) + '\n')
                print_medeum('Choose 1st Ingrediant\n')
                choice1 = input('> ')
                if choice1.lower() in Alchemy_Ingrediants:
                    if choice1.lower() in myPlayer.inventory:
                        myPlayer.inventory.remove(choice1)
                        print_medeum('Choose 2nd Ingrediant\n')
                        choice2 = input('> ')
                        if choice2.lower() in Alchemy_Ingrediants:

                            if choice2.lower() in myPlayer.inventory:
                                myPlayer.inventory.remove(choice2)

                                print("┌───────────────────────────────────┐")
                                print('│            Alchemy Table          │')
                                print('│          First Ingrediant        │')
                                print("│Name: " + Alchemy_Ingrediants[choice1][ANAME] + " │")
                                print("│Healing: " + str(Alchemy_Ingrediants[choice1][AHEAL]) + " │")
                                print("│Mana: " + str(Alchemy_Ingrediants[choice1][AMANA]) + " │")
                                print('│          Second Ingrediant        │')
                                print("│Name: " + Alchemy_Ingrediants[choice2][ANAME] + " │")
                                print("│Healing: " + str(Alchemy_Ingrediants[choice2][AHEAL]) + " │")
                                print("│Mana: " + str(Alchemy_Ingrediants[choice2][AMANA]) + " │")
                                print("└───────────────────────────────────┘")
                                print_medeum('Do you want to create a potion with these?\n')
                                talk = input('> ')
                                if talk.lower() in within.accept:
                                    print_medeum('Please enter the potion name here\n')
                                    Potion_name = input('> ')
                                    print_medeum('Please enter the potion info here\n')
                                    Potion_info = input('> ')
                                    print_medeum('Creating potion....\n')

                                    Potion_heal = Alchemy_Ingrediants[choice1][AHEAL] + Alchemy_Ingrediants[choice2][
                                        AHEAL] + inteligence_potion_add()
                                    Potion_mana = Alchemy_Ingrediants[choice1][AMANA] + Alchemy_Ingrediants[choice2][
                                        AMANA] + inteligence_potion_add()
                                    if Potion_heal > 0:
                                        HPOTION_TF = True
                                    else:
                                        HPOTION_TF = False
                                    if Potion_mana > 0:
                                        MPOTION_TF = True
                                    else:
                                        MPOTION_TF = False
                                    print_medeum('Done!\n')
                                    Potion[Potion_name] = {NAME: Potion_name, INFO: Potion_info,TYPE:'Custom',EQUIPABLE: False,EFFECT:'Replinishes Health or Mana', HEAL: Potion_heal,
                                                           REPLENISH: Potion_mana, HPOTION: HPOTION_TF,
                                                           MPOTION: MPOTION_TF, ANTIDOTE: False, PARALYSIS: False}
                                    myPlayer.inventory.append(Potion_name)
                                else:
                                    myPlayer.inventory.append(choice1)
                                    myPlayer.inventory.append(choice2)


                            else:
                                print('You dont own that item\n')
                                myPlayer.inventory.append(choice1)
                        else:
                            print('Not a valid ingrediant\n')
                            myPlayer.inventory.append(choice1)
                    else:
                        print('You dont own that item\n')
                else:
                    print('Not a valid ingrediant\n')



################
#    COOKING   #
################
def Kitchen_function():
    food_dishes = ['cooked trout','cooked venison','kimchi stew']
    os.system('cls')
    cooked_trout_ing = ['trout','garlic']
    cooked_venison_ing = ['venison','garlic','potato']
    Kimchi_stew_ing = ['cabbage','garlic']
    if myPlayer.location in within.Kitchen_inn:
        print_medeum('*Accessing kitchen*\n')
        print("┌───────────────────────────────────┐")
        print('│              Kitchen              │')
        print("│              Commands             │")
        print("│  Cook | Quit | Storage | Recipe   │")
        print("└───────────────────────────────────┘")
        talk = input('> ')
        if talk.lower() == 'cook':
            print("┌───────────────────────────────────┐")
            print('│           Cooking menu            │')
            print("│             Commands              │")
            print("│         Create | Quit             │")
            print("└───────────────────────────────────┘")
            talk = input('> ')
            print('\n'.join(food_dishes))
            if talk.lower() == 'create':
                print_medeum('What dish would you like to create?\n')
                ###############Trout cooked#####################
                talk = input('> ')
                if talk.lower() == 'cooked trout':
                    if 'trout' in myPlayer.inventory:
                        if 'garlic' in myPlayer.inventory:
                            print_medeum('cooking....\n')
                            print('Done!\n')
                            input('Press ENTER to continue')
                            myPlayer.inventory.remove('trout')
                            myPlayer.inventory.remove('garlic')
                            myPlayer.inventory.append('cooked trout')
                ###############venison cooked#####################
                elif talk.lower() == ' cooked venison':
                    if 'venison' in myPlayer.inventory:
                        if 'garlic' in myPlayer.inventory:
                            if 'potato' in myPlayer.inventory:
                                print_medeum('cooking....\n')
                                print('Done!\n')
                                input('Press ENTER to continue')
                                myPlayer.inventory.remove('venison')
                                myPlayer.inventory.remove('garlic')
                                myPlayer.inventory.remove('potato')
                                myPlayer.inventory.append('cooked venison')
                ###############Kimchi Stew cooked#####################
                elif talk.lower() == 'kimchi stew':
                    if 'cabbage' in myPlayer.inventory:
                        if 'garlic' in myPlayer.inventory:
                            print_medeum('cooking....\n')
                            print('Done!\n')
                            input('Press ENTER to continue')
                            myPlayer.inventory.remove('cabbage')
                            myPlayer.inventory.remove('garlic')
                            myPlayer.inventory.append('kimchi stew')
            while talk.lower() != 'quit':
                print("┌───────────────────────────────────┐")
                print('│           Cooking menu            │')
                print("│             Commands              │")
                print("│         Create | Quit             │")
                print("└───────────────────────────────────┘")
                talk = input('> ')
                print('\n'.join(food_dishes))
                if talk.lower() == 'create':
                    print_medeum('What dish would you like to create?\n')
                    ###############Trout cooked#####################
                    talk = input('> ')
                    if talk.lower() == 'cooked trout':
                        if 'trout' in myPlayer.inventory:
                            if 'garlic' in myPlayer.inventory:
                                print_medeum('Cooking....\n')
                                print('Done!\n')
                                input('Press ENTER to continue')
                                myPlayer.inventory.remove('trout')
                                myPlayer.inventory.remove('garlic')
                                myPlayer.inventory.append('cooked trout')
                    ###############venison cooked#####################
                    elif talk.lower() == ' cooked venison':
                        if 'venison' in myPlayer.inventory:
                            if 'garlic' in myPlayer.inventory:
                                if 'potato' in myPlayer.inventory:
                                    print_medeum('Cooking....\n')
                                    print('Done!\n')
                                    input('Press ENTER to continue')
                                    myPlayer.inventory.remove('venison')
                                    myPlayer.inventory.remove('garlic')
                                    myPlayer.inventory.remove('potato')
                                    myPlayer.inventory.append('cooked venison')
                    ###############Kimchi Stew cooked#####################
                    elif talk.lower() == 'kimchi stew':
                        if 'cabbage' in myPlayer.inventory:
                            if 'garlic' in myPlayer.inventory:
                                print_medeum('Cooking....\n')
                                print('Done!\n')
                                input('Press ENTER to continue')
                                myPlayer.inventory.remove('cabbage')
                                myPlayer.inventory.remove('garlic')
                                myPlayer.inventory.append('kimchi stew')
        elif talk.lower() == 'recipe':
            print_medeum('List of known Recipes:\n')
            print('Cooked trout: Garlic, Trout')
            print('Cooked venison: Venison,Garlic,Potato ')
            print('Kimchi stew: Cabbage,Garlic')
            input('Press ENTER to continue')
        elif talk.lower() == 'storage':
            print_medeum('What do you want to store?\n')
            talk = input('> ')
            if talk.lower() in within.accept:
                Player_deposit()
        while talk.lower() != 'quit':
            food_dishes = ['cooked trout', 'cooked venison', 'kimchi stew']
            os.system('cls')
            cooked_trout_ing = ['trout', 'garlic']
            cooked_venison_ing = ['venison', 'garlic', 'potato']
            Kimchi_stew_ing = ['cabbage', 'garlic']
            if myPlayer.location in within.Kitchen_inn:
                print_medeum('*Accessing kitchen*\n')
                print("┌───────────────────────────────────┐")
                print('│              Kitchen              │')
                print("│              Commands             │")
                print("│  Cook | Quit | Storage | Recipe   │")
                print("└───────────────────────────────────┘")
                talk = input('> ')
                if talk.lower() == 'cook':
                    print("┌───────────────────────────────────┐")
                    print('│           Cooking menu            │')
                    print("│             Commands              │")
                    print("│         Create | Quit             │")
                    print("└───────────────────────────────────┘")
                    talk = input('> ')
                    print('\n'.join(food_dishes))
                    if talk.lower() == 'create':
                        print_medeum('What dish would you like to create?\n')
                        ###############Trout cooked#####################
                        if talk.lower() == 'cooked trout':
                            if 'trout' in myPlayer.inventory:
                                if 'garlic' in myPlayer.inventory:
                                    print_medeum('cooking....\n')
                                    print('Done!\n')
                                    input('Press ENTER to continue')
                                    myPlayer.inventory.remove('trout')
                                    myPlayer.inventory.remove('garlic')
                                    myPlayer.inventory.append('cooked trout')
                        ###############venison cooked#####################
                        elif talk.lower() == ' cooked venison':
                            if 'venison' in myPlayer.inventory:
                                if 'garlic' in myPlayer.inventory:
                                    if 'potato' in myPlayer.inventory:
                                        print_medeum('cooking....\n')
                                        print('Done!\n')
                                        input('Press ENTER to continue')
                                        myPlayer.inventory.remove('venison')
                                        myPlayer.inventory.remove('garlic')
                                        myPlayer.inventory.remove('potato')
                                        myPlayer.inventory.append('cooked venison')
                        ###############Kimchi Stew cooked#####################
                        elif talk.lower() == 'kimchi stew':
                            if 'cabbage' in myPlayer.inventory:
                                if 'garlic' in myPlayer.inventory:
                                    print_medeum('cooking....\n')
                                    print('Done!\n')
                                    input('Press ENTER to continue')
                                    myPlayer.inventory.remove('cabbage')
                                    myPlayer.inventory.remove('garlic')
                                    myPlayer.inventory.append('kimchi stew')
                    while talk.lower() != 'quit':
                        print("┌───────────────────────────────────┐")
                        print('│           Cooking menu            │')
                        print("│             Commands              │")
                        print("│         Create | Quit             │")
                        print("└───────────────────────────────────┘")
                        talk = input('> ')
                        print('\n'.join(food_dishes))
                        if talk.lower() == 'create':
                            print_medeum('What dish would you like to create?\n')
                            ###############Trout cooked#####################
                            if talk.lower() == 'cooked trout':
                                if 'trout' in myPlayer.inventory:
                                    if 'garlic' in myPlayer.inventory:
                                        print_medeum('Cooking....\n')
                                        print('Done!\n')
                                        input('Press ENTER to continue')
                                        myPlayer.inventory.remove('trout')
                                        myPlayer.inventory.remove('garlic')
                                        myPlayer.inventory.append('cooked trout')
                            ###############venison cooked#####################
                            elif talk.lower() == ' cooked venison':
                                if 'venison' in myPlayer.inventory:
                                    if 'garlic' in myPlayer.inventory:
                                        if 'potato' in myPlayer.inventory:
                                            print_medeum('Cooking....\n')
                                            print('Done!\n')
                                            input('Press ENTER to continue')
                                            myPlayer.inventory.remove('venison')
                                            myPlayer.inventory.remove('garlic')
                                            myPlayer.inventory.remove('potato')
                                            myPlayer.inventory.append('cooked venison')
                            ###############Kimchi Stew cooked#####################
                            elif talk.lower() == 'kimchi stew':
                                if 'cabbage' in myPlayer.inventory:
                                    if 'garlic' in myPlayer.inventory:
                                        print_medeum('Cooking....\n')
                                        print('Done!\n')
                                        input('Press ENTER to continue')
                                        myPlayer.inventory.remove('cabbage')
                                        myPlayer.inventory.remove('garlic')
                                        myPlayer.inventory.append('kimchi stew')
                elif talk.lower() == 'recipe':
                    print_medeum('List of known Recipes:\n')
                    print('Cooked trout: Garlic, Trout')
                    print('Cooked venison: Venison,Garlic,Potato ')
                    print('Kimchi stew: Cabbage,Garlic')
                    input('Press ENTER to continue')
                elif talk.lower() == 'storage':
                    print_medeum('What do you want to store?')
                    talk = input('> ')
                    if talk.lower() in within.accept:
                        Player_deposit()







class Story:
    def Intro_chapter1(self):
        os.system('cls')
        print_medeum('*You finally wake up from what appears to have been a nightmare.*\n')
        print_medeum(
            '*The last thing you recall is arriving from your long voyage across the sea to this manor from a curious invitation.*\n')
        print_medeum(
            '*After arriving the nanny Mrs. Shephard helped me with my belongings and guided me to my room of stay.*\n')
        print_medeum(
            '*Now that I am awake I should go locate Mrs. Shephard and find out more information about this inheritince.*\n')
        input('Press ENTER to continue')

    def Chapter2(self):
        os.system('cls')
        print_medeum('*Having located the letter, you are yet to find anyone who resides in this strange manor.*\n')
        print_medeum(
            '*The letter described strange shapes coming from the forest, but you havent the slightest idea what they could be.*\n')
        print_medeum('*Maybe I should go collect more information from around the property.*\n')
        input('Press ENTER to continue')


Progression = Story()


def append_check(self):
    if len(myPlayer.inventory) < myPlayer.Inventory_size:
        myPlayer.inventory.append(self)
    elif len(myPlayer.inventory) == myPlayer.Inventory_size:
        print('Inventory cannot be fuller than ' + str(myPlayer.Inventory_size) + '.\n')


def help():
    os.system('cls')
    print('How to play\n')
    print('To navigate, Type W or A or S or D and then hit ENTER\n')
    print('Type INSPECT to interact with objects in the room\n')
    print('Type LOOK to observe contents of rooms\n')
    print('Type TALK to speak with NPCs\n')
    print('Type TAKE in order to acquire objects\n')
    print('Type INVENTORY to see inventory\n')
    print('type EQUIP to equip weapons/gear\n')
    print('Type ATTRIBUTE to allocate points earned when leveling up\n')
    print('Type STATS to view player stats and data\n')
    print('Type JOURNAL to see clues or view missions\n')
    print('Type OPTIONS to bring up a menu for additional interactions\n')
    print('Type STORAGE  to store additonal gear at player bases\n')
    print('Type ITEM to use potions consumables\n')
    print('Type HELP at any time to get these commands again\n')
    print("Crafting: Crafting can be done in the player inns. Recipes will be posted and can be created by having the matching  ingrediants.\n ")
    print("Alchemy: Alchemy requires at most two ingrediants in any combonation. Found in the player inn.\n")
    print("Cooking:  Cooking uses pre defined reciepes in in the kitchen in order to increase health.\n")

    input("Press ENTER to continue\n")
    os.system('cls')


################################
#### Mission control Center####
###############################


MISSION_NAME = 'Mission name'
COMPLETED = 'Completed'
MISSION_DES = 'Mission Description'
MISSION_REWARD = 'Mission Reward'
ACTIVE = 'Active'

Missions = {
    'Mission 1': {
        MISSION_NAME: 'Investigate the House and Garden\n',
        COMPLETED: False,
        MISSION_DES: 'I have just woken up from a very odd dream, I better go greet my host and find out what I need to do next\n',
        MISSION_REWARD: False,
        ACTIVE: False,

    },

    'Mission 2': {
        MISSION_NAME: 'Locate Lost camera\n',
        COMPLETED: False,
        MISSION_DES: 'Mrs Shephard has lost the camera that has the odd negatives she mentioned, I need to go find it in the manor.\n',
        MISSION_REWARD: False,
        ACTIVE: False,

    },

    'Mission 3': {
        MISSION_NAME: 'A Parcel in Aden',
        COMPLETED: False,
        MISSION_DES: 'Deliver parcel to Aden',
        MISSION_REWARD: False,
        ACTIVE: False,
    },

    'Mission 4': {
        MISSION_NAME: 'The Lawyer',
        COMPLETED: False,
        MISSION_DES: 'After having delivered the Parcel, You should return back to the manor to speak with the one who sent you the letter.',
        MISSION_REWARD: False,
        ACTIVE: False,
    },
    'Mission 5': {
        MISSION_NAME: 'Getting Stronger',
        COMPLETED: False,
        MISSION_DES: 'You need to get stronger, so lets try and get to level 8!',
        MISSION_REWARD: False,
        ACTIVE: False,
    },

    'Mission 6': {
        MISSION_NAME: 'A dark preface.',
        COMPLETED: False,
        MISSION_DES: """I have discovered this strange cavern on my way to locating the waterfalls. I should investigate this strange place for more answers.""",
        MISSION_REWARD: False,
        ACTIVE: False,
    },

    'Mission 7': {
        MISSION_NAME: 'Mission 7',
        COMPLETED: False,
        MISSION_DES: 'The seventh mission',
        MISSION_REWARD: False,
        ACTIVE: False,
    },

    'Mission 8': {
        MISSION_NAME: 'Mission 8',
        COMPLETED: False,
        MISSION_DES: 'The eigth mission',
        MISSION_REWARD: False,
        ACTIVE: False,
    },

    'Mission 9': {
        MISSION_NAME: 'Mission 9',
        COMPLETED: False,
        MISSION_DES: 'The ninth mission',
        MISSION_REWARD: False,
        ACTIVE: False,
    },

    'Mission 10': {
        MISSION_NAME: 'Mission 10',
        COMPLETED: False,
        MISSION_DES: 'The tenth mission',
        MISSION_REWARD: False,
        ACTIVE: False,
    },
}


class NPCInventory:
    def __init__(self):
        self.AnneShephard = []
        self.AbigailWinchester = []
        self.Bystander5  = []


Storage = NPCInventory()

##################
###Mission step 2#
##################
#####Checks if the mission has been completed from the toggle, and then passes to the reward
def Current_mission():
    if Missions['Mission 1'][COMPLETED] is True:
        Missions['Mission 1'][COMPLETED] = False
        Missions['Mission 1'][ACTIVE] = False
        name = Missions['Mission 1'][MISSION_NAME]
        Missions['Mission 2'][ACTIVE] = True
        if 'key' in myPlayer.inventory:
            myPlayer.inventory.remove('key')
            Mission_completed(name)

        ##############################
    if Missions['Mission 2'][COMPLETED] is True:
        Missions['Mission 2'][COMPLETED] = False
        Missions['Mission 2'][ACTIVE] = False
        name = Missions['Mission 2'][MISSION_NAME]
        Missions['Mission 3'][ACTIVE] = True
        if 'camera' in Storage.AnneShephard:
            Storage.AnneShephard.remove('camera')
            Mission_completed(name)
        ##############################
    if Missions['Mission 3'][COMPLETED] is True:
        Missions['Mission 3'][COMPLETED] = False
        Missions['Mission 3'][ACTIVE] = False
        name = Missions['Mission 3'][MISSION_NAME]
        Missions['Mission 4'][ACTIVE] = True
        if 'parcel' in Storage.AbigailWinchester:
            Storage.AbigailWinchester.remove('parcel')
            Mission_completed(name)
        ##############################
    if Missions['Mission 4'][COMPLETED] is True:
        Missions['Mission 4'][COMPLETED] = False
        Missions['Mission 4'][ACTIVE] = False
        name = Missions['Mission 4'][MISSION_NAME]
        Missions['Mission 5'][ACTIVE] = True
        if NPC.metKlausMuller == True:
            NPC.metKlausMuller = False
            Mission_completed(name)
        ##############################
    if Missions['Mission 5'][COMPLETED] is True:
        Missions['Mission 5'][COMPLETED] = False
        Missions['Mission 5'][ACTIVE] = False
        name = Missions['Mission 5'][MISSION_NAME]
        Missions['Mission 6'][ACTIVE] = True
        Mission_completed(name)
        ##############################
    if Missions['Mission 6'][COMPLETED] is True:
        Missions['Mission 6'][COMPLETED] = False
        Missions['Mission 6'][ACTIVE] = False
        name = Missions['Mission 6'][MISSION_NAME]
        Missions['Mission 7'][ACTIVE] = True
        Mission_completed(name)
        ##############################
    if Missions['Mission 7'][COMPLETED] is True:
        Missions['Mission 7'][COMPLETED] = False
        Missions['Mission 7'][ACTIVE] = False
        name = Missions['Mission 7'][MISSION_NAME]
        Mission_completed(name)
        ##############################
    if Missions['Mission 8'][COMPLETED] is True:
        Missions['Mission 8'][COMPLETED] = False
        Missions['Mission 8'][ACTIVE] = False
        name = Missions['Mission 8'][MISSION_NAME]
        Mission_completed(name)
        ##############################
    if Missions['Mission 9'][COMPLETED] is True:
        Missions['Mission 9'][COMPLETED] = False
        Missions['Mission 9'][ACTIVE] = False
        name = Missions['Mission 9'][MISSION_NAME]
        Mission_completed(name)
        ##############################
    if Missions['Mission 10'][COMPLETED] is True:
        Missions['Mission 10'][COMPLETED] = False
        Missions['Mission 10'][ACTIVE] = False
        name = Missions['Mission 10'][MISSION_NAME]
        Mission_completed(name)
        ##############################

##################
###Mission step 3#
##################
## Displays when mission is completed
def Mission_completed(self):
    os.system('cls')
    print('You completed ' + self + '!')
    Completed_mission()


##Refreshes the mission values
##Missions
##Reward  determines if the player can receieve the reward for the mission
##Completed determined if the mission is completed
##Active determines if the mission is the current mission or not
##################
###Mission step 1#
##################
def missions_toggle():
    if 'key' in myPlayer.inventory:
        areamap['Foyer_House1'][EAST]= False
        if Missions['Mission 1'][MISSION_REWARD] is False:
            Game_Objects.Key = True
            Missions['Mission 1'][COMPLETED] = True
            Missions['Mission 1'][MISSION_REWARD] = True
    if 'camera' in Storage.AnneShephard:
        if Missions['Mission 2'][MISSION_REWARD] is False:
            Missions['Mission 2'][COMPLETED] = True
            Missions['Mission 2'][MISSION_REWARD] = True
    if 'parcel' in Storage.AbigailWinchester:
        if Missions['Mission 3'][MISSION_REWARD] is False:
            Missions['Mission 3'][COMPLETED] = True
            Missions['Mission 3'][MISSION_REWARD] = True
    if 'odd letter' in myPlayer.inventory:
        if Missions['Mission 4'][MISSION_REWARD] is False:
            Missions['Mission 4'][COMPLETED] = True
            Missions['Mission 4'][MISSION_REWARD] = True
    if myPlayer.level >= 8:
        areamap['Forest2'][WEST] = False
        if Missions['Mission 5'][MISSION_REWARD] is False:
            Missions['Mission 5'][COMPLETED] = True
            Missions['Mission 5'][MISSION_REWARD] = True
    if myPlayer.location =='dungeon_Main1':
        if Missions['Mission 6'][MISSION_REWARD] is False:
            Missions['Mission 6'][COMPLETED] = True
            Missions['Mission 6'][MISSION_REWARD] = True


############################
#Companion level up#
###########################
def level_gain_companion():
    if len(myPlayer.equipped_Pet) == 1:

        Pet_eq = ''.join(myPlayer.equipped_Pet)
        new_level = math.floor(math.sqrt(Pet[Pet_eq][EXP] / 150) + 1)
        if Pet[Pet_eq][PLEVEL] < new_level:
            levels_gained = new_level - Pet[Pet_eq][PLEVEL]
            old_level = Pet[Pet_eq][PLEVEL]
            Pet[Pet_eq][PLEVEL] = new_level
            if Pet_eq == 'Gyo':
                Pet[Pet_eq][HP_add] +=0.25
                for level_i in range(levels_gained):
                    current_level = old_level + level_i + 1

            if Pet_eq == 'Imoogi':
                Pet[Pet_eq][MP_add] += 0.25
                for level_i in range(levels_gained):
                    current_level = old_level + level_i + 1

            if Pet_eq == 'Balaur':
                Pet[Pet_eq][MP_attack_add] += 0.25
                for level_i in range(levels_gained):
                    current_level = old_level + level_i + 1

            if Pet_eq == 'Bolla':
                Pet[Pet_eq][ATTACK_add] += 0.25
                for level_i in range(levels_gained):
                    current_level = old_level + level_i + 1






#############################
#### levels the character up ####
#############################
def level_gain():
    new_level = math.floor(math.sqrt(myPlayer.xp / 150) + 1)
    if myPlayer.level < new_level:
        levels_gained = new_level - myPlayer.level
        old_level = myPlayer.level
        myPlayer.level = new_level
        for level_i in range(levels_gained):
            current_level = old_level + level_i + 1
            level_up_prompt(current_level)


#############################
#### add points when the player levels up ####
#############################
def level_up_prompt(self):
    os.system('cls')
    print("")
    print("┌───────────────────────────────────┐")
    print('│             Congrats!             │')
    print("│ " + str(myPlayer.name) + " Leveled up!      │")
    print("└───────────────────────────────────┘")
    my_points.Add(1)
    print('Player level: ' + str(myPlayer.level))
    print("Attribute points Total: " + str(my_points.balance))
    myPlayer.Inventory_size += 1
    input("Press ENTER to continue")
    attribute_engine()
    os.system('cls')


#############################
#### text speed changer ####
#############################
def print_slow(str):
    for letter in str:
        sys.stdout.write(letter)
        sys.stdout.flush()
        time.sleep(0.1)


def print_fast(str):
    for letter in str:
        sys.stdout.write(letter)
        sys.stdout.flush()
        time.sleep(0.01)


def print_medeum(str):
    for character in str:
        sys.stdout.write(character)
        sys.stdout.flush()
        time.sleep(0.05)


#############################
#### attributes bank     ####
#############################

class Attributes:
    def __init__(self):
        self.Strength = 0
        self.Dexterity = 0
        self.Constitution = 0
        self.Intelligence = 0
        self.Wisdom = 0
        self.Charisma = 0


Total_attribute_points = Attributes()


def Atrribute_distribution_con():
    myPlayer.max_hp += 1


def Atrribute_distribution_int():
    myPlayer.max_mp += 1


def Atrribute_distribution_str():
    myPlayer.attack += 1


def Atrribute_distribution_dex():
    myPlayer.Acrobatics += 1


def Atrribute_distribution_wis():
    myPlayer.Magic_attack += 1


def Atrribute_distribution_cha():
    myPlayer.Charisma += 1
    myPlayer.luck += 1


#############################
#### add remove points   ####
#############################

class LevelPoints:
    def __init__(self):
        self.balance = 0

    def Add(self, amount):
        self.balance += amount

    def Remove(self, amount):
        self.balance -= amount

    def can_spend(self, amount):
        return self.balance >= amount


my_points = LevelPoints()


def att_about():
    os.system('cls')
    print('Strength: Increases your PHYSICAL ATTACK and amount you can carry in your INVENTORY ')
    print('Constitution: Increases the players total HP ')
    print('Intelligence: Increases the players total MP ')
    print('Wisdom: Increases the players total MAGIC ATTACK ')
    print('Dexterity: Increases the players ACROBATICS which determines how much damage you do with ARCHERY ')
    print('Charisma: Persuade NPC characters to give higher rewards and increases LUCK which determines CRITDAMAGE ')
    input("Press ENTER to continue")
    os.system('cls')


#############################
#### Assign attributes   ####
#############################

def attribute_engine():

    os.system('cls')
    print_medeum('Please enter in your Attribute points below')
    print("┌───────────────────────────────────┐")
    print('│             Commands              │')
    print("│    Enter in the attribute name    │")
    print("│          quit|help|about          │")
    print("├───────────────────────────────────┤")
    print("│            Attributes             │")
    print("└───────────────────────────────────┘")
    print("┌───────────┐")
    prRed('Strength:' + str(Total_attribute_points.Strength))
    print("└───────────┘")
    print("┌───────────┐")
    prRed('Constitution:' + str(Total_attribute_points.Constitution))
    print("└───────────┘")
    print("┌───────────┐")
    prBlue('Intelligence:' + str(Total_attribute_points.Intelligence))
    print("└───────────┘")
    print("┌───────────┐")
    prBlue('Wisdom:' + str(Total_attribute_points.Wisdom))
    print("└───────────┘")
    print("┌───────────┐")
    prGreen('Dexterity:' + str(Total_attribute_points.Dexterity))
    print("└───────────┘")
    print("┌───────────┐")
    prGreen('Charisma:' + str(Total_attribute_points.Charisma))
    print("└───────────┘")
    print("┌───────────┐")
    prYellow("Total points:" + str(my_points.balance))
    print("└───────────┘")
    print("Where do you want to allocate your points?")
    talk = input("> ")
    if talk.lower() in within.Strength:
        if my_points.balance > 0:
            my_points.Remove(1)
            Total_attribute_points.Strength += 1
            Atrribute_distribution_str()

        else:
            print('not enough points\n type quit to exit\n')
            input("Press ENTER to continue")
    elif talk.lower() in within.Dexterity:
        if my_points.balance > 0:
            my_points.Remove(1)
            Total_attribute_points.Dexterity += 1
            Atrribute_distribution_dex()

        else:
            print('not enough points\n type quit to exit\n')
            input("Press ENTER to continue")
    elif talk.lower() in within.Constitution:
        if my_points.balance > 0:
            my_points.Remove(1)
            Total_attribute_points.Constitution += 1
            Atrribute_distribution_con()

        else:
            print('not enough points\n type quit to exit\n')
            input("Press ENTER to continue")
    elif talk.lower() in within.Intelligence:
        if my_points.balance > 0:
            my_points.Remove(1)
            Total_attribute_points.Intelligence += 1
            Atrribute_distribution_int()

        else:
            print('not enough points\n type quit to exit\n')
            input("Press ENTER to continue")
    elif talk.lower() in within.Wisdom:
        if my_points.balance > 0:
            my_points.Remove(1)
            Total_attribute_points.Wisdom += 1
            Atrribute_distribution_wis()

        else:
            print('not enough points\n type quit to exit\n')
            input("Press ENTER to continue")
    elif talk.lower() in within.Charisma:
        if my_points.balance > 0:
            my_points.Remove(1)
            Total_attribute_points.Charisma += 1
            Atrribute_distribution_cha()

        else:
            print('not enough points\n type quit to exit\n')
            input("Press ENTER to continue")
            os.system('cls')
    elif talk.lower() in within.help:
        help()
    elif talk.lower() == 'about':
        att_about()
    while talk.lower() not in within.quit:
        os.system('cls')
        print("┌───────────────────────────────────┐")
        print('│             Commands              │')
        print("│    Enter in the attribute name    │")
        print("│          quit|help|about          │")
        print("├───────────────────────────────────┤")
        print("│            Attributes             │")
        print("└───────────────────────────────────┘")
        print("┌───────────┐")
        prRed('Strength:' + str(Total_attribute_points.Strength))
        print("└───────────┘")
        print("┌───────────┐")
        prRed('Constitution:' + str(Total_attribute_points.Constitution))
        print("└───────────┘")
        print("┌───────────┐")
        prBlue('Intelligence:' + str(Total_attribute_points.Intelligence))
        print("└───────────┘")
        print("┌───────────┐")
        prBlue('Wisdom:' + str(Total_attribute_points.Wisdom))
        print("└───────────┘")
        print("┌───────────┐")
        prGreen('Dexterity:' + str(Total_attribute_points.Dexterity))
        print("└───────────┘")
        print("┌───────────┐")
        prGreen('Charisma:' + str(Total_attribute_points.Charisma))
        print("└───────────┘")
        print("┌───────────┐")
        prYellow("Total points:" + str(my_points.balance))
        print("└───────────┘")
        print("Where do you want to allocate your points?")
        talk = input("> ")
        if talk.lower() in within.Strength:
            if my_points.balance > 0:
                my_points.Remove(1)
                Total_attribute_points.Strength += 1
                Atrribute_distribution_str()

            else:
                print('not enough points\n type quit to exit\n')
                input("Press ENTER to continue")
        elif talk.lower() in within.Dexterity:
            if my_points.balance > 0:
                my_points.Remove(1)
                Total_attribute_points.Dexterity += 1
                Atrribute_distribution_dex()

            else:
                print('not enough points\n type quit to exit\n')
                input("Press ENTER to continue")
        elif talk.lower() in within.Constitution:
            if my_points.balance > 0:
                my_points.Remove(1)
                Total_attribute_points.Constitution += 1
                Atrribute_distribution_con()

            else:
                print('not enough points\n type quit to exit\n')
                input("Press ENTER to continue")
        elif talk.lower() in within.Intelligence:
            if my_points.balance > 0:
                my_points.Remove(1)
                Total_attribute_points.Intelligence += 1
                Atrribute_distribution_int()

            else:
                print('not enough points\n type quit to exit\n')
                input("Press ENTER to continue")
        elif talk.lower() in within.Wisdom:
            if my_points.balance > 0:
                my_points.Remove(1)
                Total_attribute_points.Wisdom += 1
                Atrribute_distribution_wis()

            else:
                print('not enough points\n type quit to exit\n')
                input("Press ENTER to continue")
        elif talk.lower() in within.Charisma:
            if my_points.balance > 0:
                my_points.Remove(1)
                Total_attribute_points.Charisma += 1
                Atrribute_distribution_cha()

            else:
                print('not enough points\n type quit to exit\n')
                input("Press ENTER to continue")
        elif talk.lower() in within.help:
            help()
        elif talk.lower() == 'about':
            att_about()


#############################
#### Text Colour Changer ####
#############################

def prPurple(skk):
    print("\033[95m {}\033[00m".format(skk))


def prOrange(skk):
    print("\033[33m {}\033[00m".format(skk))


def prYellow(skk):
    print("\033[93m {}\033[00m".format(skk))


def prRed(skk):
    print("\033[91m {}\033[00m".format(skk))


def prBlue(skk):
    print("\033[94m {}\033[00m".format(skk))


def prGreen(skk):
    print("\033[92m {}\033[00m".format(skk))


def unequip_gear_low_health():
    arm1 = ''.join(myPlayer.equipped_Armour)
    arm2 = ''.join(myPlayer.equipped_Greaves)
    arm3 = ''.join(myPlayer.equipped_Helmet)
    arm4 = ''.join(myPlayer.equipped_Gauntlet)
    arm5 = ''.join(myPlayer.equipped_Weapon)
    # Armour
    if len(myPlayer.equipped_Armour) is not 0:
        if Gear[arm1][HP] <= 0:
            myPlayer.equipped_Armour.remove(arm1)
            myPlayer.inventory.append(arm1)
    # greaves
    elif len(myPlayer.equipped_Greaves) is not 0:
        if Gear[arm2][HP] <= 0:
            myPlayer.equipped_Greaves.remove(arm2)
            myPlayer.inventory.append(arm2)
    # Helmet
    elif len(myPlayer.equipped_Helmet) is not 0:
        if Gear[arm3][HP] <= 0:
            myPlayer.equipped_Helmet.remove(arm3)
            myPlayer.inventory.append(arm3)
    # Gauntlet
    elif len(myPlayer.equipped_Gauntlet) is not 0:
        if Gear[arm4][HP] <= 0:
            myPlayer.equipped_Gauntlet.remove(arm4)
            myPlayer.inventory.append(arm4)
    # Weapons
    elif len(myPlayer.equipped_Weapon) is not 0:
        if Weapons[arm5][HP] <= 0:
            myPlayer.equipped_Weapon.remove(arm5)
            myPlayer.inventory.append(arm5)

#############################
#### Creats random weapons ####
#############################

def Random_weapon_generator():
    list = ['Gear', 'Ranged', 'Weapon', 'Spell']
    Random_weapon_type = random.choice(list)
    if Random_weapon_type == 'Weapon':  # determines if weapon/Ranged/spell

        weapon_name = "".join(random.choice(within.Weapon_name_masterlist))
        # WEAPONS
        if myPlayer.level >= 10:
            weapon_name = "".join(random.choice(within.Wuncommon_names))
            if weapon_name in within.Wuncommon_names:
                How_rare = 'Uncommon'
                Attack_number = random.randint(5, 7)
                Weapons[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Weapon',
                                        EQUIPABLE: True,
                                        CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                        ATTACK: Attack_number, HP: 100,ENHANCED_TF: False,}
                append_check(weapon_name)
                print('Loot found: ' + str(weapon_name))
        elif myPlayer.level >= 0:
            weapon_name = "".join(random.choice(within.WCommon_names))
            if weapon_name in within.WCommon_names:
                How_rare = 'Common'
                Attack_number = random.randint(3, 5)
                Weapons[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Weapon',
                                        EQUIPABLE: True,
                                        CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                        ATTACK: Attack_number, HP: 100,ENHANCED_TF: False,}
                append_check(weapon_name)
                print('Loot found: ' + str(weapon_name))
        elif myPlayer.level >= 30:
            weapon_name = "".join(random.choice(within.WRare_names))
            if weapon_name in within.WRare_names:
                How_rare = 'Rare'
                Attack_number = random.randint(5, 10)
                Weapons[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Weapon',
                                        EQUIPABLE: True,
                                        CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                        ATTACK: Attack_number, HP: 100,ENHANCED_TF: False,}
                append_check(weapon_name)
                print('Loot found: ' + str(weapon_name))
        elif myPlayer.level >= 50:
            weapon_name = "".join(random.choice(within.WUltraRare_names))
            if weapon_name in within.WUltraRare_names:
                How_rare = 'Ultra Rare'
                Attack_number = random.randint(10, 14)
                Weapons[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Weapon',
                                        EQUIPABLE: True,
                                        CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                        ATTACK: Attack_number, HP: 100,ENHANCED_TF: False,}
                append_check(weapon_name)
                print('Loot found: ' + str(weapon_name))
        elif myPlayer.level >= 70:
            weapon_name = "".join(random.choice(within.WLegendary_names))
            if weapon_name in within.WLegendary_names:
                How_rare = 'Legendary'
                Attack_number = random.randint(15, 20)
                Weapons[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Weapon',
                                        EQUIPABLE: True,
                                        CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                        ATTACK: Attack_number, HP: 100,ENHANCED_TF: False,}
                append_check(weapon_name)
                print('Loot found: ' + str(weapon_name))
    # Spells##########################
    elif Random_weapon_type == 'Spell':

        weapon_name = "".join(random.choice(within.Spell_name_masterlist))
        if myPlayer.level >= 10:
            weapon_name = "".join(random.choice(within.Suncommon_names))
            if weapon_name in within.Suncommon_names:
                How_rare = 'Uncommon'
                Attack_number = random.randint(5, 7)
                Spells[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Spell',
                                       EQUIPABLE: True,
                                       CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                       ATTACK: Attack_number}
                append_check(weapon_name)
                print('Loot found: ' + str(weapon_name))
        elif myPlayer.level >= 0:
            weapon_name = "".join(random.choice(within.SCommon_names))
            if weapon_name in within.SCommon_names:
                How_rare = 'Common'
                Attack_number = random.randint(3, 5)
                Spells[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Spell',
                                       EQUIPABLE: True,
                                       CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                       ATTACK: Attack_number}
                append_check(weapon_name)
                print('Loot found: ' + str(weapon_name))
        elif myPlayer.level >= 30:
            weapon_name = "".join(random.choice(within.SRare_names))
            if weapon_name in within.SRare_names:
                How_rare = 'Rare'
                Attack_number = random.randint(5, 10)
                Spells[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Spell',
                                       EQUIPABLE: True,
                                       CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                       ATTACK: Attack_number}
                append_check(weapon_name)
                print('Loot found: ' + str(weapon_name))
        elif myPlayer.level >= 50:
            weapon_name = "".join(random.choice(within.SUltraRare_names))
            if weapon_name in within.SUltraRare_names:
                How_rare = 'Ultra Rare'
                Attack_number = random.randint(10, 14)
                Spells[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Spell',
                                       EQUIPABLE: True,
                                       CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                       ATTACK: Attack_number}
                append_check(weapon_name)
                print('Loot found: ' + str(weapon_name))
        elif myPlayer.level >= 70:
            weapon_name = "".join(random.choice(within.SLegendary_names))
            if weapon_name in within.SLegendary_names:
                How_rare = 'Legendary'
                Attack_number = random.randint(15, 20)
                Spells[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Spell',
                                       EQUIPABLE: True,
                                       CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                       ATTACK: Attack_number}
                append_check(weapon_name)
                print('Loot found: ' + str(weapon_name))
    # Ranged weapons###############################################
    elif Random_weapon_type == 'Ranged':

        weapon_name = "".join(random.choice(within.Ranged_name_masterlist))
        if myPlayer.level >= 10:
            weapon_name = "".join(random.choice(within.Runcommon_names))
            if weapon_name in within.Guncommon_names_Armour:
                How_rare = 'Uncommon'
                Attack_number = random.randint(5, 7)
                Ranged[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Ranged',
                                       EQUIPABLE: True,
                                       CHEST: True, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                       ATTACK: Attack_number,ENHANCED_TF: False,}
                append_check(weapon_name)
                print('Loot found: ' + str(weapon_name))
        elif myPlayer.level >= 0:
            weapon_name = "".join(random.choice(within.RCommon_names))
            if weapon_name in within.RCommon_names:
                How_rare = 'Common'
                Attack_number = random.randint(3, 5)
                Ranged[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Ranged',
                                       EQUIPABLE: True,
                                       CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                       ATTACK: Attack_number,ENHANCED_TF: False,}
                append_check(weapon_name)
                print('Loot found: ' + str(weapon_name))
        elif myPlayer.level >= 30:
            weapon_name = "".join(random.choice(within.RRare_names))
            if weapon_name in within.RRare_names:
                How_rare = 'Rare'
                Attack_number = random.randint(5, 10)
                Ranged[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Ranged',
                                       EQUIPABLE: True,
                                       CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                       ATTACK: Attack_number,ENHANCED_TF: False,}
                append_check(weapon_name)
                print('Loot found: ' + str(weapon_name))
        elif myPlayer.level >= 50:
            weapon_name = "".join(random.choice(within.RUltraRare_names))
            if weapon_name in within.RUltraRare_names:
                How_rare = 'Ultra Rare'
                Attack_number = random.randint(10, 14)
                Ranged[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Ranged',
                                       EQUIPABLE: True,
                                       CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                       ATTACK: Attack_number,ENHANCED_TF: False,}
                append_check(weapon_name)
                print('Loot found: ' + str(weapon_name))
        elif myPlayer.level >= 70:
            weapon_name = "".join(random.choice(within.RLegendary_names))
            if weapon_name in within.RLegendary_names:
                How_rare = 'Legendary'
                Attack_number = random.randint(15, 20)
                Ranged[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Ranged',
                                       EQUIPABLE: True,
                                       CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                       ATTACK: Attack_number,ENHANCED_TF: False,}
                append_check(weapon_name)
                print('Loot found: ' + str(weapon_name))
    # Random gear #################################################################
    elif Random_weapon_type == 'Gear':
        if myPlayer.level >= 10:
            gear_name = "".join(random.choice(within.Gear_Uncommon_master_list))
            if gear_name in within.Guncommon_names_Armour:
                How_rare = 'Uncommon'
                armour_number = random.randint(4, 6)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Armour',
                                   EQUIPABLE: True,
                                   CHEST: True, GREAVES: False, GAUNTLET: False, HELMET: False, ARMOUR: armour_number,
                                   SHIELD: False, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))
            elif gear_name in within.Guncommon_names_Gauntlets:
                How_rare = 'Uncommon'
                armour_number = random.randint(4, 6)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Gauntlets',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: True, HELMET: False, ARMOUR: armour_number,
                                   SHIELD: False, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))
            elif gear_name in within.Guncommon_names_Greaves:
                How_rare = 'Uncommon'
                armour_number = random.randint(4, 6)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Greaves',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: True, GAUNTLET: False, HELMET: False, ARMOUR: armour_number,
                                   SHIELD: False, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))
            elif gear_name in within.Guncommon_names_Helmet:
                How_rare = 'Uncommon'
                armour_number = random.randint(4, 6)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Helmet',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: True, ARMOUR: armour_number,
                                   SHIELD: False, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))
            elif gear_name in within.Guncommon_names_Shield:
                How_rare = 'Uncommon'
                armour_number = random.randint(4, 6)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Shield',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, ARMOUR: armour_number,
                                   SHIELD: True, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))
        # Gear Common###################################################################
        # ARMOUR
        elif myPlayer.level >= 0:
            gear_name = "".join(random.choice(within.Gear_Common_master_list))
            if gear_name in within.Gcommon_names_Armour:
                How_rare = 'Common'
                armour_number = random.randint(1, 3)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Armour',
                                   EQUIPABLE: True,
                                   CHEST: True, GREAVES: False, GAUNTLET: False, HELMET: False, ARMOUR: armour_number,
                                   SHIELD: False, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))
            # Gauntlets
            elif gear_name in within.Gcommon_names_Gauntlets:
                How_rare = 'Common'
                armour_number = random.randint(1, 3)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Gauntlets',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: True, HELMET: False, ARMOUR: armour_number,
                                   SHIELD: False, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))
            # Greaves
            elif gear_name in within.Gcommon_names_Greaves:
                How_rare = 'Common'
                armour_number = random.randint(1, 3)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Greaves',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: True, GAUNTLET: False, HELMET: False, ARMOUR: armour_number,
                                   SHIELD: False, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))
            # Helmet
            elif gear_name in within.Gcommon_names_Helmet:
                How_rare = 'Common'
                armour_number = random.randint(1, 3)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Helmet',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: True, ARMOUR: armour_number,
                                   SHIELD: False, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))
            elif gear_name in within.Gcommon_names_Shield:
                How_rare = 'common'
                armour_number = random.randint(1, 3)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Shield',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, ARMOUR: armour_number,
                                   SHIELD: True, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))
        # Gear Rare########################################################################################################
        # ARMOUR
        elif myPlayer.level >= 30:
            gear_name = "".join(random.choice(within.Gear_Rare_master_list))
            if gear_name in within.Grare_names_Armour:
                How_rare = 'Rare'
                armour_number = random.randint(5, 8)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Armour',
                                   EQUIPABLE: True,
                                   CHEST: True, GREAVES: False, GAUNTLET: False, HELMET: False, ARMOUR: armour_number,
                                   SHIELD: False, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))
            # Gauntlets
            elif gear_name in within.Grare_names_Gauntlets:
                How_rare = 'Rare'
                armour_number = random.randint(5, 8)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Gauntlets',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: True, HELMET: False, ARMOUR: armour_number,
                                   SHIELD: False, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))
            # Greaves
            elif gear_name in within.Grare_names_Greaves:
                How_rare = 'Rare'
                armour_number = random.randint(5, 8)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Greaves',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: True, GAUNTLET: False, HELMET: False, ARMOUR: armour_number,
                                   SHIELD: False, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))
            # Helmet
            elif gear_name in within.Grare_names_Helmet:
                How_rare = 'Rare'
                armour_number = random.randint(5, 8)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Helmet',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: True, ARMOUR: armour_number,
                                   SHIELD: False, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))
            elif gear_name in within.Grare_names_Shield:
                How_rare = 'rare'
                armour_number = random.randint(5, 8)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Shield',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, ARMOUR: armour_number,
                                   SHIELD: True, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))
        # Gear Ultra Rare ###################################################################################################
        # ARMOUR
        elif myPlayer.level >= 50:
            gear_name = "".join(random.choice(within.Gear_UltraRare_master_list))
            if gear_name in within.GUltrarare_names_Armour:
                How_rare = 'Ultra Rare'
                armour_number = random.randint(9, 14)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Armour',
                                   EQUIPABLE: True,
                                   CHEST: True, GREAVES: False, GAUNTLET: False, HELMET: False, ARMOUR: armour_number,
                                   SHIELD: False, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))
            # Gauntlets
            elif gear_name in within.GUltrarare_names_Gauntlets:
                How_rare = 'Ultra Rare'
                armour_number = random.randint(9, 14)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Gauntlets',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: True, HELMET: False, ARMOUR: armour_number,
                                   SHIELD: False, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))
            # Greaves
            elif gear_name in within.GUltrarare_names_Greaves:
                How_rare = 'Ultra Rare'
                armour_number = random.randint(9, 14)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Greaves',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: True, GAUNTLET: False, HELMET: False, ARMOUR: armour_number,
                                   SHIELD: False, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))
            # Helmet
            elif gear_name in within.GUltrarare_names_Helmet:
                How_rare = 'Ultra Rare'
                armour_number = random.randint(9, 14)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Helmet',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: True, ARMOUR: armour_number,
                                   SHIELD: False, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))
            elif gear_name in within.Grare_names_Shield:
                How_rare = 'Ultra Rare'
                armour_number = random.randint(9, 14)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Shield',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, ARMOUR: armour_number,
                                   SHIELD: True, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))
        # Gear Legendary #############################################################################
        # ARMOUR
        elif myPlayer.level >= 70:
            gear_name = "".join(random.choice(within.Gear_Legendary_master_list))
            if gear_name in within.Glegendary_names_Armour:
                How_rare = 'Legendary'
                armour_number = random.randint(15, 20)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Armour',
                                   EQUIPABLE: True,
                                   CHEST: True, GREAVES: False, GAUNTLET: False, HELMET: False, ARMOUR: armour_number,
                                   SHIELD: False, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))
            # Gauntlets
            elif gear_name in within.Glegendary_names_Gauntlets:
                How_rare = 'Legendary'
                armour_number = random.randint(15, 20)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Gauntlets',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: True, HELMET: False, ARMOUR: armour_number,
                                   SHIELD: False, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))
            # Greaves
            elif gear_name in within.Glegendary_names_Greaves:
                How_rare = 'Legendary'
                armour_number = random.randint(15, 20)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Greaves',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: True, GAUNTLET: False, HELMET: False, ARMOUR: armour_number,
                                   SHIELD: False, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))
            # Helmet
            elif gear_name in within.Glegendary_names_Helmet:
                How_rare = 'Legendary'
                armour_number = random.randint(15, 20)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Helmet',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: True, ARMOUR: armour_number,
                                   SHIELD: False, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))
            elif gear_name in within.Glegendary_names_Shield:
                How_rare = 'Legendary'
                armour_number = random.randint(15, 20)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Shield',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, ARMOUR: armour_number,
                                   SHIELD: True, HP: 100}
                append_check(gear_name)
                print('Loot found: ' + str(gear_name))


###################################
#####shop random item generator####
###################################
def Random_Item_generator():
    list = ['Gear', 'Ranged', 'Weapon', 'Spell']
    Random_weapon_type = random.choice(list)
    if Random_weapon_type == 'Weapon':  # determines if weapon/Ranged/spell

        weapon_name = "".join(random.choice(within.Weapon_name_masterlist))
        # WEAPONS
        if myPlayer.level >= 10:
            weapon_name = "".join(random.choice(within.Wuncommon_names))
            if weapon_name in within.Wuncommon_names:
                How_rare = 'Uncommon'
                Attack_number = random.randint(5, 7)
                Weapons[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Weapon',
                                        EQUIPABLE: True,
                                        CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                        ATTACK: Attack_number}
                within.Wares_Weapons.append(weapon_name)
        elif myPlayer.level >= 0:
            weapon_name = "".join(random.choice(within.WCommon_names))
            if weapon_name in within.WCommon_names:
                How_rare = 'Common'
                Attack_number = random.randint(3, 5)
                Weapons[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Weapon',
                                        EQUIPABLE: True,
                                        CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                        ATTACK: Attack_number}
                within.Wares_Weapons.append(weapon_name)
        elif myPlayer.level >= 30:
            weapon_name = "".join(random.choice(within.WRare_names))
            if weapon_name in within.WRare_names:
                How_rare = 'Rare'
                Attack_number = random.randint(5, 10)
                Weapons[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Weapon',
                                        EQUIPABLE: True,
                                        CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                        ATTACK: Attack_number}
                within.Wares_Weapons.append(weapon_name)
        elif myPlayer.level >= 50:
            weapon_name = "".join(random.choice(within.WUltraRare_names))
            if weapon_name in within.WUltraRare_names:
                How_rare = 'Ultra Rare'
                Attack_number = random.randint(10, 14)
                Weapons[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Weapon',
                                        EQUIPABLE: True,
                                        CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                        ATTACK: Attack_number}
                within.Wares_Weapons.append(weapon_name)
        elif myPlayer.level >= 70:
            weapon_name = "".join(random.choice(within.WLegendary_names))
            if weapon_name in within.WLegendary_names:
                How_rare = 'Legendary'
                Attack_number = random.randint(15, 20)
                Weapons[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Weapon',
                                        EQUIPABLE: True,
                                        CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                        ATTACK: Attack_number}
                within.Wares_Weapons.append(weapon_name)
    # Spells##########################
    elif Random_weapon_type == 'Spell':

        weapon_name = "".join(random.choice(within.Spell_name_masterlist))
        if myPlayer.level >= 10:
            weapon_name = "".join(random.choice(within.Suncommon_names))
            if weapon_name in within.Suncommon_names:
                How_rare = 'Uncommon'
                Attack_number = random.randint(5, 7)
                Spells[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Spell',
                                       EQUIPABLE: True,
                                       CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                       ATTACK: Attack_number}
                within.Wares_Spells.append(weapon_name)
        elif myPlayer.level >= 0:

            weapon_name = "".join(random.choice(within.SCommon_names))
            if weapon_name in within.SCommon_names:
                How_rare = 'Common'
                Attack_number = random.randint(3, 5)
                Spells[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Spell',
                                       EQUIPABLE: True,
                                       CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                       ATTACK: Attack_number}
                within.Wares_Spells.append(weapon_name)
        elif myPlayer.level >= 30:
            weapon_name = "".join(random.choice(within.SRare_names))
            if weapon_name in within.SRare_names:
                How_rare = 'Rare'
                Attack_number = random.randint(5, 10)
                Spells[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Spell',
                                       EQUIPABLE: True,
                                       CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                       ATTACK: Attack_number}
                within.Wares_Spells.append(weapon_name)
        elif myPlayer.level >= 50:
            weapon_name = "".join(random.choice(within.SUltraRare_names))
            if weapon_name in within.SUltraRare_names:
                How_rare = 'Ultra Rare'
                Attack_number = random.randint(10, 14)
                Spells[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Spell',
                                       EQUIPABLE: True,
                                       CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                       ATTACK: Attack_number}
                within.Wares_Spells.append(weapon_name)
        elif myPlayer.level >= 70:
            weapon_name = "".join(random.choice(within.SLegendary_names))
            if weapon_name in within.SLegendary_names:
                How_rare = 'Legendary'
                Attack_number = random.randint(15, 20)
                Spells[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Spell',
                                       EQUIPABLE: True,
                                       CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                       ATTACK: Attack_number}
                within.Wares_Spells.append(weapon_name)
    # Ranged weapons###############################################
    elif Random_weapon_type == 'Ranged':

        weapon_name = "".join(random.choice(within.Ranged_name_masterlist))
        if myPlayer.level >= 10:
            weapon_name = "".join(random.choice(within.Runcommon_names))
            if weapon_name in within.Guncommon_names_Armour:
                How_rare = 'Uncommon'
                Attack_number = random.randint(5, 7)
                Ranged[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Ranged',
                                       EQUIPABLE: True,
                                       CHEST: True, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                       ATTACK: Attack_number}
                within.Wares_Weapons.append(weapon_name)
        elif myPlayer.level >= 0:
            weapon_name = "".join(random.choice(within.RCommon_names))
            if weapon_name in within.RCommon_names:
                How_rare = 'Common'
                Attack_number = random.randint(3, 5)
                Ranged[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Ranged',
                                       EQUIPABLE: True,
                                       CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                       ATTACK: Attack_number}
                within.Wares_Weapons.append(weapon_name)
        elif myPlayer.level >= 30:
            weapon_name = "".join(random.choice(within.RRare_names))
            if weapon_name in within.RRare_names:
                How_rare = 'Rare'
                Attack_number = random.randint(5, 10)
                Ranged[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Ranged',
                                       EQUIPABLE: True,
                                       CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                       ATTACK: Attack_number}
                within.Wares_Weapons.append(weapon_name)
        elif myPlayer.level >= 50:
            weapon_name = "".join(random.choice(within.RUltraRare_names))
            if weapon_name in within.RUltraRare_names:
                How_rare = 'Ultra Rare'
                Attack_number = random.randint(10, 14)
                Ranged[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Ranged',
                                       EQUIPABLE: True,
                                       CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                       ATTACK: Attack_number}
                within.Wares_Weapons.append(weapon_name)
        elif myPlayer.level >= 70:
            weapon_name = "".join(random.choice(within.RLegendary_names))
            if weapon_name in within.RLegendary_names:
                How_rare = 'Legendary'
                Attack_number = random.randint(15, 20)
                Ranged[weapon_name] = {NAME: weapon_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Ranged',
                                       EQUIPABLE: True,
                                       CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: False, WEAPON: True,
                                       ATTACK: Attack_number}
                within.Wares_Weapons.append(weapon_name)
    # Random gear #################################################################
    elif Random_weapon_type == 'Gear':

        gear_name = "".join(random.choice(within.Gear_name_masterlist))
        if myPlayer.level >= 10:
            gear_name = "".join(random.choice(within.Gear_Uncommon_master_list))
            if gear_name in within.Guncommon_names_Armour:
                How_rare = 'Uncommon'
                armour_number = random.randint(4, 6)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Armour',
                                   EQUIPABLE: True,
                                   CHEST: True, GREAVES: False, GAUNTLET: False, HELMET: False, ARMOUR: armour_number}
                within.Wares_Gear.append(gear_name)
            elif gear_name in within.Guncommon_names_Gauntlets:
                How_rare = 'Uncommon'
                armour_number = random.randint(4, 6)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Gauntlets',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: True, HELMET: False, ARMOUR: armour_number}
                within.Wares_Gear.append(gear_name)
            elif gear_name in within.Guncommon_names_Greaves:
                How_rare = 'Uncommon'
                armour_number = random.randint(4, 6)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Greaves',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: True, GAUNTLET: False, HELMET: False, ARMOUR: armour_number}
                within.Wares_Gear.append(gear_name)
            elif gear_name in within.Guncommon_names_Helmet:
                How_rare = 'Uncommon'
                armour_number = random.randint(4, 6)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Helmet',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: True, ARMOUR: armour_number}
                within.Wares_Gear.append(gear_name)
        # Gear Common###################################################################
        # ARMOUR
        elif myPlayer.level >= 0:
            gear_name = "".join(random.choice(within.Gear_Common_master_list))
            if gear_name in within.Gcommon_names_Armour:
                How_rare = 'Common'
                armour_number = random.randint(1, 3)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Armour',
                                   EQUIPABLE: True,
                                   CHEST: True, GREAVES: False, GAUNTLET: False, HELMET: False, ARMOUR: armour_number}
                within.Wares_Gear.append(gear_name)
            # Gauntlets
            elif gear_name in within.Gcommon_names_Gauntlets:
                How_rare = 'Common'
                armour_number = random.randint(1, 3)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Gauntlets',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: True, HELMET: False, ARMOUR: armour_number}
                within.Wares_Gear.append(gear_name)
            # Greaves
            elif gear_name in within.Gcommon_names_Greaves:
                How_rare = 'Common'
                armour_number = random.randint(1, 3)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Greaves',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: True, GAUNTLET: False, HELMET: False, ARMOUR: armour_number}
                within.Wares_Gear.append(gear_name)
            # Helmet
            elif gear_name in within.Gcommon_names_Helmet:
                How_rare = 'Common'
                armour_number = random.randint(1, 3)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Helmet',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: True, ARMOUR: armour_number}
                within.Wares_Gear.append(gear_name)
        # Gear Rare########################################################################################################
        # ARMOUR
        elif myPlayer.level >= 30:
            gear_name = "".join(random.choice(within.Gear_Rare_master_list))
            if gear_name in within.Grare_names_Armour:
                How_rare = 'Rare'
                armour_number = random.randint(5, 8)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Armour',
                                   EQUIPABLE: True,
                                   CHEST: True, GREAVES: False, GAUNTLET: False, HELMET: False, ARMOUR: armour_number}
                within.Wares_Gear.append(gear_name)
            # Gauntlets
            elif gear_name in within.Grare_names_Gauntlets:
                How_rare = 'Rare'
                armour_number = random.randint(5, 8)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Gauntlets',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: True, HELMET: False, ARMOUR: armour_number}
                within.Wares_Gear.append(gear_name)
            # Greaves
            elif gear_name in within.Grare_names_Greaves:
                How_rare = 'Rare'
                armour_number = random.randint(5, 8)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Greaves',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: True, GAUNTLET: False, HELMET: False, ARMOUR: armour_number}
                within.Wares_Gear.append(gear_name)
            # Helmet
            elif gear_name in within.Grare_names_Helmet:
                How_rare = 'Rare'
                armour_number = random.randint(5, 8)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Helmet',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: True, ARMOUR: armour_number}
                within.Wares_Gear.append(gear_name)
        # Gear Ultra Rare ###################################################################################################
        # ARMOUR
        elif myPlayer.level >= 50:
            gear_name = "".join(random.choice(within.Gear_UltraRare_master_list))
            if gear_name in within.GUltrarare_names_Armour:
                How_rare = 'Ultra Rare'
                armour_number = random.randint(9, 14)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Armour',
                                   EQUIPABLE: True,
                                   CHEST: True, GREAVES: False, GAUNTLET: False, HELMET: False, ARMOUR: armour_number}
                within.Wares_Gear.append(gear_name)
            # Gauntlets
            elif gear_name in within.GUltrarare_names_Gauntlets:
                How_rare = 'Ultra Rare'
                armour_number = random.randint(9, 14)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Gauntlets',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: True, HELMET: False, ARMOUR: armour_number}
                within.Wares_Gear.append(gear_name)
            # Greaves
            elif gear_name in within.GUltrarare_names_Greaves:
                How_rare = 'Ultra Rare'
                armour_number = random.randint(9, 14)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Greaves',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: True, GAUNTLET: False, HELMET: False, ARMOUR: armour_number}
                within.Wares_Gear.append(gear_name)
            # Helmet
            elif gear_name in within.GUltrarare_names_Helmet:
                How_rare = 'Ultra Rare'
                armour_number = random.randint(9, 14)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Helmet',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: True, ARMOUR: armour_number}
                within.Wares_Gear.append(gear_name)
        # Gear Legendary #############################################################################
        # ARMOUR
        elif myPlayer.level >= 70:
            gear_name = "".join(random.choice(within.Gear_Legendary_master_list))
            if gear_name in within.Glegendary_names_Armour:
                How_rare = 'Legendary'
                armour_number = random.randint(15, 20)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Armour',
                                   EQUIPABLE: True,
                                   CHEST: True, GREAVES: False, GAUNTLET: False, HELMET: False, ARMOUR: armour_number}
                within.Wares_Gear.append(gear_name)
            # Gauntlets
            elif gear_name in within.Glegendary_names_Gauntlets:
                How_rare = 'Legendary'
                armour_number = random.randint(15, 20)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Gauntlets',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: True, HELMET: False, ARMOUR: armour_number}
                within.Wares_Gear.append(gear_name)
            # Greaves
            elif gear_name in within.Glegendary_names_Greaves:
                How_rare = 'Legendary'
                armour_number = random.randint(15, 20)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Greaves',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: True, GAUNTLET: False, HELMET: False, ARMOUR: armour_number}
                within.Wares_Gear.append(gear_name)
            # Helmet
            elif gear_name in within.Glegendary_names_Helmet:
                How_rare = 'Legendary'
                armour_number = random.randint(15, 20)
                Gear[gear_name] = {NAME: gear_name, RARITY: How_rare, INFO: 'Unknown', TYPE: 'Helmet',
                                   EQUIPABLE: True,
                                   CHEST: False, GREAVES: False, GAUNTLET: False, HELMET: True, ARMOUR: armour_number}
                within.Wares_Gear.append(gear_name)


#############################
#### Mana calculator     ####
#############################
def Mana_pool():
    heart_hp1 = fractions.Fraction(1, 10) * myPlayer.max_mp
    heart_hp2 = fractions.Fraction(2, 10) * myPlayer.max_mp
    heart_hp3 = fractions.Fraction(3, 10) * myPlayer.max_mp
    heart_hp4 = fractions.Fraction(4, 10) * myPlayer.max_mp
    heart_hp5 = fractions.Fraction(5, 10) * myPlayer.max_mp
    heart_hp6 = fractions.Fraction(6, 10) * myPlayer.max_mp
    heart_hp7 = fractions.Fraction(7, 10) * myPlayer.max_mp
    heart_hp8 = fractions.Fraction(8, 10) * myPlayer.max_mp
    heart_hp9 = fractions.Fraction(9, 10) * myPlayer.max_mp
    heart_hp10 = fractions.Fraction(10, 10) * myPlayer.max_mp
    if myPlayer.mp <= heart_hp1:

        prBlue("""┌──────────────────────────┐
 │Mana: -                   │
 └──────────────────────────┘""")

    elif myPlayer.mp <= heart_hp2:

        prBlue("""┌──────────────────────────┐
 │Mana: ♥                  │
 └──────────────────────────┘""")

    elif myPlayer.mp <= heart_hp3:

        prBlue("""┌──────────────────────────┐
 │Mana: ♥-                  │
 └──────────────────────────┘""")

    elif myPlayer.mp <= heart_hp4:

        prBlue("""┌──────────────────────────┐
 │Mana: ♥♥                 │
 └──────────────────────────┘""")

    elif myPlayer.mp <= heart_hp5:

        prBlue("""┌──────────────────────────┐
 │Mana: ♥♥-                │
 └──────────────────────────┘""")

    elif myPlayer.mp <= heart_hp6:

        prBlue("""┌──────────────────────────┐
 │Mana: ♥♥♥                │
 └──────────────────────────┘""")

    elif myPlayer.mp <= heart_hp7:

        prBlue("""┌──────────────────────────┐
 │Mana: ♥♥♥-               │
 └──────────────────────────┘""")

    elif myPlayer.mp <= heart_hp8:

        prBlue("""┌──────────────────────────┐
 │Mana: ♥♥♥♥               │
 └──────────────────────────┘""")

    elif myPlayer.mp <= heart_hp9:

        prBlue("""┌──────────────────────────┐
 │Mana: ♥♥♥♥-              │
 └──────────────────────────┘""")

    elif myPlayer.mp <= heart_hp10:

        prBlue("""┌──────────────────────────┐
 │Mana: ♥♥♥♥♥               │
 └──────────────────────────┘""")
    else:
        prBlue("""┌──────────────────────────┐
│Mana: None                │
└──────────────────────────┘""")


#############################
####Health Calculator    ####
#############################
def Health():
    total = 100
    no_hp = 0
    heart_hp1 = fractions.Fraction(1, 10) * myPlayer.max_hp
    heart_hp2 = fractions.Fraction(2, 10) * myPlayer.max_hp
    heart_hp3 = fractions.Fraction(3, 10) * myPlayer.max_hp
    heart_hp4 = fractions.Fraction(4, 10) * myPlayer.max_hp
    heart_hp5 = fractions.Fraction(5, 10) * myPlayer.max_hp
    heart_hp6 = fractions.Fraction(6, 10) * myPlayer.max_hp
    heart_hp7 = fractions.Fraction(7, 10) * myPlayer.max_hp
    heart_hp8 = fractions.Fraction(8, 10) * myPlayer.max_hp
    heart_hp9 = fractions.Fraction(9, 10) * myPlayer.max_hp
    heart_hp10 = fractions.Fraction(10, 10) * myPlayer.max_hp
    if myPlayer.hp <= heart_hp1:

        prPurple("""┌──────────────────────────┐
 │ Health: -                │
 └──────────────────────────┘""")

    elif myPlayer.hp <= heart_hp2:

        prPurple("""┌─────────────────────────┐
 │ Health: ♥               │
 └─────────────────────────┘""")

    elif myPlayer.hp <= heart_hp3:

        prPurple("""┌──────────────────────────┐
 │ Health: ♥-               │
 └──────────────────────────┘""")

    elif myPlayer.hp <= heart_hp4:

        prYellow("""┌──────────────────────────┐
 │ Health: ♥♥               │
 └──────────────────────────┘""")

    elif myPlayer.hp <= heart_hp5:

        prYellow("""┌──────────────────────────┐
 │ Health: ♥♥-              │
 └──────────────────────────┘""")

    elif myPlayer.hp <= heart_hp6:

        prOrange("""┌──────────────────────────┐
 │ Health: ♥♥♥              │
 └──────────────────────────┘""")

    elif myPlayer.hp <= heart_hp7:

        prOrange("""┌──────────────────────────┐
 │ Health: ♥♥♥-             │
 └──────────────────────────┘""")

    elif myPlayer.hp <= heart_hp8:

        prRed("""┌──────────────────────────┐
 │ Health: ♥♥♥♥             │
 └──────────────────────────┘""")

    elif myPlayer.hp <= heart_hp9:

        prRed("""┌──────────────────────────┐
 │ Health: ♥♥♥♥-            │
 └──────────────────────────┘""")

    elif myPlayer.hp <= heart_hp10:

        prRed("""┌──────────────────────────┐
 │ Health: ♥♥♥♥♥            │
 └──────────────────────────┘""")


class repel:
    def __init__(self):
        self.repel = True


Charm = repel()


#############################
#### Randomly encounter Mobs ####
#############################
def Boss_encounter():
    if areamap[myPlayer.location][BOSS_TF] is True:
        print_medeum('You are about to encounter the Boss, do you wish to continue?\n')
        print('Yes or no\n')
        talk = input('> ')
        if talk.lower() in within.accept:
            random_level_generator()
            Boss_combat()


def Random_encounter():
    # mobspawn = random.randint(1, 100)
    if Charm.repel == True:
        # if mobspawn > 70:
        random_level_generator()
        combat()


class PetOwnerShip:
    def __init__(self):
        self.Gyo_owned = False
        self.Bolla_owned = False
        self.Balaur_owned = False
        self.Imoogi_owned = False


pet_owned = PetOwnerShip()


def Random_pet_encounter():
    PetSpawn = random.randint(1, 100)
    if myPlayer.location == 'Forest1':
        if PetSpawn > 60:
            if weather_behavior.day is True:
                if weather_behavior.Sunny:
                    if pet_owned.Gyo_owned is False:
                        os.system('cls')
                        print_medeum("???\n")
                        print_medeum("...You found something nearby!\n")
                        print("*The companion Gyo is following you now*.")
                        input("Press ENTER to continue")
                        myPlayer.inventory.append('Gyo')
                        pet_owned.Gyo_owned = True
    #########################################################
    elif myPlayer.location == 'Garden12':
        if PetSpawn > 60:
            if weather_behavior.day is True:
                if weather_behavior.Rain is True:
                    if pet_owned.Balaur_owned is False:
                        os.system('cls')
                        print_medeum("???\n")
                        print_medeum("...You found something nearby!\n")
                        print("*The companion Balaur is following you now*.")
                        input("Press ENTER to continue")
                        myPlayer.inventory.append('Balaur')
                        pet_owned.Balaur_owned = True
    #########################################################
    elif myPlayer.location == 'Wild_Forest_BottomCenter30':
        if PetSpawn > 60:
            if weather_behavior.day is True:
                if weather_behavior.Storm is True:
                    if pet_owned.Bolla_owned is False:
                        os.system('cls')
                        print_medeum("???\n")
                        print_medeum("...You found something nearby!\n")
                        print("*The companion Bolla is following you now*.")
                        input("Press ENTER to continue")
                        myPlayer.inventory.append('Bolla')
                        pet_owned.Bolla_owned = True
    #########################################################
    elif myPlayer.location == 'CityOfAdenLower6':
        if PetSpawn > 60:
            if weather_behavior.night is True:
                if weather_behavior.Clear is True:
                    if pet_owned.Imoogi_owned is False:
                        os.system('cls')
                        print_medeum("???\n")
                        print_medeum("...You found something nearby!\n")
                        print("*The companion Imoogi is following you now*.")
                        input("Press ENTER to continue")
                        myPlayer.inventory.append('Imoogi')
                        pet_owned.Imoogi_owned = True
        else:
            os.system('cls')

    else:
        os.system('cls')


#############################
#### Displays Inventory ####
#############################
def Show_Inventory():
    os.system('cls')
    print("┌──────────────────────────────────────────────────────────┐")
    print(' │                       Commands                           │')
    print(' │                      Quit|Help                           │')
    print(" │            Type in the weapon name below                 │")
    print(" │                                                          │")
    print(' └──────────────────────────────────────────────────────────┘')
    prGreen("Inventory: \n" + ' <><> \n'.join(myPlayer.inventory) + '\n')
    print('Steel arrows: ' + str(myPlayer.quiver.count('steel arrow')))
    print('Iron arrows: ' + str(myPlayer.quiver.count('iron arrow')))
    print("which item would you like to inspect?")
    ask = input("> ")
    if ask in myPlayer.inventory:
        if ask in Gear:
            print("┌──────────────────────────────────────────┐")
            print("│ Name: " + Gear[ask][NAME])
            print("│ Description: " + str(Gear[ask][INFO]))
            print("│ Type: " + str(Gear[ask][TYPE]))
            print("│ Armour: " + str(Gear[ask][ARMOUR]))
            print("│ Health: " + str(Gear[ask][HP]))
            print('└──────────────────────────────────────────┘')
            input("Press ENTER to continue")
        elif ask in Weapons:
            print("┌──────────────────────────────────────────┐")
            print("│ Name: " + str(Weapons[ask][NAME]))
            print("│ Description: " + str(Weapons[ask][INFO]))
            print("│ Type: " + str(Weapons[ask][TYPE]))
            print("│ Attack: " + str(Weapons[ask][ATTACK]))
            print('└──────────────────────────────────────────┘')
            input("Press ENTER to continue")
        elif ask in Spells:
            print("┌──────────────────────────────────────────┐")
            print("│ Name: " + str(Spells[ask][NAME]))
            print("│ Description: " + str(Spells[ask][INFO]))
            print("│ Type: " + str(Spells[ask][TYPE]))
            print("│ Attack: " + str(Spells[ask][ATTACK]))
            print('└──────────────────────────────────────────┘')
            input("Press ENTER to continue")
        elif ask in Ranged:
            print("┌──────────────────────────────────────────┐")
            print("│ Name: " + str(Ranged[ask][NAME]))
            print("│ Description: " + str(Ranged[ask][INFO]))
            print("│ Type: " + str(Ranged[ask][TYPE]))
            print("│ Attack: " + str(Ranged[ask][ATTACK]))
            print('└──────────────────────────────────────────┘')
            input("Press ENTER to continue")
        elif ask in Pet:
            print("┌──────────────────────────────────────────┐")
            print("│ Name: " + str(Pet[ask][PNAME]))
            print("│ Description: " + str(Pet[ask][PINFO]))
            print("│ Type: " + str(Pet[ask][PTYPE]))
            print("│ Effect: " + str(Pet[ask][EFFECT]))
            print("│ Effect HP: " + str(Pet[ask][HP_add]))
            print("│ Effect MP: " + str(Pet[ask][MP_add]))
            print("│ Effect MP ATK: " + str(Pet[ask][MP_attack_add]))
            print("│ Effect ATK: " + str(Pet[ask][ATTACK_add]))
            print("│ Level: " + str(Pet[ask][PLEVEL]))
            print("│ XP: " + str(Pet[ask][EXP]))
            print('└──────────────────────────────────────────┘')
            input("Press ENTER to continue")
        elif ask in Potion:
            print("┌──────────────────────────────────────────┐")
            print("│ Name: " + str(Potion[ask][NAME]))
            print("│ Description: " + str(Potion[ask][INFO]))
            print("│ Type: " + str(Potion[ask][TYPE]))
            print("│ Effect: " + str(Potion[ask][EFFECT]))
            print('└──────────────────────────────────────────┘')
            input("Press ENTER to continue")
        elif ask in Item:
            print("┌──────────────────────────────────────────┐")
            print("│ Name: " + str(Item[ask][NAME]))
            print("│ Description: " + str(Item[ask][INFO]))
            print("│ Type: " + str(Item[ask][TYPE]))
            print('└──────────────────────────────────────────┘')
            input("Press ENTER to continue")
        elif ask in Foods:
            print("┌──────────────────────────────────────────┐")
            print("│ Name: " + str(Foods[ask][FNAME]))
            print("│ Description: " + str(Foods[ask][FINFO]))
            print("│ Heal: " + str(Foods[ask][FHEAL]))
            print("│ Mana: " + str(Foods[ask][FMANA]))
            print('└──────────────────────────────────────────┘')
            input("Press ENTER to continue")
        elif ask in Ingrediants:
            print("┌──────────────────────────────────────────┐")
            print("│ Name: " + str(Ingrediants[ask][FNAME]))
            print("│ Description: " + str(Ingrediants[ask][FINFO]))
            print("│ Heal: " + str(Ingrediants[ask][FHEAL]))
            print("│ Mana: " + str(Ingrediants[ask][FMANA]))
            print('└──────────────────────────────────────────┘')
            input("Press ENTER to continue")
        elif ask in Alchemy_Ingrediants:
            print("┌──────────────────────────────────────────┐")
            print("│ Name: " + str(Alchemy_Ingrediants[ask][ANAME]))
            print("│ Description: " + str(Alchemy_Ingrediants[ask][AINFO]))
            print("│ Heal: " + str(Alchemy_Ingrediants[ask][AHEAL]))
            print("│ Mana: " + str(Alchemy_Ingrediants[ask][AMANA]))
            print('└──────────────────────────────────────────┘')
            input("Press ENTER to continue")
        elif ask in Crafting:
            print("┌──────────────────────────────────────────┐")
            print("│ Name: " + str(Crafting[ask][CRAFT_NAME]))
            print("│ Description: " + str(Crafting[ask][CRAFT_INFO]))
            print("│ Type: " + str(Crafting[ask][CRAFT_TYPE]))
            print('└──────────────────────────────────────────┘')
            input("Press ENTER to continue")
        elif ask.lower() in within.help:
            help()
        else:
            print("Item is not a GEAR, RANGED, WEAPON, COMPANION or SPELL")



    elif ask.lower() in myPlayer.quiver:
        if ask in Weapons:
            print("┌──────────────────────────────────────────┐")
            print("│ Name: " + str(Weapons[ask][NAME]))
            print("│ Description: " + str(Weapons[ask][INFO]))
            print("│ Type: " + str(Weapons[ask][TYPE]))
            print("│ Attack: " + str(Weapons[ask][ATTACK]))
            print('└──────────────────────────────────────────┘')
            input("Press ENTER to continue")

    else:
        print("Sorry, you don't have that item in your inventory")
        os.system('cls')

    while ask.lower() not in within.quit:
        os.system('cls')
        print("┌──────────────────────────────────────────────────────────┐")
        print(' │                       Commands                           │')
        print(' │                      Quit|Help                           │')
        print(" │            Type in the weapon name below                 │")
        print(" │                                                          │")
        print(' └──────────────────────────────────────────────────────────┘')
        prGreen("Inventory: \n" + ' <><> \n'.join(myPlayer.inventory) + '\n')
        print('Steel arrows: ' + str(myPlayer.quiver.count('steel arrow')))
        print('Iron arrows: ' + str(myPlayer.quiver.count('iron arrow')))
        print("which item would you like to inspect?")
        ask = input("> ")
        if ask in myPlayer.inventory:
            if ask in Gear:
                print("┌──────────────────────────────────────────┐")
                print("│ Name: " + Gear[ask][NAME])
                print("│ Description: " + str(Gear[ask][INFO]))
                print("│ Type: " + str(Gear[ask][TYPE]))
                print("│ Armour: " + str(Gear[ask][ARMOUR]))
                print('└──────────────────────────────────────────┘')
                input("Press ENTER to continue")
            elif ask in Weapons:
                print("┌──────────────────────────────────────────┐")
                print("│ Name: " + str(Weapons[ask][NAME]))
                print("│ Description: " + str(Weapons[ask][INFO]))
                print("│ Type: " + str(Weapons[ask][TYPE]))
                print("│ Attack: " + str(Weapons[ask][ATTACK]))
                print('└──────────────────────────────────────────┘')
                input("Press ENTER to continue")
            elif ask in Spells:
                print("┌──────────────────────────────────────────┐")
                print("│ Name: " + str(Spells[ask][NAME]))
                print("│ Description: " + str(Spells[ask][INFO]))
                print("│ Type: " + str(Spells[ask][TYPE]))
                print("│ Attack: " + str(Spells[ask][ATTACK]))
                print('└──────────────────────────────────────────┘')
                input("Press ENTER to continue")
            elif ask in Ranged:
                print("┌──────────────────────────────────────────┐")
                print("│ Name: " + str(Ranged[ask][NAME]))
                print("│ Description: " + str(Ranged[ask][INFO]))
                print("│ Type: " + str(Ranged[ask][TYPE]))
                print("│ Attack: " + str(Ranged[ask][ATTACK]))
                print('└──────────────────────────────────────────┘')
                input("Press ENTER to continue")
            elif ask in Pet:
                print("┌──────────────────────────────────────────┐")
                print("│ Name: " + str(Pet[ask][PNAME]))
                print("│ Description: " + str(Pet[ask][PINFO]))
                print("│ Type: " + str(Pet[ask][PTYPE]))
                print("│ Effect: " + str(Pet[ask][EFFECT]))
                print("│ Effect HP: " + str(Pet[ask][HP_add]))
                print("│ Effect MP: " + str(Pet[ask][MP_add]))
                print("│ Effect MP ATK: " + str(Pet[ask][MP_attack_add]))
                print("│ Effect ATK: " + str(Pet[ask][ATTACK_add]))
                print("│ Level: " + str(Pet[ask][PLEVEL]))
                print("│ XP: " + str(Pet[ask][EXP]))
                print('└──────────────────────────────────────────┘')
                input("Press ENTER to continue")
            elif ask in Potion:
                print("┌──────────────────────────────────────────┐")
                print("│ Name: " + str(Potion[ask][NAME]))
                print("│ Description: " + str(Potion[ask][INFO]))
                print("│ Type: " + str(Potion[ask][TYPE]))
                print("│ Effect: " + str(Potion[ask][EFFECT]))
                print('└──────────────────────────────────────────┘')
                input("Press ENTER to continue")
            elif ask in Item:
                print("┌──────────────────────────────────────────┐")
                print("│ Name: " + str(Item[ask][NAME]))
                print("│ Description: " + str(Item[ask][INFO]))
                print("│ Type: " + str(Item[ask][TYPE]))
                print('└──────────────────────────────────────────┘')
                input("Press ENTER to continue")
            elif ask in Foods:
                print("┌──────────────────────────────────────────┐")
                print("│ Name: " + str(Foods[ask][FNAME]))
                print("│ Description: " + str(Foods[ask][FINFO]))
                print("│ Heal: " + str(Foods[ask][FHEAL]))
                print("│ Mana: " + str(Foods[ask][FMANA]))
                print('└──────────────────────────────────────────┘')
                input("Press ENTER to continue")
            elif ask in Ingrediants:
                print("┌──────────────────────────────────────────┐")
                print("│ Name: " + str(Ingrediants[ask][FNAME]))
                print("│ Description: " + str(Ingrediants[ask][FINFO]))
                print("│ Heal: " + str(Ingrediants[ask][FHEAL]))
                print("│ Mana: " + str(Ingrediants[ask][FMANA]))
                print('└──────────────────────────────────────────┘')
                input("Press ENTER to continue")
            elif ask in Alchemy_Ingrediants:
                print("┌──────────────────────────────────────────┐")
                print("│ Name: " + str(Alchemy_Ingrediants[ask][ANAME]))
                print("│ Description: " + str(Alchemy_Ingrediants[ask][AINFO]))
                print("│ Heal: " + str(Alchemy_Ingrediants[ask][AHEAL]))
                print("│ Mana: " + str(Alchemy_Ingrediants[ask][AMANA]))
                print('└──────────────────────────────────────────┘')
                input("Press ENTER to continue")
            elif ask in Crafting:
                print("┌──────────────────────────────────────────┐")
                print("│ Name: " + str(Crafting[ask][CRAFT_NAME]))
                print("│ Description: " + str(Crafting[ask][CRAFT_INFO]))
                print("│ Type: " + str(Crafting[ask][CRAFT_TYPE]))
                print('└──────────────────────────────────────────┘')
                input("Press ENTER to continue")
            elif ask.lower() in within.help:
                help()
            else:
                print("Item is not a GEAR, RANGED, WEAPON, COMPANION or SPELL")



        elif ask.lower() in myPlayer.quiver:
            if ask in Weapons:
                print("┌──────────────────────────────────────────┐")
                print("│ Name: " + str(Weapons[ask][NAME]))
                print("│ Description: " + str(Weapons[ask][INFO]))
                print("│ Type: " + str(Weapons[ask][TYPE]))
                print("│ Attack: " + str(Weapons[ask][ATTACK]))
                print('└──────────────────────────────────────────┘')
                input("Press ENTER to continue")

        else:
            print("Sorry, you don't have that item in your inventory")
            os.system('cls')


#############################
#### Changes weather ####
#############################

def Randomized_weather():
    weatherspawn = random.randint(1, 100)
    if weatherspawn > 60:
        Weather_counter_step()


# 1234
#############################
#### using a potion      ####
#############################
def Items():
    os.system('cls')
    print("┌───────────────┐")
    prGreen("   Inventory:\n" + '\n'.join(myPlayer.inventory))
    print("└───────────────┘")
    Health()
    Mana_pool()
    prRed("┌─────────────────────────────────────────────────────────┐")
    print(" │                   Consume | quit                        │")
    prRed("└─────────────────────────────────────────────────────────┘")
    talk = input("> ")
    if talk.lower() in within.drink:
        ask = input("Consume: ")
        if ask in myPlayer.inventory:
            if ask in Potion:
                print(ask)
                if Potion[ask][HPOTION] is True and Potion[ask][MPOTION] is False:

                    if myPlayer.hp < myPlayer.max_hp:  # if the current HP is lower than the max
                        myPlayer.hp = Potion[ask][HEAL] + myPlayer.hp
                        myPlayer.inventory.remove(ask)
                        print("You healed " + str(Potion[ask][HEAL]) + "!\n")
                        Health()
                        input("Press ENTER to continue\n")
                        os.system('cls')
                        if myPlayer.hp >= myPlayer.max_hp:  # if the current HP plus the potion is greater than the max
                            myPlayer.hp = myPlayer.max_hp  # make the current HP the same as the Max HP

                            os.system('cls')
                        else:
                            print("your health is full\n")
                if Potion[ask][MPOTION] is True and Potion[ask][HPOTION] is False:

                    if myPlayer.mp < myPlayer.max_mp:  # if the current HP is lower than the max
                        myPlayer.mp = Potion[ask][REPLENISH] + myPlayer.mp
                        myPlayer.inventory.remove(ask)
                        print("You replenished " + str(Potion[ask][REPLENISH]) + "!\n")
                        Mana_pool()
                        input("Press ENTER to continue\n")
                        os.system('cls')
                        if myPlayer.mp >= myPlayer.max_mp:  # if the current MP plus the potion is greater than the max
                            myPlayer.mp = myPlayer.max_mp  # make the current MP the same as the Max MP

                            os.system('cls')
                    else:
                        print("your Mana is full\n")
                if Potion[ask][ANTIDOTE] is True:
                    if Status_effectTF.Poisen == True:
                        print_medeum("You consume the Antidote!\n")
                        myPlayer.inventory.remove('Antidote')
                        Status_effectTF.Poisen = False
                        myPlayer.status_effects.remove('Poisened')
                    else:
                        print_medeum("You are cured\n")
                        input("Press ENTER to continue\n")
                if Potion[ask][MPOTION] is True and Potion[ask][HPOTION] is True:

                    myPlayer.inventory.remove(ask)
                    if myPlayer.mp < myPlayer.max_mp:  # if the current HP is lower than the max
                        myPlayer.mp = Potion[ask][REPLENISH] + myPlayer.mp
                        myPlayer.inventory.remove(ask)
                        print(" you replenished " + str(Potion[ask][REPLENISH]) + " mana!\n")
                        Mana_pool()
                        input("Press ENTER to continue\n")
                        os.system('cls')
                        if myPlayer.mp >= myPlayer.max_mp:  # if the current MP plus the potion is greater than the max
                            myPlayer.mp = myPlayer.max_mp  # make the current MP the same as the Max MP
                            os.system('cls')
                    if myPlayer.hp < myPlayer.max_hp:  # if the current HP is lower than the max
                        myPlayer.hp = Potion[ask][HEAL] + myPlayer.hp

                        print(" you healed " + str(Potion[ask][HEAL]) + " health!\n")
                        Health()
                        input("Press ENTER to continue\n")
                        os.system('cls')
                        if myPlayer.hp >= myPlayer.max_hp:  # if the current HP plus the potion is greater than the max
                            myPlayer.hp = myPlayer.max_hp  # make the current HP the same as the Max HP
                            os.system('cls')

                    else:
                        print("your health or mana is full\n")
            elif ask in Foods:
                if myPlayer.hp < myPlayer.max_hp:  # if the current HP is lower than the max
                    myPlayer.hp = Foods[ask][FHEAL] + myPlayer.hp
                    myPlayer.inventory.remove(ask)
                    print(" you healed " + str(Foods[ask][FHEAL]) + " health!\n")
                    Health()
                    input("Press ENTER to continue\n")
                    os.system('cls')
                    if myPlayer.hp >= myPlayer.max_hp:  # if the current HP plus the potion is greater than the max
                        myPlayer.hp = myPlayer.max_hp  # make the current HP the same as the Max HP

                        os.system('cls')

                else:
                    print("your health is full\n")

        os.system('cls')
    while talk.lower() not in within.quit:
        os.system('cls')
        print("┌───────────────┐")
        prGreen("   Inventory:\n" + '\n'.join(myPlayer.inventory))
        print("└───────────────┘")
        Health()
        Mana_pool()
        prRed("┌─────────────────────────────────────────────────────────┐")
        print(" │                   Consume | quit                        │")
        prRed("└─────────────────────────────────────────────────────────┘")
        talk = input("> ")
        if talk.lower() in within.drink:
            ask = input("Consume: ")
            if ask in myPlayer.inventory:
                if ask in Potion:
                    if Potion[ask][HPOTION] is True and Potion[ask][MPOTION] is False :
                        if myPlayer.hp < myPlayer.max_hp:  # if the current HP is lower than the max
                            myPlayer.hp = Potion[ask][HEAL] + myPlayer.hp
                            myPlayer.inventory.remove(ask)
                            print("You healed " + str(Potion[ask][HEAL]) + "!\n")
                            Health()
                            input("Press ENTER to continue\n")
                            os.system('cls')
                            if myPlayer.hp >= myPlayer.max_hp:  # if the current HP plus the potion is greater than the max
                                myPlayer.hp = myPlayer.max_hp  # make the current HP the same as the Max HP

                                os.system('cls')
                            else:
                                print("your health is full\n")
                    if Potion[ask][MPOTION] is True and Potion[ask][HPOTION] is False:
                        if myPlayer.mp < myPlayer.max_mp:  # if the current HP is lower than the max
                            myPlayer.mp = Potion[ask][REPLENISH] + myPlayer.mp
                            myPlayer.inventory.remove(ask)
                            print("You replenished " + str(Potion[ask][REPLENISH]) + "!\n")
                            Mana_pool()
                            input("Press ENTER to continue\n")
                            os.system('cls')
                            if myPlayer.mp >= myPlayer.max_mp:  # if the current MP plus the potion is greater than the max
                                myPlayer.mp = myPlayer.max_mp  # make the current MP the same as the Max MP

                                os.system('cls')
                        else:
                            print("your Mana is full\n")
                    if Potion[ask][ANTIDOTE] is True:
                        if Status_effectTF.Poisen == True:
                            print_medeum("You consume the Antidote!\n")
                            myPlayer.inventory.remove('Antidote')
                            Status_effectTF.Poisen = False
                            myPlayer.status_effects.remove('Poisened')
                        else:
                            print_medeum("You are cured\n")
                            input("Press ENTER to continue\n")
                    if Potion[ask][MPOTION] is True and Potion[ask][HPOTION] is True:
                        myPlayer.inventory.remove(ask)
                        if myPlayer.mp < myPlayer.max_mp:  # if the current HP is lower than the max
                            myPlayer.mp = Potion[ask][REPLENISH] + myPlayer.mp
                            myPlayer.inventory.remove(ask)
                            print(" you replenished " + str(Potion[ask][REPLENISH]) + " mana!\n")
                            Mana_pool()
                            input("Press ENTER to continue\n")
                            os.system('cls')
                            if myPlayer.mp >= myPlayer.max_mp:  # if the current MP plus the potion is greater than the max
                                myPlayer.mp = myPlayer.max_mp  # make the current MP the same as the Max MP
                                os.system('cls')
                        if myPlayer.hp < myPlayer.max_hp:  # if the current HP is lower than the max
                            myPlayer.hp = Potion[ask][HEAL] + myPlayer.hp

                            print(" you healed " + str(Potion[ask][HEAL]) + " health!\n")
                            Health()
                            input("Press ENTER to continue\n")
                            os.system('cls')
                            if myPlayer.hp >= myPlayer.max_hp:  # if the current HP plus the potion is greater than the max
                                myPlayer.hp = myPlayer.max_hp  # make the current HP the same as the Max HP
                                os.system('cls')

                        else:
                            print("your health or mana is full\n")
                elif ask in Foods:
                    if myPlayer.hp < myPlayer.max_hp:  # if the current HP is lower than the max
                        myPlayer.hp = Foods[ask][FHEAL] + myPlayer.hp
                        myPlayer.inventory.remove(ask)
                        print(" you healed " + str(Foods[ask][FHEAL]) + " health!\n")
                        Health()
                        input("Press ENTER to continue\n")
                        os.system('cls')
                        if myPlayer.hp >= myPlayer.max_hp:  # if the current HP plus the potion is greater than the max
                            myPlayer.hp = myPlayer.max_hp  # make the current HP the same as the Max HP

                            os.system('cls')

                    else:
                        print("your health is full\n")

#############################
#### NPC class          ####
#############################
class NPC:

    # Main NPC that you need to get the flashlight from
    def KlausMuller(self):
        os.system('cls')
        print("┌───────────────┐")
        print("  Klaus Muller  ")
        print("└───────────────┘")
        if NPC.metKlausMuller == False:
            if Missions['Mission 4'][ACTIVE] is True:
                print_medeum('Ah I have been expecting you ' + myPlayer.name + '.\n')
                print_medeum('I imagine you have many questions.\n')
                print_medeum('But I will try to answer as many as possible.\n')
                print_medeum('Your heritige goes back many hundreds of years here in Aden.\n')
                print_medeum('Your great great grandparents moved to England and lost contact with your family here.\n')
                print_medeum('After such time, the lord of this manor, your distant relative Freiherren of Schwarzwald, kept this manor and protected its contents.\n')
                print_medeum('The will was not drawn up untill recently, which preluded the mysterious cercumstances of your grandfathers passing\n')
                print_medeum('Your distant relative, was something of a archeolgist. His main quest was to find the origins of this strange artifact found many years ago.\n')
                print_medeum(' Before he went missing he came very close to discovering a truth about it, though he did not have the chance to state what.\n')
                print_medeum('However, what led him to storm off and leave the bloody thing behind is beyond me. Here, maybe you will need it more than I would.\n')
                print_medeum('*You receive the odd artifact*\n')
                input('Press ENTER to continue')
                myPlayer.inventory.append('odd artifact')
                print_medeum('I am not sure where this artifact came from, but the last place he said he was going to visit was the black forest.. \n')
                print_medeum('This was a few weeks ago. The local authorities have no interest in going looking for him in the black forest.\n')
                print_medeum('I would not blame you for not wanting to venture in there, but if you do...\n')
                print_medeum('There is a chest in the Manor that I feel could help you on your journey if you so chose to make it.\n')
                print_medeum('Good luck ' + myPlayer.name +'.\n')
                print_medeum('*You receive the Chest Key*\n')
                input('Press ENTER to continue\n')
                myPlayer.inventory.append('chest key')

                NPC.metKlausMuller = True
                missions_toggle()
                Current_mission()
            else:
                print_medeum('oh there you are! come back later and I will have some news for you.')
        else:

            talk = input('> ')
            if talk == 'clue':
                print('some clues')
            elif talk == 'info':
                print('some info')
            while talk != 'quit':
                talk = input('> ')
                if talk == 'clue':
                    print('some clues')
                elif talk == 'info':
                    print('some info')

    def AnneShephard(self):
        os.system('cls')
        print("┌───────────────┐")
        print("  Anne Shephard  ")
        print("└───────────────┘")
        if NPC.metAnneShephard is False:
            print_medeum('Oh I see you have woken up ' + myPlayer.name + '!\n')
            print_medeum('I am truly sorry that you have not had a proper greeting.\n ')
            print_medeum('My name is Anne Shephard, I see to the everyday maintainence of the Manor.\n ')
            print_medeum('As well as the biddings for you, the new owner. \n ')
            print_medeum('Im afraid you never had a chance to meet the previous owner, even though you were related.\n')
            print_medeum('...\n ')
            print_medeum(
                'Such a dapper mood I have created... I do apologize. I was just about to head out to repair a camera.\n ')
            print_medeum(
                'When I realized I seemed to have lost it somehwere... I was taking some photos of this curious image,\n ')
            print_medeum(
                'But the film didnt seem to develop a proper image, I am sure it will be an easy fix.\n ')

            NPC.metAnneShephard = True
            input('Press ENTER to continue')
            missions_toggle()
            Current_mission()
        elif NPC.metAnneShephard is True:
            os.system('cls')
            print("┌───────────────┐")
            print("  Anne Shephard  ")
            print("     Camera      ")
            print("└───────────────┘")
            print_medeum('what can I do for you ' + myPlayer.name + '?\n')
            talk = input('> ')
            if talk.lower() == 'camera':
                if 'camera' in myPlayer.inventory:
                    print_medeum('Oh you found the camera! Wonderful! May I ask for just one more favour? \n')
                    print_medeum('I need you to take this parcel to a lady named Abigail Winchester.\n')
                    print_medeum(
                        "I'de do it myself but I really need to get this camera fixed, and she is expecting it soon\n")
                    print('* ' + myPlayer.name + ' recieved the parcel*')
                    myPlayer.inventory.append('parcel')
                    myPlayer.inventory.remove('camera')
                    Storage.AnneShephard.append('camera')
                    missions_toggle()
                    Current_mission()
                elif 'camera' in Storage.AnneShephard:
                    print_medeum('thank you for getting that camer for me!\n')
                else:
                    print_medeum('I thought I left that camera somehwere in the manor...\n')
            while talk not in within.quit:
                os.system('cls')
                print("┌───────────────┐")
                print("  Anne Shephard  ")
                print("     Camera      ")
                print("└───────────────┘")
                print_medeum('What can I do for you ' + myPlayer.name + '?\n')
                talk = input('> ')
                if talk.lower() == 'camera':
                    if 'camera' in myPlayer.inventory:
                        print_medeum('Oh you found the camera! Wonderful! May I ask for just one more favour? \n')
                        print_medeum('I need you to take this parcel to a lady named Abigail Winchester in the city of Aden.\n')
                        print_medeum(
                            "I'de do it myself but I really need to get this camera fixed, and she is expecting it soon\n")
                        print('* ' + myPlayer.name + ' recieved the parcel*')
                        myPlayer.inventory.append('parcel')
                        myPlayer.inventory.remove('camera')
                        Storage.AnneShephard.append('camera')
                    else:
                        print_medeum('Oh, I thought I left it somehwere in the manor...\n')

    def DennisKoch(self):
        os.system('cls')
        print_medeum('what you want ' + myPlayer.name + '?\n')
        talk = input('> ')
        if talk == 'clue':
            print('some clues')
        elif talk == 'info':
            print('some info')
        while talk != 'quit':
            talk = input('> ')
            if talk == 'clue':
                print('some clues')
            elif talk == 'info':
                print('some info')

    def DominkSaenger(self):
        os.system('cls')
        print_medeum('What would you like ' + myPlayer.name + '?\n')
        talk = input('> ')
        if talk == 'clue':
            print('some clues')
        elif talk == 'info':
            print('some info')
        while talk != 'quit':
            talk = input('> ')
            if talk == 'clue':
                print('some clues')
            elif talk == 'info':
                print('some info')

    def AbigailWinchester(self):
        os.system('cls')
        print_medeum('May I help you?\n')
        print_medeum('...\n')
        if 'parcel' in myPlayer.inventory:
            print_medeum('oh!\n')
            print_medeum('So Anne sent you with my parcel!\n')
            print_medeum('Thank you very much! here, take this as a gift!\n')
            myPlayer.inventory.remove('parcel')

            my_wallet.deposit(100)
            prGreen('Wallet: +100')
            Storage.AbigailWinchester.append('parcel')
            missions_toggle()
            Current_mission()
            print_medeum('I heard that Klaus Muller was looking for you. I think he ussualy studies in the manor Library.\n')
            input('Press ENTER to continue')
        else:
            print_medeum('I am a bit busy, Im sorry.\n')

    def ByStander1(self):
        os.system('cls')
        print("┌───────────────┐")
        print("     Citizen  ")
        print("└───────────────┘")
        print_medeum('Ever since that dreadful artifact showed up in our city the forest has been impossible to travel through.\n')
        input('Press ENTER to continue')

    def ByStander2(self):
        os.system('cls')
        print("┌───────────────┐")
        print("     Citizen  ")
        print("└───────────────┘")
        print_medeum('Now what did I do that that sweet roll...?.  \n')
        input('Press ENTER to continue')

    def ByStander3(self):
        os.system('cls')
        print("┌───────────────┐")
        print("     Citizen  ")
        print("└───────────────┘")
        print_medeum('We should be expecting a festival soon! It is a tradition in our city when the moon is at its largest!.  \n')
        input('Press ENTER to continue')

    def ByStander4(self):
        os.system('cls')
        print("┌───────────────┐")
        print("     Citizen  ")
        print("└───────────────┘")
        print_medeum('...huh? who are you? Im really busy right now..  \n')
        input('Press ENTER to continue')

    def ByStander5(self):
        os.system('cls')
        print("┌───────────────┐")
        print("     Citizen  ")
        print("└───────────────┘")
        if 'glasses' in myPlayer.inventory:
            if 'glasses' not in Storage.Bystander5:
                myPlayer.inventory.remove('glasses')
                Storage.Bystander5.append('glasses')
                print_medeum('...\n')
                print_medeum('You have found my glasses thank you! It isnt much but here you go.\n')
                print('*You received: 500 gold!*\n')
                my_wallet.deposit(500)
                input('Press ENTER to continue')

        elif 'glasses' not in Storage.Bystander5:
            print_medeum('...oh where did I put my glasses again?.  \n')
            input('Press ENTER to continue')
        elif 'glasses' in Storage.Bystander5:
            print_medeum('Thank you so much for the glasses!\n')

    def ByStander6(self):
        os.system('cls')
        print("┌───────────────┐")
        print("     Citizen  ")
        print("└───────────────┘")
        print_medeum('Did you hear about that Mr. Freiherren of Schwarzwald has gone missing? What a tragedy!.  \n')
        input('Press ENTER to continue')

    def ByStander7(self):
        os.system('cls')
        print("┌───────────────┐")
        print("     Citizen  ")
        print("└───────────────┘")
        print_medeum('Sometimes I wish that I could escape this city and go adventure.\n')
        input('Press ENTER to continue')



Character = NPC()


#############################
#### if NPC has been met ####
#############################
class MetNPC:
    def __init__(self):
        self.metAnneShephard = False
        self.metKlausMuller  = False


NPC = MetNPC()


#############################
#### PLayer wallet####
#############################
class Wallet:

    def __init__(self):
        self.balance = 200

    def deposit(self, amount):
        self.balance += amount

    def withdraw(self, amount):
        self.balance -= amount

    def can_spend(self, amount):
        return self.balance >= amount


my_wallet = Wallet()


def Wares_prices():
    for a, b in zip(within.Wares, within.Prices):
        print(a, b)


def Smithing_prices():
    for a, b in zip(within.Smith_Services, within.Smith_Prices):
        print(a, b)


# 4321
#######################
#### The Smith shop ####
#######################

def Smith_shop():
    winsound.PlaySound("C:\Shop_sound.wav", winsound.SND_ASYNC)
    os.system('cls')
    print_medeum('Greetings ' + myPlayer.job + ".\n")
    time.sleep(1)
    print("┌───────────────────────────────────┐")
    print('│          - Smith Shop -           │')
    print("│           Quit to exit            │")
    print("└───────────────────────────────────┘")
    print('Services: ')
    print('\n'.join(within.Smith_Services))
    print("┌───────────────┐")
    prGreen("   Inventory:\n" + '\n'.join(myPlayer.inventory))
    print("└───────────────┘")
    print('What service do you need?\n')
    talk = input('> ')
    if talk.lower() == 'enhance':
        print('What do you need enhanced?\n')
        talk = input('> ')
        if talk in myPlayer.inventory:
            if talk in Weapons:
                print("┌──────────────────────────────────────────┐")
                print("│ Name: " + str(Weapons[talk][NAME]))
                print("│ Description: " + str(Weapons[talk][INFO]))
                print("│ Type: " + str(Weapons[talk][TYPE]))
                print("│ Attack: " + str(Weapons[talk][ATTACK]))
                print("│ HP: " + str(Weapons[talk][HP]))
                print("│ Enhanced: " + str(Weapons[talk][ENHANCED_TF]))
                print('└──────────────────────────────────────────┘')
                input("Press ENTER to continue\n")
                if Weapons[talk][WEAPON] is True:
                    if my_wallet.balance >= 150:
                        print_medeum("Enhancing weapon... \n")
                        if Weapons[talk][ENHANCED_TF] is False:
                            Weapons[talk][ATTACK] = Weapons[talk][ATTACK] + weapon_enhancement_strength() + 1
                            Weapons[talk][ENHANCED_TF] = True
                            my_wallet.withdraw(150)
                            print_medeum("Done! \n")
                        else:
                            print_medeum('Weapon is already enhanced\n')
                    else:
                        print_medeum('Not enough Gold\n')
                else:
                    print_medeum('Can only enhance Weapons\n')
            elif talk in Ranged:
                print("┌──────────────────────────────────────────┐")
                print("│ Name: " + str(Ranged[talk][NAME]))
                print("│ Description: " + str(Ranged[talk][INFO]))
                print("│ Type: " + str(Ranged[talk][TYPE]))
                print("│ Attack: " + str(Ranged[talk][ATTACK]))
                print("│ Enhanced: " + str(Ranged[talk][ENHANCED_TF]))
                print('└──────────────────────────────────────────┘')
                input("Press ENTER to continue\n")
                if Ranged[talk][WEAPON] is True:
                    if my_wallet.balance >= 150:
                        print_medeum("Enhancing weapon... \n")
                        if Ranged[talk][ENHANCED_TF] is False:
                            Ranged[talk][ATTACK] = Ranged[talk][ATTACK]+ ranged_weapon_dexterity() + 1
                            Ranged[talk][ENHANCED_TF] = True
                            my_wallet.withdraw(150)
                            print_medeum("Done! \n")
                        else:
                            print_medeum('Weapon is already enhanced\n')
                    else:
                        print_medeum('Not enough Gold\n')
                else:
                    print_medeum('Can only enhance Weapons\n')
    elif talk.lower() == 'repair':
        print('What would you like to repair?\n')
        talk = input("> ")
        if talk in myPlayer.inventory:
            #######################Weapons
            if talk in Weapons:
                print("┌──────────────────────────────────────────┐")
                print("│ Name: " + str(Weapons[talk][NAME]))
                print("│ Description: " + str(Weapons[talk][INFO]))
                print("│ Type: " + str(Weapons[talk][TYPE]))
                print("│ Attack: " + str(Weapons[talk][ATTACK]))
                print("│ HP: " + str(Weapons[talk][HP]))
                print('└──────────────────────────────────────────┘')
                input("Press ENTER to continue")
                if Weapons[talk][WEAPON] is True:
                    print_medeum("what service would you like to purchase?\n")
                    services = input("> ")
                    if services == '25%':
                        if my_wallet.balance >= 30:
                            if Weapons[talk][HP] < 100:
                                Weapons[talk][HP] = Weapons[talk][HP] + 25
                                my_wallet.withdraw(30)
                                if Weapons[talk][HP] >= 100:
                                    Weapons[talk][HP] = 100
                            else:
                                print("this is already max health\n")
                        else:
                            print_medeum('it seems you do not have enough money\n')
                    elif services == '50%':
                        if my_wallet.balance >= 60:
                            if Weapons[talk][HP] < 100:
                                Weapons[talk][HP] = Weapons[talk][HP] + 50
                                my_wallet.withdraw(60)
                                if Weapons[talk][HP] >= 100:
                                    Weapons[talk][HP] = 100
                            else:
                                print("this is already max health\n")
                        else:
                            print_medeum('it seems you do not have enough money\n')
                    elif services == '100%':
                        if my_wallet.balance >= 90:
                            if Weapons[talk][HP] < 100:
                                Weapons[talk][HP] = Weapons[talk][HP] + 100
                                my_wallet.withdraw(90)
                                if Weapons[talk][HP] >= 100:
                                    Weapons[talk][HP] = 100
                            else:
                                print("this is already max health\n")
                        else:
                            print_medeum('it seems you do not have enough money\n')
            #######################Gear
            elif talk in Gear:
                print("┌──────────────────────────────────────────┐")
                print("│ Name: " + Gear[talk][NAME])
                print("│ Description: " + str(Gear[talk][INFO]))
                print("│ Type: " + str(Gear[talk][TYPE]))
                print("│ Attack: " + str(Gear[talk][ARMOUR]))
                print("│ HP: " + str(Gear[talk][HP]))
                print('└──────────────────────────────────────────┘')
                input("Press ENTER to continue")
                print_medeum("what service would you like to purchase?\n")
                services = input("> ")
                if services == '25%':
                    if my_wallet.balance >= 30:
                        if Gear[talk][HP] < 100:
                            Gear[talk][HP] = Gear[talk][HP] + 25
                            my_wallet.withdraw(30)
                            if Gear[talk][HP] >= 100:
                                Gear[talk][HP] = 100
                        else:
                            print("this is already max health\n")
                    else:
                        print_medeum('it seems you do not have enough money\n')
                elif services == '50%':
                    if my_wallet.balance >= 60:
                        if Gear[talk][HP] < 100:
                            Gear[talk][HP] = Gear[talk][HP] + 50
                            my_wallet.withdraw(60)
                            if Gear[talk][HP] >= 100:
                                Gear[talk][HP] = 100
                        else:
                            print("this is already max health\n")
                    else:
                        print_medeum('it seems you do not have enough money\n')
                elif services == '100%':
                    if my_wallet.balance >= 90:
                        if Gear[talk][HP] < 100:
                            Gear[talk][HP] = Gear[talk][HP] + 100
                            my_wallet.withdraw(90)
                            if Gear[talk][HP] >= 100:
                                Gear[talk][HP] = 100
                        else:
                            print("this is already max health\n")
                    else:
                        print_medeum('it seems you do not have enough money\n')
            elif talk in within.inventory:
                Inventory_engine_2()
    while talk not in within.quit:
        os.system('cls')
        print("┌───────────────────────────────────┐")
        print('│          - Smith Shop -           │')
        print("│           Quit to exit            │")
        print("└───────────────────────────────────┘")
        print('Services: ')
        print('\n'.join(within.Smith_Services))
        print("┌───────────────┐")
        prGreen("   Inventory:\n" + '\n'.join(myPlayer.inventory))
        print("└───────────────┘")
        print('What service do you need?\n')
        talk = input('> ')
        if talk.lower() == 'enhance':
            print('What do you need enhanced?\n')
            talk = input('> ')
            if talk in myPlayer.inventory:
                if talk in Weapons:
                    print("┌──────────────────────────────────────────┐")
                    print("│ Name: " + str(Weapons[talk][NAME]))
                    print("│ Description: " + str(Weapons[talk][INFO]))
                    print("│ Type: " + str(Weapons[talk][TYPE]))
                    print("│ Attack: " + str(Weapons[talk][ATTACK]))
                    print("│ HP: " + str(Weapons[talk][HP]))
                    print("│ Enhanced: " + str(Weapons[talk][ENHANCED_TF]))
                    print('└──────────────────────────────────────────┘')
                    input("Press ENTER to continue\n")
                    if Weapons[talk][WEAPON] is True:
                        if my_wallet.balance >= 150:
                            print_medeum("Enhancing weapon... \n")
                            if Weapons[talk][ENHANCED_TF] is False:
                                Weapons[talk][ATTACK] = Weapons[talk][ATTACK] + weapon_enhancement_strength() + 1
                                Weapons[talk][ENHANCED_TF] = True
                                my_wallet.withdraw(150)
                                print_medeum("Done! \n")
                            else:
                                print_medeum('Weapon is already enhanced\n')
                        else:
                            print_medeum('Not enough Gold\n')
                    else:
                        print_medeum('Can only enhance Weapons\n')
                elif talk in Ranged:
                    print("┌──────────────────────────────────────────┐")
                    print("│ Name: " + str(Ranged[talk][NAME]))
                    print("│ Description: " + str(Ranged[talk][INFO]))
                    print("│ Type: " + str(Ranged[talk][TYPE]))
                    print("│ Attack: " + str(Ranged[talk][ATTACK]))
                    print("│ Enhanced: " + str(Ranged[talk][ENHANCED_TF]))
                    print('└──────────────────────────────────────────┘')
                    input("Press ENTER to continue\n")
                    if Ranged[talk][WEAPON] is True:
                        print_medeum("Enhancing weapon... \n")
                        print_medeum("Done! \n")
                        if my_wallet.balance >= 150:
                            if Ranged[talk][ENHANCED_TF] is False:
                                Ranged[talk][ATTACK] = Ranged[talk][ATTACK]+ ranged_weapon_dexterity() + 1
                                Ranged[talk][ENHANCED_TF] = True
                                my_wallet.withdraw(150)
                            else:
                                print_medeum('Weapon is already enhanced\n')
                        else:
                            print_medeum('Not enough Gold\n')
                    else:
                        print_medeum('Can only enhance Weapons\n')
        elif talk.lower() == 'repair':
            print('What would you like to repair?\n')
            talk = input("> ")
            if talk in myPlayer.inventory:
                #######################Weapons
                if talk in Weapons:
                    print("┌──────────────────────────────────────────┐")
                    print("│ Name: " + str(Weapons[talk][NAME]))
                    print("│ Description: " + str(Weapons[talk][INFO]))
                    print("│ Type: " + str(Weapons[talk][TYPE]))
                    print("│ Attack: " + str(Weapons[talk][ATTACK]))
                    print("│ HP: " + str(Weapons[talk][HP]))
                    print('└──────────────────────────────────────────┘')
                    input("Press ENTER to continue")
                    if Weapons[talk][WEAPON] is True:
                        print_medeum("what service would you like to purchase?\n")
                        services = input("> ")
                        if services == '25%':
                            if my_wallet.balance >= 30:
                                if Weapons[talk][HP] < 100:
                                    Weapons[talk][HP] = Weapons[talk][HP] + 25
                                    my_wallet.withdraw(30)
                                    if Weapons[talk][HP] >= 100:
                                        Weapons[talk][HP] = 100
                                else:
                                    print("this is already max health\n")
                            else:
                                print_medeum('it seems you do not have enough money\n')
                        elif services == '50%':
                            if my_wallet.balance >= 60:
                                if Weapons[talk][HP] < 100:
                                    Weapons[talk][HP] = Weapons[talk][HP] + 50
                                    my_wallet.withdraw(60)
                                    if Weapons[talk][HP] >= 100:
                                        Weapons[talk][HP] = 100
                                else:
                                    print("this is already max health\n")
                            else:
                                print_medeum('it seems you do not have enough money\n')
                        elif services == '100%':
                            if my_wallet.balance >= 90:
                                if Weapons[talk][HP] < 100:
                                    Weapons[talk][HP] = Weapons[talk][HP] + 100
                                    my_wallet.withdraw(90)
                                    if Weapons[talk][HP] >= 100:
                                        Weapons[talk][HP] = 100
                                else:
                                    print("this is already max health\n")
                            else:
                                print_medeum('it seems you do not have enough money\n')
                #######################Gear
                elif talk in Gear:
                    print("┌──────────────────────────────────────────┐")
                    print("│ Name: " + Gear[talk][NAME])
                    print("│ Description: " + str(Gear[talk][INFO]))
                    print("│ Type: " + str(Gear[talk][TYPE]))
                    print("│ Attack: " + str(Gear[talk][ARMOUR]))
                    print("│ HP: " + str(Gear[talk][HP]))
                    print('└──────────────────────────────────────────┘')
                    input("Press ENTER to continue")
                    print_medeum("what service would you like to purchase?\n")
                    services = input("> ")
                    if services == '25%':
                        if my_wallet.balance >= 30:
                            if Gear[talk][HP] < 100:
                                Gear[talk][HP] = Gear[talk][HP] + 25
                                my_wallet.withdraw(30)
                                if Gear[talk][HP] >= 100:
                                    Gear[talk][HP] = 100
                            else:
                                print("this is already max health\n")
                        else:
                            print_medeum('it seems you do not have enough money\n')
                    elif services == '50%':
                        if my_wallet.balance >= 60:
                            if Gear[talk][HP] < 100:
                                Gear[talk][HP] = Gear[talk][HP] + 50
                                my_wallet.withdraw(60)
                                if Gear[talk][HP] >= 100:
                                    Gear[talk][HP] = 100
                            else:
                                print("this is already max health\n")
                        else:
                            print_medeum('it seems you do not have enough money\n')
                    elif services == '100%':
                        if my_wallet.balance >= 90:
                            if Gear[talk][HP] < 100:
                                Gear[talk][HP] = Gear[talk][HP] + 100
                                my_wallet.withdraw(90)
                                if Gear[talk][HP] >= 100:
                                    Gear[talk][HP] = 100
                            else:
                                print("this is already max health\n")
                        else:
                            print_medeum('it seems you do not have enough money\n')
                elif talk in within.inventory:
                    Inventory_engine_2()


#######################
#### The game shop ####
#######################

def Puzzle_Shop():
    winsound.PlaySound("C:\Shop_sound.wav", winsound.SND_ASYNC)
    Puzzle_shop_random_item()
    os.system('cls')
    print_medeum('Welcome to my shop, look but dont touch! \n')
    time.sleep(1)
    print("┌───────────────────────────────────┐")
    print('│             - Shop -              │')
    print("│            Buy - Sell             │")
    print("└───────────────────────────────────┘")
    print("┌───────────────┐")
    prGreen("   Inventory:\n" + '\n'.join(myPlayer.inventory))
    prGreen("Arrows: " + str(weapon_loaded.arrow))
    print("└───────────────┘")
    print("┌───────────────┐")
    print(Wares_prices())
    print("└───────────────┘")
    print("┌───────────────┐")
    prBlue("    Weapons:\n" + '\n'.join(within.Wares_Weapons))
    print("└───────────────┘")
    print("┌───────────────┐")
    prBlue("    Gear:\n" + '\n'.join(within.Wares_Gear))
    print("└───────────────┘")
    print("┌───────────────┐")
    prBlue("    Spells:\n" + '\n'.join(within.Wares_Spells))
    print("└───────────────┘")
    print("┌───────────────┐")
    prGreen('wallet: ' + str(my_wallet.balance))
    print("└───────────────┘")
    print_medeum('What would you like to do?\n')
    talk = input('> ')
    if talk in within.buy:

        print_medeum('What would you like to buy? \n')
        talk2 = input('> ')
        if talk2 in within.Wares_Arrows:
            print_medeum("Would you like to confirm?\n")
            yesno = input('> ')
            if yesno in within.accept:
                print_medeum('Okay, that will be 10 gold please \n')
                if my_wallet.balance >= 10:
                    weapon_loaded.arrow += 5
                    my_wallet.withdraw(10)
                else:
                    print_medeum('it seems you do not have enough money\n')
            else:
                print_medeum('Maybe another time \n')
        ###################Small Potions ##########################
        elif talk2 in within.Wares_small:
            print_medeum("Would you like to confirm?\n")
            yesno = input('> ')
            if yesno in within.accept:
                print_medeum('Okay, that will be 25 gold please \n')
                if my_wallet.balance >= 25:
                    if len(myPlayer.inventory) < myPlayer.Inventory_size:
                        my_wallet.withdraw(25)
                        append_check(talk2)
                    else:
                        print_medeum("You have ran out of room\n")

                else:
                    print_medeum('it seems you do not have enough money\n')
            else:
                print_medeum('Maybe another time \n')
        ###################Med Potions ##########################
        elif talk2 in within.Wares_med:
            print_medeum("Would you like to confirm?\n")
            yesno = input('> ')
            if yesno in within.accept:
                print_medeum('Okay, that will be 50 gold please \n')
                if my_wallet.balance >= 50:
                    if len(myPlayer.inventory) < myPlayer.Inventory_size:
                        my_wallet.withdraw(50)
                        append_check(talk2)
                    else:
                        print_medeum("You have ran out of room\n")
                else:
                    print_medeum('it seems you do not have enough money\n')
            else:
                print_medeum('Maybe another time \n')
        ###################Large Potions ##########################
        elif talk2 in within.Wares_Large:
            print_medeum("Would you like to confirm?\n")
            yesno = input('> ')
            if yesno in within.accept:
                print_medeum('Okay, that will be 100 gold please \n')
                if my_wallet.balance >= 100:
                    if len(myPlayer.inventory) < myPlayer.Inventory_size:
                        my_wallet.withdraw(100)
                        append_check(talk2)
                    else:
                        print_medeum("You have ran out of room\n")
                else:
                    print_medeum('it seems you do not have enough money\n')
            else:
                print_medeum('Maybe another time \n')
        ###################Heal Potions ##########################
        elif talk2 in within.Wares_Heal:
            print_medeum("Would you like to confirm?\n")
            yesno = input('> ')
            if yesno in within.accept:
                print_medeum('Okay, that will be 50 gold please \n')
                if my_wallet.balance >= 50:
                    if len(myPlayer.inventory) < myPlayer.Inventory_size:
                        my_wallet.withdraw(50)
                        append_check(talk2)
                    else:
                        print_medeum("You have ran out of room\n")
                else:
                    print_medeum('it seems you do not have enough money\n')
            else:
                print_medeum('Maybe another time \n')

        ###################Above are the standard options always available########################
        elif talk2 in within.Wares_Gear:
            print_medeum("Would you like to confirm?\n")
            yesno = input('> ')
            if yesno in within.accept:
                print_medeum('Okay, that will be 200 gold please \n')
                if my_wallet.balance >= 200:
                    if len(myPlayer.inventory) < myPlayer.Inventory_size:
                        append_check(talk2)
                        within.Wares_Gear.remove(talk2)
                        my_wallet.withdraw(200)
                        # ItemTF.item_purchased = True
                    else:
                        print_medeum("You have ran out of room\n")
                else:
                    print_medeum('it seems you do not have enough money\n')
            else:
                print_medeum('Maybe another time \n')
        elif talk2 in within.Wares_Spells:
            print_medeum("Would you like to confirm?\n")
            yesno = input('> ')
            if yesno in within.accept:
                print_medeum('Okay, that will be 200 gold please \n')
                if my_wallet.balance >= 200:
                    if len(myPlayer.inventory) < myPlayer.Inventory_size:
                        append_check(talk2)
                        within.Wares_Spells.remove(talk2)
                        my_wallet.withdraw(200)
                        # ItemTF.item_purchased = True
                    else:
                        print_medeum("You have ran out of room\n")
                else:
                    print_medeum('it seems you do not have enough money\n')
            else:
                print_medeum('Maybe another time \n')
        elif talk2 in within.Wares_Weapons:
            print_medeum("Would you like to confirm?\n")
            yesno = input('> ')
            if yesno in within.accept:
                print_medeum('Okay, that will be 200 gold please \n')
                if my_wallet.balance >= 200:
                    if len(myPlayer.inventory) < myPlayer.Inventory_size:
                        append_check(talk2)
                        within.Wares_Weapons.remove(talk2)
                        my_wallet.withdraw(200)
                        # ItemTF.item_purchased = True
                    else:
                        print_medeum("You have ran out of room\n")
                else:
                    print_medeum('it seems you do not have enough money\n')
            else:
                print_medeum('Maybe another time \n')
    elif talk in within.sell:
        print_medeum('What would you like to sell?\n')
        sell = input('> ')
        ##############Selling Weapons
        if sell in Weapons:
            if sell in myPlayer.inventory:
                if Weapons[sell][RARITY] == 'Uncommon':
                    print_medeum('Would you like to confirm?\n')
                    yesno = input('> ')
                    if yesno in within.accept:
                        myPlayer.inventory.remove(sell)
                        my_wallet.deposit(50)
                        print_medeum("sold " + sell + ".\n")
                        prBlue('Wallet: +50\n')
                        input("Press ENTER to continue")
                elif Weapons[sell][RARITY] == 'Common':
                    print_medeum('Would you like to confirm?\n')
                    yesno = input('> ')
                    if yesno in within.accept:
                        myPlayer.inventory.remove(sell)
                        my_wallet.deposit(100)
                        print_medeum("sold " + sell + ".\n")
                        prBlue('Wallet: +100\n')
                        input("Press ENTER to continue")
                elif Weapons[sell][RARITY] == 'Rare':
                    print_medeum('Would you like to confirm?\n')
                    yesno = input('> ')
                    if yesno in within.accept:
                        myPlayer.inventory.remove(sell)
                        my_wallet.deposit(150)
                    print_medeum("sold " + sell + ".\n")
                    prBlue('Wallet: +150\n')
                    input("Press ENTER to continue")
                elif Weapons[sell][RARITY] == 'Ultra Rare':
                    print_medeum('Would you like to confirm?\n')
                    yesno = input('> ')
                    if yesno in within.accept:
                        myPlayer.inventory.remove(sell)
                        my_wallet.deposit(200)
                        print_medeum("sold " + sell + ".\n")
                        prBlue('Wallet: +200\n')
                        input("Press ENTER to continue")
                elif Weapons[sell][RARITY] == 'Legendary':
                    print_medeum('Would you like to confirm?\n')
                    yesno = input('> ')
                    if yesno in within.accept:
                        myPlayer.inventory.remove(sell)
                        my_wallet.deposit(250)
                        print_medeum("sold " + sell + ".\n")
                        prBlue('Wallet: +250\n')
                        input("Press ENTER to continue")
        ##############Selling Gear
        elif sell in Gear:
            if Gear[sell][RARITY] == 'Uncommon':
                print_medeum('Would you like to confirm?\n')
                yesno = input('')
                if yesno in within.accept:
                    myPlayer.inventory.remove(sell)
                    my_wallet.deposit(50)
                    print_medeum("sold " + sell + ".\n")
                    prBlue('Wallet: +50\n')
                    input("Press ENTER to continue")
            elif Gear[sell][RARITY] == 'Common':
                print_medeum('Would you like to confirm?\n')
                yesno = input('')
                if yesno in within.accept:
                    myPlayer.inventory.remove(sell)
                    my_wallet.deposit(100)
            elif Gear[sell][RARITY] == 'Rare':
                print_medeum('Would you like to confirm?\n')
                yesno = input('')
                if yesno in within.accept:
                    myPlayer.inventory.remove(sell)
                    my_wallet.deposit(150)
                    print_medeum("sold " + sell + ".\n")
                    prBlue('Wallet: +150\n')
                    input("Press ENTER to continue")
            elif Gear[sell][RARITY] == 'Ultra Rare':
                print_medeum('Would you like to confirm?\n')
                yesno = input('')
                if yesno in within.accept:
                    myPlayer.inventory.remove(sell)
                    my_wallet.deposit(200)
                    print_medeum("sold " + sell + ".\n")
                    prBlue('Wallet: +200\n')
                    input("Press ENTER to continue")
            elif Gear[sell][RARITY] == 'Legendary':
                print_medeum('Would you like to confirm?\n')
                yesno = input('')
                if yesno in within.accept:
                    myPlayer.inventory.remove(sell)
                    my_wallet.deposit(250)
                    print_medeum("sold " + sell + ".\n")
                    prBlue('Wallet: +250\n')
                    input("Press ENTER to continue")
        ##############Selling Spells
        elif sell in Spells:
            if Spells[sell][RARITY] == 'Uncommon':
                print_medeum('Would you like to confirm?\n')
                yesno = input('')
                if yesno in within.accept:
                    myPlayer.inventory.remove(sell)
                    my_wallet.deposit(50)
                    print_medeum("sold " + sell + ".\n")
                    prBlue('Wallet: +50\n')
                    input("Press ENTER to continue")
            elif Spells[sell][RARITY] == 'Common':
                print_medeum('Would you like to confirm?\n')
                yesno = input('')
                if yesno in within.accept:
                    myPlayer.inventory.remove(sell)
                    my_wallet.deposit(100)
                    print_medeum("sold " + sell + ".\n")
                    prBlue('Wallet: +100\n')
                    input("Press ENTER to continue")
            elif Spells[sell][RARITY] == 'Rare':
                print_medeum('Would you like to confirm?\n')
                yesno = input('')
                if yesno in within.accept:
                    myPlayer.inventory.remove(sell)
                    my_wallet.deposit(150)
                    print_medeum("sold " + sell + ".\n")
                    prBlue('Wallet: +150\n')
                    input("Press ENTER to continue")
            elif Spells[sell][RARITY] == 'Ultra Rare':
                print_medeum('Would you like to confirm?\n')
                yesno = input('')
                if yesno in within.accept:
                    myPlayer.inventory.remove(sell)
                    my_wallet.deposit(200)
                    print_medeum("sold " + sell + ".\n")
                    prBlue('Wallet: +200\n')
                    input("Press ENTER to continue")
            elif Spells[sell][RARITY] == 'Legendary':
                print_medeum('Would you like to confirm?\n')
                yesno = input('')
                if yesno in within.accept:
                    myPlayer.inventory.remove(sell)
                    my_wallet.deposit(250)
                    print_medeum("sold " + sell + ".\n")
                    prBlue('Wallet: +250\n')
                    input("Press ENTER to continue")
        ##############Selling Ranged
        elif sell in Ranged:
            if Ranged[sell][RARITY] == 'Uncommon':
                print_medeum('Would you like to confirm?\n')
                yesno = input('')
                if yesno in within.accept:
                    myPlayer.inventory.remove(sell)
                    my_wallet.deposit(50)
                    print_medeum("sold " + sell + ".\n")
                    prBlue('Wallet: +50\n')
                    input("Press ENTER to continue")
            elif Ranged[sell][RARITY] == 'Common':
                print_medeum('Would you like to confirm?\n')
                yesno = input('')
                if yesno in within.accept:
                    myPlayer.inventory.remove(sell)
                    my_wallet.deposit(100)
                    print_medeum("sold " + sell + ".\n")
                    prBlue('Wallet: +100\n')
                    input("Press ENTER to continue")
            elif Ranged[sell][RARITY] == 'Rare':
                print_medeum('Would you like to confirm?\n')
                yesno = input('')
                if yesno in within.accept:
                    myPlayer.inventory.remove(sell)
                    my_wallet.deposit(150)
                    print_medeum("sold " + sell + ".\n")
                    prBlue('Wallet: +150\n')
                    input("Press ENTER to continue")
            elif Ranged[sell][RARITY] == 'Ultra Rare':
                print_medeum('Would you like to confirm?\n')
                yesno = input('')
                if yesno in within.accept:
                    myPlayer.inventory.remove(sell)
                    my_wallet.deposit(200)
                    print_medeum("sold " + sell + ".\n")
                    prBlue('Wallet: +200\n')
                    input("Press ENTER to continue")
            elif Ranged[sell][RARITY] == 'Legendary':
                print_medeum('Would you like to confirm?\n')
                yesno = input('')
                if yesno in within.accept:
                    myPlayer.inventory.remove(sell)
                    my_wallet.deposit(250)
                    print_medeum("sold " + sell + ".\n")
                    prBlue('Wallet: +250\n')
                    input("Press ENTER to continue")
    elif talk.lower() in within.help:
        help()

    while talk not in within.quit:

        os.system('cls')
        print("┌───────────────────────────────────┐")
        print('│             - Shop -              │')
        print("│            Buy - Sell             │")
        print("└───────────────────────────────────┘")
        print("┌───────────────┐")
        prGreen("   Inventory:\n" + '\n'.join(myPlayer.inventory))
        prGreen("Arrows: " + str(weapon_loaded.arrow))
        print("└───────────────┘")
        print("┌───────────────┐")
        print(Wares_prices())
        print("└───────────────┘")
        print("┌───────────────┐")
        prBlue("    Weapons:\n" + '\n'.join(within.Wares_Weapons))
        print("└───────────────┘")
        print("┌───────────────┐")
        prBlue("    Gear:\n" + '\n'.join(within.Wares_Gear))
        print("└───────────────┘")
        print("┌───────────────┐")
        prBlue("    Spells:\n" + '\n'.join(within.Wares_Spells))
        print("└───────────────┘")
        print("┌───────────────┐")
        prGreen('wallet: ' + str(my_wallet.balance))
        print("└───────────────┘")
        print_medeum('What would you like to do?\n')
        talk = input('> ')
        if talk in within.buy:
            print_medeum('What would you like to buy? \n')
            talk2 = input('> ')
            if talk2 in within.Wares_Arrows:
                print_medeum("Would you like to confirm?\n")
                yesno = input('> ')
                if yesno in within.accept:
                    print_medeum('Okay, that will be 10 gold please \n')
                    if my_wallet.balance >= 10:
                        weapon_loaded.arrow += 5
                        my_wallet.withdraw(10)
                    else:
                        print_medeum('it seems you do not have enough money\n')
                else:
                    print_medeum('Maybe another time \n')
            ###################Small Potions ##########################
            elif talk2 in within.Wares_small:
                print_medeum("Would you like to confirm?\n")
                yesno = input('> ')
                if yesno in within.accept:
                    print_medeum('Okay, that will be 25 gold please \n')
                    if my_wallet.balance >= 25:
                        if len(myPlayer.inventory) < myPlayer.Inventory_size:
                            my_wallet.withdraw(25)
                            append_check(talk2)
                        else:
                            print_medeum("You have ran out of room\n")

                    else:
                        print_medeum('it seems you do not have enough money\n')
                else:
                    print_medeum('Maybe another time \n')
            ###################Med Potions ##########################
            elif talk2 in within.Wares_med:
                print_medeum("Would you like to confirm?\n")
                yesno = input('> ')
                if yesno in within.accept:
                    print_medeum('Okay, that will be 50 gold please \n')
                    if my_wallet.balance >= 50:
                        if len(myPlayer.inventory) < myPlayer.Inventory_size:
                            my_wallet.withdraw(50)
                            append_check(talk2)
                        else:
                            print_medeum("You have ran out of room\n")
                    else:
                        print_medeum('it seems you do not have enough money\n')
                else:
                    print_medeum('Maybe another time \n')
            ###################Large Potions ##########################
            elif talk2 in within.Wares_Large:
                print_medeum("Would you like to confirm?\n")
                yesno = input('> ')
                if yesno in within.accept:
                    print_medeum('Okay, that will be 100 gold please \n')
                    if my_wallet.balance >= 100:
                        if len(myPlayer.inventory) < myPlayer.Inventory_size:
                            my_wallet.withdraw(100)
                            append_check(talk2)
                        else:
                            print_medeum("You have ran out of room\n")
                    else:
                        print_medeum('it seems you do not have enough money\n')
                else:
                    print_medeum('Maybe another time \n')
            ###################Heal Potions ##########################
            elif talk2 in within.Wares_Heal:
                print_medeum("Would you like to confirm?\n")
                yesno = input('> ')
                if yesno in within.accept:
                    print_medeum('Okay, that will be 50 gold please \n')
                    if my_wallet.balance >= 50:
                        if len(myPlayer.inventory) < myPlayer.Inventory_size:
                            my_wallet.withdraw(50)
                            append_check(talk2)
                        else:
                            print_medeum("You have ran out of room\n")
                    else:
                        print_medeum('it seems you do not have enough money\n')
                else:
                    print_medeum('Maybe another time \n')

            ###################Above are the standard options always available########################
            elif talk2 in within.Wares_Gear:
                print_medeum("Would you like to confirm?\n")
                yesno = input('> ')
                if yesno in within.accept:
                    print_medeum('Okay, that will be 200 gold please \n')
                    if my_wallet.balance >= 200:
                        if len(myPlayer.inventory) < myPlayer.Inventory_size:
                            append_check(talk2)
                            within.Wares_Gear.remove(talk2)
                            my_wallet.withdraw(200)
                            # ItemTF.item_purchased = True
                        else:
                            print_medeum("You have ran out of room\n")
                    else:
                        print_medeum('it seems you do not have enough money\n')
                else:
                    print_medeum('Maybe another time \n')
            elif talk2 in within.Wares_Spells:
                print_medeum("Would you like to confirm?\n")
                yesno = input('> ')
                if yesno in within.accept:
                    print_medeum('Okay, that will be 200 gold please \n')
                    if my_wallet.balance >= 200:
                        if len(myPlayer.inventory) < myPlayer.Inventory_size:
                            append_check(talk2)
                            within.Wares_Spells.remove(talk2)
                            my_wallet.withdraw(200)
                            # ItemTF.item_purchased = True
                        else:
                            print_medeum("You have ran out of room\n")
                    else:
                        print_medeum('it seems you do not have enough money\n')
                else:
                    print_medeum('Maybe another time \n')
            elif talk2 in within.Wares_Weapons:
                print_medeum("Would you like to confirm?\n")
                yesno = input('> ')
                if yesno in within.accept:
                    print_medeum('Okay, that will be 200 gold please \n')
                    if my_wallet.balance >= 200:
                        if len(myPlayer.inventory) < myPlayer.Inventory_size:
                            append_check(talk2)
                            within.Wares_Weapons.remove(talk2)
                            my_wallet.withdraw(200)
                            # ItemTF.item_purchased = True
                        else:
                            print_medeum("You have ran out of room\n")
                    else:
                        print_medeum('it seems you do not have enough money\n')
                else:
                    print_medeum('Maybe another time \n')
        elif talk in within.sell:
            print_medeum('What would you like to sell?\n')
            sell = input('> ')
            ##############Selling Weapons
            if sell in Weapons:
                if sell in myPlayer.inventory:
                    if Weapons[sell][RARITY] == 'Uncommon':
                        print_medeum('Would you like to confirm?\n')
                        yesno = input('> ')
                        if yesno in within.accept:
                            myPlayer.inventory.remove(sell)
                            my_wallet.deposit(50)
                            print_medeum("sold " + sell + ".\n")
                            prBlue('Wallet: +50\n')
                            input("Press ENTER to continue")
                    elif Weapons[sell][RARITY] == 'Common':
                        print_medeum('Would you like to confirm?\n')
                        yesno = input('> ')
                        if yesno in within.accept:
                            myPlayer.inventory.remove(sell)
                            my_wallet.deposit(100)
                            print_medeum("sold " + sell + ".\n")
                            prBlue('Wallet: +100\n')
                            input("Press ENTER to continue")
                    elif Weapons[sell][RARITY] == 'Rare':
                        print_medeum('Would you like to confirm?\n')
                        yesno = input('> ')
                        if yesno in within.accept:
                            myPlayer.inventory.remove(sell)
                            my_wallet.deposit(150)
                        print_medeum("sold " + sell + ".\n")
                        prBlue('Wallet: +150\n')
                        input("Press ENTER to continue")
                    elif Weapons[sell][RARITY] == 'Ultra Rare':
                        print_medeum('Would you like to confirm?\n')
                        yesno = input('> ')
                        if yesno in within.accept:
                            myPlayer.inventory.remove(sell)
                            my_wallet.deposit(200)
                            print_medeum("sold " + sell + ".\n")
                            prBlue('Wallet: +200\n')
                            input("Press ENTER to continue")
                    elif Weapons[sell][RARITY] == 'Legendary':
                        print_medeum('Would you like to confirm?\n')
                        yesno = input('> ')
                        if yesno in within.accept:
                            myPlayer.inventory.remove(sell)
                            my_wallet.deposit(250)
                            print_medeum("sold " + sell + ".\n")
                            prBlue('Wallet: +250\n')
                            input("Press ENTER to continue")
            ##############Selling Gear
            elif sell in Gear:
                if Gear[sell][RARITY] == 'Uncommon':
                    print_medeum('Would you like to confirm?\n')
                    yesno = input('')
                    if yesno in within.accept:
                        myPlayer.inventory.remove(sell)
                        my_wallet.deposit(50)
                        print_medeum("sold " + sell + ".\n")
                        prBlue('Wallet: +50\n')
                        input("Press ENTER to continue")
                elif Gear[sell][RARITY] == 'Common':
                    print_medeum('Would you like to confirm?\n')
                    yesno = input('')
                    if yesno in within.accept:
                        myPlayer.inventory.remove(sell)
                        my_wallet.deposit(100)
                elif Gear[sell][RARITY] == 'Rare':
                    print_medeum('Would you like to confirm?\n')
                    yesno = input('')
                    if yesno in within.accept:
                        myPlayer.inventory.remove(sell)
                        my_wallet.deposit(150)
                        print_medeum("sold " + sell + ".\n")
                        prBlue('Wallet: +150\n')
                        input("Press ENTER to continue")
                elif Gear[sell][RARITY] == 'Ultra Rare':
                    print_medeum('Would you like to confirm?\n')
                    yesno = input('')
                    if yesno in within.accept:
                        myPlayer.inventory.remove(sell)
                        my_wallet.deposit(200)
                        print_medeum("sold " + sell + ".\n")
                        prBlue('Wallet: +200\n')
                        input("Press ENTER to continue")
                elif Gear[sell][RARITY] == 'Legendary':
                    print_medeum('Would you like to confirm?\n')
                    yesno = input('')
                    if yesno in within.accept:
                        myPlayer.inventory.remove(sell)
                        my_wallet.deposit(250)
                        print_medeum("sold " + sell + ".\n")
                        prBlue('Wallet: +250\n')
                        input("Press ENTER to continue")
            ##############Selling Spells
            elif sell in Spells:
                if Spells[sell][RARITY] == 'Uncommon':
                    print_medeum('Would you like to confirm?\n')
                    yesno = input('')
                    if yesno in within.accept:
                        myPlayer.inventory.remove(sell)
                        my_wallet.deposit(50)
                        print_medeum("sold " + sell + ".\n")
                        prBlue('Wallet: +50\n')
                        input("Press ENTER to continue")
                elif Spells[sell][RARITY] == 'Common':
                    print_medeum('Would you like to confirm?\n')
                    yesno = input('')
                    if yesno in within.accept:
                        myPlayer.inventory.remove(sell)
                        my_wallet.deposit(100)
                        print_medeum("sold " + sell + ".\n")
                        prBlue('Wallet: +100\n')
                        input("Press ENTER to continue")
                elif Spells[sell][RARITY] == 'Rare':
                    print_medeum('Would you like to confirm?\n')
                    yesno = input('')
                    if yesno in within.accept:
                        myPlayer.inventory.remove(sell)
                        my_wallet.deposit(150)
                        print_medeum("sold " + sell + ".\n")
                        prBlue('Wallet: +150\n')
                        input("Press ENTER to continue")
                elif Spells[sell][RARITY] == 'Ultra Rare':
                    print_medeum('Would you like to confirm?\n')
                    yesno = input('')
                    if yesno in within.accept:
                        myPlayer.inventory.remove(sell)
                        my_wallet.deposit(200)
                        print_medeum("sold " + sell + ".\n")
                        prBlue('Wallet: +200\n')
                        input("Press ENTER to continue")
                elif Spells[sell][RARITY] == 'Legendary':
                    print_medeum('Would you like to confirm?\n')
                    yesno = input('')
                    if yesno in within.accept:
                        myPlayer.inventory.remove(sell)
                        my_wallet.deposit(250)
                        print_medeum("sold " + sell + ".\n")
                        prBlue('Wallet: +250\n')
                        input("Press ENTER to continue")
            ##############Selling Ranged
            elif sell in Ranged:
                if Ranged[sell][RARITY] == 'Uncommon':
                    print_medeum('Would you like to confirm?\n')
                    yesno = input('')
                    if yesno in within.accept:
                        myPlayer.inventory.remove(sell)
                        my_wallet.deposit(50)
                        print_medeum("sold " + sell + ".\n")
                        prBlue('Wallet: +50\n')
                        input("Press ENTER to continue")
                elif Ranged[sell][RARITY] == 'Common':
                    print_medeum('Would you like to confirm?\n')
                    yesno = input('')
                    if yesno in within.accept:
                        myPlayer.inventory.remove(sell)
                        my_wallet.deposit(100)
                        print_medeum("sold " + sell + ".\n")
                        prBlue('Wallet: +100\n')
                        input("Press ENTER to continue")
                elif Ranged[sell][RARITY] == 'Rare':
                    print_medeum('Would you like to confirm?\n')
                    yesno = input('')
                    if yesno in within.accept:
                        myPlayer.inventory.remove(sell)
                        my_wallet.deposit(150)
                        print_medeum("sold " + sell + ".\n")
                        prBlue('Wallet: +150\n')
                        input("Press ENTER to continue")
                elif Ranged[sell][RARITY] == 'Ultra Rare':
                    print_medeum('Would you like to confirm?\n')
                    yesno = input('')
                    if yesno in within.accept:
                        myPlayer.inventory.remove(sell)
                        my_wallet.deposit(200)
                        print_medeum("sold " + sell + ".\n")
                        prBlue('Wallet: +200\n')
                        input("Press ENTER to continue")
                elif Ranged[sell][RARITY] == 'Legendary':
                    print_medeum('Would you like to confirm?\n')
                    yesno = input('')
                    if yesno in within.accept:
                        myPlayer.inventory.remove(sell)
                        my_wallet.deposit(250)
                        print_medeum("sold " + sell + ".\n")
                        prBlue('Wallet: +250\n')
                        input("Press ENTER to continue")
        elif talk.lower() in within.help:
            help()


def randomize_weather():
    return random.randint(1, 100)


#############################
#### Weather off/on ####
#############################
class Weather:
    def __init__(self):
        self.Rain = False
        self.Sunny = False
        self.Storm = False
        self.Cloudy = False
        self.Snow = False
        self.day = False
        self.night = True
        self.Clear = False


weather_behavior = Weather()


def Weather_counter_step():
    Weather_counter.total -= 1
    if Weather_counter.total <= 0:
        Weather_counter.total = random.randint(1, 10)
        weather_changer()



#############################
#### artificial weather behavior ####
#############################
def weather_changer():

    if weather_behavior.day == True:
        random_weather = random.randint(1, 500)
        if random_weather < 10:
            weather_behavior.Cloudy = True
            weather_behavior.Sunny = False
        elif random_weather < 30:
            if weather_behavior.Cloudy == True:
                weather_behavior.Rain = True
        elif random_weather < 50:
            weather_behavior.Sunny = True
            weather_behavior.Cloudy = False
            weather_behavior.Rain = False
            weather_behavior.Storm = False
        elif random_weather < 70:
            if weather_behavior.Cloudy == True:
                weather_behavior.Rain = True
        elif random_weather < 75:
            if weather_behavior.Rain == True:
                weather_behavior.Storm = True
        else:
            weather_behavior.Sunny = True
            weather_behavior.Cloudy = False
            weather_behavior.Rain = False
            weather_behavior.Storm = False
    elif weather_behavior.night == True:
        random_weather = random.randint(1, 100)
        if random_weather < 10:
            weather_behavior.Cloudy = True
            weather_behavior.Clear = False
        elif random_weather < 30:
            if weather_behavior.Cloudy == True:
                weather_behavior.Rain = True
        elif random_weather < 50:
            weather_behavior.Clear = True
            weather_behavior.Cloudy = False
            weather_behavior.Rain = False
            weather_behavior.Storm = False
        elif random_weather < 90:
            if weather_behavior.Cloudy == True:
                if weather_behavior.Rain == True:
                    weather_behavior.Storm = True


screen_width = 10000


#############################
#### prints weather bahavior ####
#############################
def Weather_printer():
    if weather_behavior.Sunny == True:
        print("┌───────────────┐")
        prYellow("Weather: sunny")
        print('└───────────────┘')

    elif weather_behavior.Storm == True:
        print("┌───────────────┐")
        prRed("Weather: Thunder Storm ")
        print('└───────────────┘')
    elif weather_behavior.Rain == True and weather_behavior.Cloudy == True:
        print("┌───────────────┐")
        prBlue("Weather: Raining")
        print('└───────────────┘')
    elif weather_behavior.Clear == True:
        print("┌───────────────┐")
        prBlue("Weather: Clear")
        print('└───────────────┘')
    elif weather_behavior.Cloudy == True:
        print("┌───────────────┐")
        prGreen("Weather: Cloudy")
        print('└───────────────┘')


#############################
#### keeps track of time of day ####
#############################
def Night_time():
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    if current_time <= '20:00:00':
        weather_behavior.day = False
        weather_behavior.night = True
    if current_time <= '21:00:00':
        weather_behavior.day = False
        weather_behavior.night = True
    if current_time <= '22:00:00':
        weather_behavior.day = False
        weather_behavior.night = True
    if current_time <= '23:00:00':
        weather_behavior.day = False
        weather_behavior.night = True
    if current_time <= '00:00:00':
        weather_behavior.day = False
        weather_behavior.night = True
    if current_time <= '01:00:00':
        weather_behavior.day = False
        weather_behavior.night = True
    if current_time <= '02:00:00':
        weather_behavior.day = False
        weather_behavior.night = True
    if current_time <= '03:00:00':
        weather_behavior.day = False
        weather_behavior.night = True
    if current_time <= '04:00:00':
        weather_behavior.day = False
        weather_behavior.night = True
    if current_time <= '05:00:00':
        weather_behavior.day = False
        weather_behavior.night = True
    if current_time <= '06:00:00':
        weather_behavior.day = False
        weather_behavior.night = True
    if current_time <= '07:00:00':
        weather_behavior.day = False
        weather_behavior.night = True


def Day_time():
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    if current_time <= '08:00:00':
        weather_behavior.day = True
        weather_behavior.night = False
    if current_time <= '09:00:00am':
        weather_behavior.day = True
        weather_behavior.night = False
    if current_time <= '10:00:00':
        weather_behavior.day = True
        weather_behavior.night = False
    if current_time <= '11:00:00':
        weather_behavior.day = True
        weather_behavior.night = False
    if current_time <= '12:00:00':
        weather_behavior.day = True
        weather_behavior.night = False
    if current_time <= '13:00:00':
        weather_behavior.day = True
        weather_behavior.night = False
    if current_time <= '14:00:00':
        weather_behavior.day = True
        weather_behavior.night = False
    if current_time <= '15:00:00':
        weather_behavior.day = True
        weather_behavior.night = False
    if current_time <= '16:00:00':
        weather_behavior.day = True
        weather_behavior.night = False
    if current_time <= '17:00:00':
        weather_behavior.day = True
        weather_behavior.night = False
    if current_time <= '18:00:00':
        weather_behavior.day = True
        weather_behavior.night = False
    if current_time <= '19:00:00':
        weather_behavior.day = True
        weather_behavior.night = False


class Item_generator:
    def __init__(self):
        self.item_purchased = False


ItemTF = Item_generator()


def Puzzle_shop_random_item():
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")

    if current_time >= '00:00:00':
        if ItemTF.item_purchased == False:
            Random_Item_generator()
    elif current_time >= '01:00:00':
        if ItemTF.item_purchased == False:
            Random_Item_generator()
    elif current_time >= '02:00:00':
        if ItemTF.item_purchased == False:
            Random_Item_generator()
    elif current_time >= '03:00:00':
        if ItemTF.item_purchased == False:
            Random_Item_generator()
    elif current_time >= '04:00:00':
        if ItemTF.item_purchased == False:
            Random_Item_generator()
    elif current_time >= '05:00:00':
        if ItemTF.item_purchased == False:
            Random_Item_generator()
    elif current_time >= '06:00:00':
        if ItemTF.item_purchased == False:
            Random_Item_generator()
    elif current_time >= '07:00:00':
        if ItemTF.item_purchased == False:
            Random_Item_generator()
    elif current_time >= '08:00:00':
        if ItemTF.item_purchased == False:
            Random_Item_generator()
    elif current_time >= '09:00:00':
        if ItemTF.item_purchased == False:
            Random_Item_generator()
    elif current_time >= '10:00:00':
        if ItemTF.item_purchased == False:
            Random_Item_generator()
    elif current_time >= '11:00:00':
        if ItemTF.item_purchased == False:
            Random_Item_generator()
    elif current_time >= '12:00:00':
        if ItemTF.item_purchased == False:
            Random_Item_generator()
    elif current_time >= '13:00:00':
        if ItemTF.item_purchased == False:
            Random_Item_generator()
    elif current_time >= '14:00:00':
        if ItemTF.item_purchased == False:
            Random_Item_generator()
    elif current_time >= '15:00:00':
        if ItemTF.item_purchased == False:
            Random_Item_generator()
    elif current_time >= '16:00:00':
        if ItemTF.item_purchased == False:
            Random_Item_generator()
    elif current_time >= '17:00:00':
        if ItemTF.item_purchased == False:
            Random_Item_generator()
    elif current_time >= '18:00:00':
        if ItemTF.item_purchased == False:
            Random_Item_generator()
    elif current_time >= '19:00:00':
        if ItemTF.item_purchased == False:
            Random_Item_generator()
    elif current_time >= '20:00:00':
        if ItemTF.item_purchased == False:
            Random_Item_generator()
    elif current_time >= '21:00:00':
        if ItemTF.item_purchased == False:
            Random_Item_generator()
    elif current_time >= '22:00:00':
        if ItemTF.item_purchased == False:
            Random_Item_generator()
    elif current_time >= '23:00:00':
        if ItemTF.item_purchased == False:
            Random_Item_generator()


#############################
#### Player class ####
#############################

class Player:
    def __init__(self):
        self.name = ''
        self.job = ''
        self.Class = []
        self.level = 1
        self.xp = 0
        self.equipped_Armour = []
        self.equipped_Greaves = []
        self.equipped_Helmet = []
        self.equipped_Gauntlet = []
        self.equipped_Shield = []
        self.equipped_Weapon = []
        self.equipped_spell = []
        self.equipped_Ranged = []
        self.equipped_Arrow = []
        self.equipped_Pet = []
        self.inventory = ['Rusty Sword'
                          '']
        self.Inventory_size = 15
        self.hp = 25
        self.max_hp = 25
        self.mp = 5
        self.max_mp = 5
        self.armour_rating = 0
        self.status_effects = []
        self.attack = 0
        self.Magic_attack = 0
        self.luck = 0
        self.Acrobatics = 0
        self.Agility = 0
        self.location = 'BedRoom_House6'#BedRoom_House6
        self.game_over = False
        self.Charisma = 0
        self.quiver = []

    def Damage_player(self, amount):
        self.hp -= amount

    def Heal_player(self, amount):
        self.hp += amount

    def Health_player(self, amount):
        return self.hp >= amount

    def Reduce_mp(self, amount):
        self.mp -= amount

    def Gain_mp(self, amount):
        self.mp += amount

    def MP_Player(self, amount):
        return self.mp >= amount

    def XP_DOWN(self, amount):
        self.xp -= amount

    def XP_UP(self, amount):
        self.xp += amount

    def PLAYER_XP_TOTAL(self, amount):
        return self.xp >= amount


myPlayer = Player()
##########################Areamap saving
def save_dict_areamap():
    with open('dict_areamap.txt', 'w') as f:
        json.dump(areamap, f)


def load_dict_areamap():
    global areamap
    # loading from file
    with open('dict_areamap.txt', 'r') as f:
        areamap = json.load(f)
##########################Potion saving
def save_dict_potion():
    with open('dict_Potion.txt', 'w') as f:
        json.dump(Potion, f)


def load_dict_potion():
    global Potion
    # loading from file
    with open('dict_Potion.txt', 'r') as f:
        Potion = json.load(f)

##########################Gear saving

def save_dict_gear():
    with open('dict_Gear.txt', 'w') as f:
        json.dump(Gear, f)


def load_dict_gear():
    global Gear
    # loading from file
    with open('dict_Gear.txt', 'r') as f:
        Gear = json.load(f)


##################################Spells Saving
def save_dict_Spells():
    with open('dict_Spells.txt', 'w') as f:
        json.dump(Spells, f)


def load_dict_Spells():
    # loading from file
    global Spells
    with open('dict_Spells.txt', 'r') as f:
        Spells = json.load(f)


##################################Weapons Saving
def save_dict_Weapons():
    with open('dict_Weapons.txt', 'w') as f:
        json.dump(Weapons, f)


def load_dict_Weapons():
    global Weapons
    # loading from file
    with open('dict_Weapons.txt', 'r') as f:
        Weapons = json.load(f)


##################################Ranged Saving

def save_dict_Ranged():
    with open('dict_Ranged.txt', 'w') as f:
        json.dump(Ranged, f)


def load_dict_Ranged():
    global Ranged
    # loading from file
    with open('dict_Ranged.txt', 'r') as f:
        Ranged = json.load(f)


##################################Mission Saving
def save_dict_Mission():
    with open('dict_Mission.txt', 'w') as f:
        json.dump(Missions, f)


def load_dict_Mission():
    global Missions
    # loading from file
    with open('dict_Mission.txt', 'r') as f:
        Missions = json.load(f)


def save():
    with open('Aden.txt', 'w') as outfile:
        json.dump(Saving, outfile)
        print_medeum('Saving...')
        # start
        Saving['Player'][SAVENAME] = myPlayer.name
        Saving['Player'][JOB] = myPlayer.job
        Saving['Player'][CLASS] = myPlayer.Class
        Saving['Player'][LEVEL] = myPlayer.level
        Saving['Player'][XP] = myPlayer.xp
        Saving['Player'][EQUIPPED_ARMOUR] = myPlayer.equipped_Armour
        Saving['Player'][EQUIPPED_GREAVES] = myPlayer.equipped_Greaves
        Saving['Player'][EQUIPPED_HELMET] = myPlayer.equipped_Helmet
        Saving['Player'][EQUIPPED_GAUNTLETS] = myPlayer.equipped_Gauntlet
        Saving['Player'][EQUIPPED_SHIELD] = myPlayer.equipped_Shield
        Saving['Player'][EQUIPPED_WEAPON] = myPlayer.equipped_Weapon
        Saving['Player'][EQUIPPED_SPELL] = myPlayer.equipped_spell
        Saving['Player'][EQUIPPED_RANGED] = myPlayer.equipped_Ranged
        Saving['Player'][EQUIPPED_PET] = myPlayer.equipped_Pet
        Saving['Player'][INVENTORY] = myPlayer.inventory
        Saving['Player'][INVENTORY_SIZE] = myPlayer.Inventory_size
        Saving['Player'][PLAYERHP] = myPlayer.hp
        Saving['Player'][MAX_HP] = myPlayer.max_hp
        Saving['Player'][MP] = myPlayer.mp
        Saving['Player'][MAX_MP] = myPlayer.max_mp
        Saving['Player'][ARMOUR_RATING] = armour_value.armour
        Saving['Player'][STATUS_EFFECTS] = myPlayer.status_effects
        Saving['Player'][PLAYER_ATTACK] = myPlayer.attack
        Saving['Player'][MAGIC_ATTACK] = myPlayer.Magic_attack
        Saving['Player'][LUCK] = myPlayer.luck
        Saving['Player'][ACROBATICS] = myPlayer.Acrobatics
        Saving['Player'][AGILITY] = myPlayer.Agility
        Saving['Player'][LOCATION] = myPlayer.location
        Saving['Player'][CANLOAD] = True
        Saving['Player'][ATTPOINTS] = my_points.balance
        Saving['Player'][CHARISMA] = myPlayer.Charisma
        Saving['Player'][STRENGTH_att] = Total_attribute_points.Strength
        Saving['Player'][DEXTERITY_att] = Total_attribute_points.Dexterity
        Saving['Player'][CONSTITUTION_att] = Total_attribute_points.Constitution
        Saving['Player'][INTELLIGENCE_att] = Total_attribute_points.Intelligence
        Saving['Player'][WISDOM_att] = Total_attribute_points.Wisdom
        Saving['Player'][CHARISMA_att] = Total_attribute_points.Charisma
        Saving['Player'][WALLET] = my_wallet.balance
        Saving['Player'][BASESTORAGE] = Player_base.Storage
        Saving['Player'][ARROWS] = weapon_loaded.arrow
        Saving['Player'][MISSION_COMPLETED_SAVE1] = Missions['Mission 1'][COMPLETED]
        Saving['Player'][MISSION_REWARD_SAVE1] = Missions['Mission 1'][MISSION_REWARD]
        Saving['Player'][MISSION_COMPLETED_SAVE2] = Missions['Mission 2'][COMPLETED]
        Saving['Player'][MISSION_REWARD_SAVE2] = Missions['Mission 2'][MISSION_REWARD]
        Saving['Player'][MISSION_COMPLETED_SAVE3] = Missions['Mission 3'][COMPLETED]
        Saving['Player'][MISSION_REWARD_SAVE3] = Missions['Mission 3'][MISSION_REWARD]
        Saving['Player'][MISSION_COMPLETED_SAVE4] = Missions['Mission 4'][COMPLETED]
        Saving['Player'][MISSION_REWARD_SAVE4] = Missions['Mission 4'][MISSION_REWARD]
        Saving['Player'][MISSION_COMPLETED_SAVE5] = Missions['Mission 5'][COMPLETED]
        Saving['Player'][MISSION_REWARD_SAVE5] = Missions['Mission 5'][MISSION_REWARD]
        Saving['Player'][ACTIVE1] = Missions['Mission 1'][ACTIVE]
        Saving['Player'][ACTIVE2] = Missions['Mission 2'][ACTIVE]
        Saving['Player'][ACTIVE3] = Missions['Mission 3'][ACTIVE]
        Saving['Player'][ACTIVE4] = Missions['Mission 4'][ACTIVE]
        Saving['Player'][ACTIVE5] = Missions['Mission 5'][ACTIVE]
        Saving['Player'][MET_ANNESHEPAHRD] = NPC.metAnneShephard
        Saving['Player'][MET_KLAUSMULLER] = NPC.metKlausMuller
        Saving['Player'][ITEM_1] = areamap['LivingRoom_House12'][ITEM_EXIST]
        Saving['Player'][ITEM_2] = areamap['Garden15'][ITEM_EXIST]
        Saving['Player'][ITEM_3] = areamap['Foyer_House3'][ITEM_EXIST]
        Saving['Player'][ITEM_4] = areamap['Guest Research'][ITEM_EXIST]
        Saving['Player'][SAVE_FILE] = Game_name.save
        Saving['Player'][Imoogi_XP] = Pet['Imoogi'][EXP]
        Saving['Player'][Gyo_XP] = Pet['Gyo'][EXP]
        Saving['Player'][Bolla_XP] = Pet['Bolla'][EXP]
        Saving['Player'][Balaur_XP] = Pet['Balaur'][EXP]
        Saving['Player'][Imoogi_LEVEL] = Pet['Imoogi'][PLEVEL]
        Saving['Player'][Gyo_LEVEL] = Pet['Gyo'][PLEVEL]
        Saving['Player'][Bolla_LEVEL] = Pet['Bolla'][PLEVEL]
        Saving['Player'][Balaur_LEVEL] = Pet['Balaur'][PLEVEL]
        Saving['Player'][Imoogi_effect] = Pet['Imoogi'][MP_add]
        Saving['Player'][Gyo_effect] = Pet['Gyo'][HP_add]
        Saving['Player'][Bolla_effect] = Pet['Bolla'][ATTACK_add]
        Saving['Player'][Balaur_effect] = Pet['Balaur'][MP_attack_add]
        Saving['Player'][PLAYER_EQUIPPED_ARROW] = myPlayer.equipped_Arrow
        Saving['Player'][PLAYER_QUIVER] = myPlayer.quiver
        Saving['Player'][PUZZLE_DEPRESSION] = puzzle.Depression
        Saving['Player'][HOUSE_DOOR] = areamap['Foyer_House1'][EAST]
        Saving['Player'][LOCKED_CHEST_1] = locked_chest.state1
        Saving['Player'][BYSTANDER5] = Storage.Bystander5
        # end
        value.Load_game = True
        print_medeum("Done!\n")
        input("Press ENTER to continue")
        for x in Saving:
            print(x)
            for y in Saving[x]:
                print(y, ':', Saving[x][y])
        input("Press ENTER to continue")


def load():
    with open('Aden.txt') as json_file:
        Saving = json.load(json_file)
        # start
        myPlayer.name = Saving['Player'][SAVENAME]
        myPlayer.job = Saving['Player'][JOB]
        myPlayer.Class = Saving['Player'][CLASS]
        myPlayer.level = Saving['Player'][LEVEL]
        myPlayer.xp = Saving['Player'][XP]
        myPlayer.equipped_Armour = Saving['Player'][EQUIPPED_ARMOUR]
        myPlayer.equipped_Greaves = Saving['Player'][EQUIPPED_GREAVES]
        myPlayer.equipped_Helmet = Saving['Player'][EQUIPPED_HELMET]
        myPlayer.equipped_Gauntlet = Saving['Player'][EQUIPPED_GAUNTLETS]
        myPlayer.equipped_Shield = Saving['Player'][EQUIPPED_SHIELD]
        myPlayer.equipped_Weapon = Saving['Player'][EQUIPPED_WEAPON]
        myPlayer.equipped_spell = Saving['Player'][EQUIPPED_SPELL]
        myPlayer.equipped_Ranged = Saving['Player'][EQUIPPED_RANGED]
        myPlayer.equipped_Pet = Saving['Player'][EQUIPPED_PET]
        myPlayer.inventory = Saving['Player'][INVENTORY]
        myPlayer.Inventory_size = Saving['Player'][INVENTORY_SIZE]
        myPlayer.hp = Saving['Player'][PLAYERHP]
        myPlayer.max_hp = Saving['Player'][MAX_HP]
        myPlayer.mp = Saving['Player'][MP]
        myPlayer.max_mp = Saving['Player'][MAX_MP]
        armour_value.armour = Saving['Player'][ARMOUR_RATING]
        myPlayer.status_effects = Saving['Player'][STATUS_EFFECTS]
        myPlayer.attack = Saving['Player'][PLAYER_ATTACK]
        myPlayer.Magic_attack = Saving['Player'][MAGIC_ATTACK]
        myPlayer.luck = Saving['Player'][LUCK]
        myPlayer.Acrobatics = Saving['Player'][ACROBATICS]
        myPlayer.Agility = Saving['Player'][AGILITY]
        myPlayer.location = Saving['Player'][LOCATION]
        my_points.balance = Saving['Player'][ATTPOINTS]
        myPlayer.Charisma = Saving['Player'][CHARISMA]
        Total_attribute_points.Strength = Saving['Player'][STRENGTH_att]
        Total_attribute_points.Dexterity = Saving['Player'][DEXTERITY_att]
        Total_attribute_points.Constitution = Saving['Player'][CONSTITUTION_att]
        Total_attribute_points.Intelligence = Saving['Player'][INTELLIGENCE_att]
        Total_attribute_points.Wisdom = Saving['Player'][WISDOM_att]
        Total_attribute_points.Charisma = Saving['Player'][CHARISMA_att]
        my_wallet.balance = Saving['Player'][WALLET]
        Player_base.Storage = Saving['Player'][BASESTORAGE]
        weapon_loaded.arrow = Saving['Player'][ARROWS]
        Missions['Mission 1'][COMPLETED] = Saving['Player'][MISSION_COMPLETED_SAVE1]
        Missions['Mission 1'][MISSION_REWARD] = Saving['Player'][MISSION_REWARD_SAVE1]
        Missions['Mission 2'][COMPLETED] = Saving['Player'][MISSION_COMPLETED_SAVE2]
        Missions['Mission 2'][MISSION_REWARD] = Saving['Player'][MISSION_REWARD_SAVE2]
        Missions['Mission 3'][COMPLETED] = Saving['Player'][MISSION_COMPLETED_SAVE3]
        Missions['Mission 3'][MISSION_REWARD] = Saving['Player'][MISSION_REWARD_SAVE3]
        Missions['Mission 4'][COMPLETED] = Saving['Player'][MISSION_COMPLETED_SAVE4]
        Missions['Mission 4'][MISSION_REWARD] = Saving['Player'][MISSION_REWARD_SAVE4]
        Missions['Mission 5'][COMPLETED] = Saving['Player'][MISSION_COMPLETED_SAVE5]
        Missions['Mission 5'][MISSION_REWARD] = Saving['Player'][MISSION_REWARD_SAVE5]
        Missions['Mission 1'][ACTIVE] = Saving['Player'][ACTIVE1]
        Missions['Mission 2'][ACTIVE] = Saving['Player'][ACTIVE2]
        Missions['Mission 3'][ACTIVE] = Saving['Player'][ACTIVE3]
        Missions['Mission 4'][ACTIVE] = Saving['Player'][ACTIVE4]
        Missions['Mission 5'][ACTIVE] = Saving['Player'][ACTIVE5]

        NPC.metAnneShephard = Saving['Player'][MET_ANNESHEPAHRD]
        NPC.metKlausMuller = Saving['Player'][MET_KLAUSMULLER]
        areamap['LivingRoom_House12'][ITEM_EXIST] = Saving['Player'][ITEM_1]
        areamap['Garden15'][ITEM_EXIST] = Saving['Player'][ITEM_2]
        areamap['Foyer_House3'][ITEM_EXIST] = Saving['Player'][ITEM_3]
        areamap['Guest Research'][ITEM_EXIST] = Saving['Player'][ITEM_4]
        Game_name.save = Saving['Player'][SAVE_FILE]
        Pet['Imoogi'][EXP] = Saving['Player'][Imoogi_XP]
        Pet['Gyo'][EXP] = Saving['Player'][Gyo_XP]
        Pet['Bolla'][EXP] = Saving['Player'][Bolla_XP]
        Pet['Balaur'][EXP] = Saving['Player'][Balaur_XP]
        Pet['Imoogi'][PLEVEL] = Saving['Player'][Imoogi_LEVEL]
        Pet['Gyo'][PLEVEL] = Saving['Player'][Gyo_LEVEL]
        Pet['Bolla'][PLEVEL] = Saving['Player'][Bolla_LEVEL]
        Pet['Balaur'][PLEVEL] = Saving['Player'][Balaur_LEVEL]
        Pet['Imoogi'][MP_add] = Saving['Player'][Imoogi_effect]
        Pet['Gyo'][HP_add] = Saving['Player'][Gyo_effect]
        Pet['Bolla'][ATTACK_add] = Saving['Player'][Bolla_effect]
        Pet['Balaur'][MP_attack_add] = Saving['Player'][Balaur_effect]
        myPlayer.equipped_Arrow = Saving['Player'][PLAYER_EQUIPPED_ARROW]
        myPlayer.quiver = Saving['Player'][PLAYER_QUIVER]
        puzzle.Depression = Saving['Player'][PUZZLE_DEPRESSION]
        areamap['Foyer_House1'][EAST] = Saving['Player'][HOUSE_DOOR]
        locked_chest.state1 = Saving['Player'][LOCKED_CHEST_1]
        Storage.Bystander5 = Saving['Player'][BYSTANDER5]

        missions_toggle()


        # end
        prompt()
        print(Item)


def assign_saves():
    Saving['Player'][SAVENAME] = myPlayer.name
    Saving['Player'][JOB] = myPlayer.job
    Saving['Player'][CLASS] = myPlayer.Class
    Saving['Player'][LEVEL] = myPlayer.level
    Saving['Player'][XP] = myPlayer.xp
    Saving['Player'][EQUIPPED_ARMOUR] = myPlayer.equipped_Armour
    Saving['Player'][EQUIPPED_GREAVES] = myPlayer.equipped_Greaves
    Saving['Player'][EQUIPPED_HELMET] = myPlayer.equipped_Helmet
    Saving['Player'][EQUIPPED_GAUNTLETS] = myPlayer.equipped_Gauntlet
    Saving['Player'][EQUIPPED_SHIELD] = myPlayer.equipped_Shield
    Saving['Player'][EQUIPPED_WEAPON] = myPlayer.equipped_Weapon
    Saving['Player'][EQUIPPED_SPELL] = myPlayer.equipped_spell
    Saving['Player'][EQUIPPED_RANGED] = myPlayer.equipped_Ranged
    Saving['Player'][EQUIPPED_PET] = myPlayer.equipped_Pet
    Saving['Player'][INVENTORY] = myPlayer.inventory
    Saving['Player'][INVENTORY_SIZE] = myPlayer.Inventory_size
    Saving['Player'][PLAYERHP] = myPlayer.hp
    Saving['Player'][MAX_HP] = myPlayer.max_hp
    Saving['Player'][MP] = myPlayer.mp
    Saving['Player'][MAX_MP] = myPlayer.max_mp
    Saving['Player'][ARMOUR_RATING] = armour_value.armour
    Saving['Player'][STATUS_EFFECTS] = myPlayer.status_effects
    Saving['Player'][PLAYER_ATTACK] = myPlayer.attack
    Saving['Player'][MAGIC_ATTACK] = myPlayer.Magic_attack
    Saving['Player'][LUCK] = myPlayer.luck
    Saving['Player'][ACROBATICS] = myPlayer.Acrobatics
    Saving['Player'][AGILITY] = myPlayer.Agility
    Saving['Player'][LOCATION] = myPlayer.location
    Saving['Player'][CANLOAD] = value.Load_game
    Saving['Player'][ATTPOINTS] = my_points.balance
    Saving['Player'][CHARISMA] = myPlayer.Charisma
    Saving['Player'][STRENGTH_att] = Total_attribute_points.Strength
    Saving['Player'][DEXTERITY_att] = Total_attribute_points.Dexterity
    Saving['Player'][CONSTITUTION_att] = Total_attribute_points.Constitution
    Saving['Player'][INTELLIGENCE_att] = Total_attribute_points.Intelligence
    Saving['Player'][WISDOM_att] = Total_attribute_points.Wisdom
    Saving['Player'][CHARISMA_att] = Total_attribute_points.Charisma
    Saving['Player'][WALLET] = my_wallet.balance
    Saving['Player'][BASESTORAGE] = Player_base.Storage
    Saving['Player'][ARROWS] = weapon_loaded.arrow
    ############################################################################
    Saving['Player'][MISSION_COMPLETED_SAVE1] = Missions['Mission 1'][COMPLETED]
    Saving['Player'][MISSION_REWARD_SAVE1] = Missions['Mission 1'][MISSION_REWARD]
    Saving['Player'][MISSION_COMPLETED_SAVE2] =Missions['Mission 2'][COMPLETED]
    Saving['Player'][MISSION_REWARD_SAVE2] = Missions['Mission 2'][MISSION_REWARD]
    Saving['Player'][MISSION_COMPLETED_SAVE3] = Missions['Mission 3'][COMPLETED]
    Saving['Player'][MISSION_REWARD_SAVE3] = Missions['Mission 3'][MISSION_REWARD]
    Saving['Player'][MISSION_COMPLETED_SAVE4] = Missions['Mission 4'][COMPLETED]
    Saving['Player'][MISSION_REWARD_SAVE4] = Missions['Mission 4'][MISSION_REWARD]
    Saving['Player'][MISSION_COMPLETED_SAVE5] = Missions['Mission 5'][COMPLETED]
    Saving['Player'][MISSION_REWARD_SAVE5] = Missions['Mission 5'][MISSION_REWARD]
    Saving['Player'][ACTIVE1] =  Missions['Mission 1'][ACTIVE]
    Saving['Player'][ACTIVE2] =  Missions['Mission 2'][ACTIVE]
    Saving['Player'][ACTIVE3] =  Missions['Mission 3'][ACTIVE]
    Saving['Player'][ACTIVE4] = Missions['Mission 4'][ACTIVE]
    Saving['Player'][ACTIVE5] = Missions['Mission 5'][ACTIVE]
    #############################################################################

    Saving['Player'][MET_ANNESHEPAHRD] = NPC.metAnneShephard
    Saving['Player'][MET_KLAUSMULLER] = NPC.metKlausMuller
    Saving['Player'][ITEM_1] = areamap['LivingRoom_House12'][ITEM_EXIST]
    Saving['Player'][ITEM_2] = areamap['Garden15'][ITEM_EXIST]
    Saving['Player'][ITEM_3] = areamap['Foyer_House3'][ITEM_EXIST]
    Saving['Player'][ITEM_4] = areamap['Guest Research'][ITEM_EXIST]
    Saving['Player'][SAVE_FILE] = Game_name.save
    Saving['Player'][Imoogi_XP] = Pet['Imoogi'][EXP]
    Saving['Player'][Gyo_XP] = Pet['Gyo'][EXP]
    Saving['Player'][Bolla_XP] = Pet['Bolla'][EXP]
    Saving['Player'][Balaur_XP] = Pet['Balaur'][EXP]
    Saving['Player'][Imoogi_LEVEL] = Pet['Imoogi'][PLEVEL]
    Saving['Player'][Gyo_LEVEL] = Pet['Gyo'][PLEVEL]
    Saving['Player'][Bolla_LEVEL] = Pet['Bolla'][PLEVEL]
    Saving['Player'][Balaur_LEVEL] = Pet['Balaur'][PLEVEL]
    Saving['Player'][Imoogi_effect] = Pet['Imoogi'][MP_add]
    Saving['Player'][Gyo_effect] = Pet['Gyo'][HP_add]
    Saving['Player'][Bolla_effect] = Pet['Bolla'][ATTACK_add]
    Saving['Player'][Balaur_effect] = Pet['Balaur'][MP_attack_add]
    Saving['Player'][PLAYER_EQUIPPED_ARROW] = myPlayer.equipped_Arrow
    Saving['Player'][PLAYER_QUIVER] = myPlayer.quiver
    Saving['Player'][PUZZLE_DEPRESSION] = puzzle.Depression
    Saving['Player'][HOUSE_DOOR] = areamap['Foyer_House1'][EAST]
    Saving['Player'][LOCKED_CHEST_1] = locked_chest.state1
    Saving['Player'][BYSTANDER5] = Storage.Bystander5

SAVENAME = 'Name'
JOB = "Job"
CLASS = "Class"
LEVEL = "Level"
XP = "XP"
EQUIPPED_ARMOUR = "Armour"
EQUIPPED_GREAVES = "Greaves"
EQUIPPED_HELMET = "Helmet"
EQUIPPED_GAUNTLETS = "Gauntlet"
EQUIPPED_SHIELD = "Shield"
EQUIPPED_WEAPON = "Weapon"
EQUIPPED_SPELL = "Spell"
EQUIPPED_RANGED = "Ranged"
EQUIPPED_PET = "Companion"
INVENTORY = "Inventory"
INVENTORY_SIZE = "Inventory Size"
PLAYERHP = "Health points"
MAX_HP = "Max Health Points"
MP = "Mana Points"
MAX_MP = "Max Mana points"
ARMOUR_RATING = "Armour rating"
STATUS_EFFECTS = "Status Effects"
PLAYER_ATTACK = "Attack"
MAGIC_ATTACK = "Magic Attack"
LUCK = "Luck"
ACROBATICS = "Acrobatics"
AGILITY = "Agility"
LOCATION = "Location"
CANLOAD = 'can load'
ATTPOINTS = 'Attribute Points'
MISSION_COMPLETED_SAVE1 = 'Completed Mission 1'
MISSION_REWARD_SAVE1 = 'Reward Mission 1'
MISSION_COMPLETED_SAVE2 = 'Completed Mission 2'
MISSION_REWARD_SAVE2 = 'Reward Mission 2'
MISSION_COMPLETED_SAVE3 = 'Completed Mission 3'
MISSION_REWARD_SAVE3 = 'Reward Mission 3'
MISSION_COMPLETED_SAVE4 = 'Completed Mission 4'
MISSION_REWARD_SAVE4 = 'Reward Mission 4'
MISSION_COMPLETED_SAVE5 = 'Completed Mission 5'
MISSION_REWARD_SAVE5 = 'Reward Mission 5'
ACTIVE1 = 'Active mission 1'
ACTIVE2 = 'Active mission 2'
ACTIVE3 = 'Active mission 3'
ACTIVE4 = 'Active mission 4'
ACTIVE5 = 'Active mission 5'
CHARISMA = 'Charisma'
STRENGTH_att = 'Strength'
DEXTERITY_att = 'Dexterity'
CONSTITUTION_att = 'Constitution'
INTELLIGENCE_att = 'Intelligence'
WISDOM_att = 'Wisdom'
CHARISMA_att = 'Charisma'
WALLET = 'Wallet'
BASESTORAGE = 'Base Storage'
ARROWS = 'Arrows'

MET_ANNESHEPAHRD = 'met NPC anne shephard'
MET_KLAUSMULLER = 'met klaus muller'
ITEM_1 = 'Camera'
ITEM_2 = 'Key'
ITEM_3 = 'Letter'
ITEM_4 = 'mysterious map g'
SAVE_FILE = 'Save File name'
Imoogi_XP = 'Imoogi XP'
Gyo_XP = 'Gyo XP'
Bolla_XP = 'Bolla XP'
Balaur_XP = 'Balaur XP'
Imoogi_LEVEL = 'Imoogi LEVEL'
Gyo_LEVEL = 'Gyo LEVEL'
Bolla_LEVEL = 'Bolla LEVEL'
Balaur_LEVEL = 'Balaur LEVEL'
Imoogi_effect = 'Imoogi Effect'
Gyo_effect = ' Gyo Effect'
Bolla_effect = ' bolla Effect'
Balaur_effect = ' Balaur Effect'
PLAYER_QUIVER = 'player quiver'
PLAYER_EQUIPPED_ARROW = 'Equipped arrow'
PUZZLE_DEPRESSION = 'Depression in first cave'
HOUSE_DOOR = 'Locked house door'
LOCKED_CHEST_1 = 'First locked chest bedroom'
BYSTANDER5 = 'Bystander NPC storage'

Saving = {
    'Player': {
        SAVENAME: '',
        JOB: '',
        CLASS: '',
        LEVEL: 0,
        XP: 0,
        EQUIPPED_ARMOUR: '',
        EQUIPPED_GREAVES: '',
        EQUIPPED_HELMET: '',
        EQUIPPED_GAUNTLETS: '',
        EQUIPPED_SHIELD: '',
        EQUIPPED_WEAPON: '',
        EQUIPPED_SPELL: '',
        EQUIPPED_RANGED: '',
        EQUIPPED_PET: '',
        INVENTORY: [''],
        INVENTORY_SIZE: 0,
        PLAYERHP: 0,
        MAX_HP: 0,
        MP: 0,
        MAX_MP: 0,
        ARMOUR_RATING: 0,
        STATUS_EFFECTS: '',
        PLAYER_ATTACK: 0,
        MAGIC_ATTACK: 0,
        LUCK: 0,
        ACROBATICS: 0,
        AGILITY: 0,
        LOCATION: '',
        CANLOAD: True,
        ATTPOINTS: 0,
        MISSION_COMPLETED_SAVE1: False,
        MISSION_REWARD_SAVE1: False,
        MISSION_COMPLETED_SAVE2: False,
        MISSION_REWARD_SAVE2: False,
        MISSION_COMPLETED_SAVE3: False,
        MISSION_REWARD_SAVE3: False,
        MISSION_COMPLETED_SAVE4: False,
        MISSION_REWARD_SAVE4: False,
        MISSION_COMPLETED_SAVE5:False,
        MISSION_REWARD_SAVE5:False,
        ACTIVE1: True,
        ACTIVE2: False,
        ACTIVE3: False,
        ACTIVE4: False,
        ACTIVE5: False,
        CHARISMA: 0,
        STRENGTH_att: 0,
        DEXTERITY_att: 0,
        CONSTITUTION_att: 0,
        INTELLIGENCE_att: 0,
        WISDOM_att: 0,
        CHARISMA_att: 0,
        WALLET: 0,
        BASESTORAGE: [''],
        ARROWS: 0,

        MET_ANNESHEPAHRD: False,
        MET_KLAUSMULLER:False,
        ITEM_1: True,
        ITEM_2: True,
        ITEM_3: True,
        ITEM_4: True,
        SAVE_FILE:'',
        Imoogi_XP: 0,
        Gyo_XP: 0,
        Bolla_XP: 0,
        Balaur_XP: 0,
        Imoogi_LEVEL: 1,
        Gyo_LEVEL: 1,
        Bolla_LEVEL: 1,
        Balaur_LEVEL: 1,
        Imoogi_effect:0,
        Gyo_effect:0,
        Bolla_effect:0,
        Balaur_effect:0,
        PLAYER_QUIVER: '',
        PLAYER_EQUIPPED_ARROW: '',
        PUZZLE_DEPRESSION:'',
        HOUSE_DOOR: True,
        LOCKED_CHEST_1: False,
        BYSTANDER5: '',

},
}


##########
class GameObjects:
    def __init__(self):
        self.Key = False
        self.Lamp = False


Game_Objects = GameObjects()


class Potion:
    def __init__(self):
        self.small = myPlayer.max_hp / 10
        self.medium = myPlayer.max_hp / 12
        self.large = myPlayer.max_hp / 14


health_potion = Potion()

def print_files():
    for root, dirs, files in os.walk("."):
        for filename in files:
            print(filename)



class MPpotion:
    def __init__(self):
        self.small = myPlayer.max_mp / 2
        self.medium = myPlayer.max_mp / 4
        self.large = myPlayer.max_mp / 6


magic_potion = MPpotion()
class Game_save_name:
    def __init__(self):
        self.save = ''
        self.load = ''
Game_name = Game_save_name()
########## title screen ########
def title_screen_selections():
    option = input("><> ")
    if option.lower() in ["|         -new game-            |", "new game"]:
        prompt()
        time.sleep(1.0)
        winsound.PlaySound("C:\hit_play.wav", winsound.SND_ASYNC)
        setup_game()  # place holder for a function

    elif option.lower() in ["|         -help-            |", "help"]:
        help()
    elif option.lower() in ["|         -quit-            |", "quit"]:
        sys.exit()
    elif option.lower() in ["|         -load-            |", "load"]:
        load_dict_Ranged()
        load_dict_gear()
        load_dict_Spells()
        load_dict_Weapons()
        load_dict_Mission()
        load_dict_potion()
        load_dict_areamap()
        load()



    while option.lower() not in ['|        -new game-            |', 'new game', '|         -help-            |',
                                 'help',
                                 '|         -quit-            |', 'quit']:
        print("Type load or new game\n")
        option = input("><> ")
        if option.lower() in ["|         -new game-            |", "new game"]:

            time.sleep(1.0)
            winsound.PlaySound("C:\hit_play.wav", winsound.SND_ASYNC)
            setup_game()  # place holder for a function

        elif option.lower() in ["|         -help-            |", "help"]:
            help()
        elif option.lower() in ["|         -quit-            |", "quit"]:
            sys.exit()
        elif option.lower() in ["|         -load-            |", "load"]:
            load_dict_Ranged()
            load_dict_gear()
            load_dict_Spells()
            load_dict_Weapons()
            load_dict_Mission()
            load_dict_potion()
            load_dict_areamap()
            load()




production = """



  (                                          (   (               )  
   )\                 (     (     (   (     ( )\  )\    )      ( /(  
 (((_)   (    (     ( )\   ))\   ))\  )(    )((_)((_)( /(  (   )\()) 
 )\___   )\   )\ )  )(( ) /((_) /((_)(()\  ((_)_  _  )(_)) )\ (_))/  
((/ __| ((_) _(_/( ((_)_)(_))( (_))   ((_)  | _ )| |((_)_ ((_)| |_   
 | (__ / _ \| ' \))/ _` || || |/ -_) | '_|  | _ \| |/ _` |(_-<|  _|  
  \___|\___/|_||_| \__, | \_,_|\___| |_|    |___/|_|\__,_|/__/ \__|  
                      |_|                                         

                                                                    (c)
"""

title = """

 ||  '''''/    '||  //'                           ||`                        
'||     //      || //    ''                       ||                         
 ||    //       ||<<      ||  `||''|,  .|''|, .|''||  .|''|, '||),,(|,  (''''
 ||   //        || \ \    ||   ||  ||  ||  || ||  ||  ||  ||  || || ||   `'')
.||. //        .||  \ \. .||. .||  ||. `|..|| `|..||. `|..|' .||    ||. `...'
                                          ||                                
                                       `..|'                               
                                                                                 """


def title_screen():
    # play the sound
    winsound.PlaySound("C:\intro.wav", winsound.SND_ASYNC)
    # stop the sound from closing

    time.sleep(0.1)
    print_fast(production)
    time.sleep(1.0)
    print_slow("Presents...")
    time.sleep(3.0)
    os.system('cls')
    print_fast(title)
    input("Press ENTER to continue")
    time.sleep(0.1)

    os.system('cls')
    print("""
     .--..--..--..--..--..--..--..--..--..--..--..--..--..--..--..--.
    / .. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \.. \ 
    \ \/\ \/\ \/\ \/\ \/\ \/\ \/\ \/\ \/\ \/\ \/\ \/\ \/\ \/\ \/\ \/ /
     \/ /\/ /\/ /\/ /\/ /\/ /\/ /\/ /\/ /\/ /\/ /\/ /\/ /\/ /\/ /\/ /
     / /\/ /`' /`' /`' /`' /`' /`' /`' /`' /`' /`' /`' /`' /`' /\/ /\ 
    / /\ \/`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'\ \/\ \ 
    \ \/\ \                     17 Kingdoms                    /\ \/ /
     \/ /\ \ ------------------------------------------------ / /\/ /
     / /\/ /                    -New game-                    \ \/ /\ 
    / /\ \/                       -Help-                       \ \/\ \ 
    \ \/\ \                       -Load-                       /\ \/ /
     \/ /\ \                      -Quit-                       / /\/ /
     / /\/ /                                                  \ \/ /\ 
    / /\ \/                                                    \ \/\ \ 
    \ \/\ \.--..--..--..--..--..--..--..--..--..--..--..--..--./\ \/ /
     \/ /\/ ../ ../ ../ ../ ../ ../ ../ ../ ../ ../ ../ ../ ../ /\/ /
    / /\/ /\/ /\/ /\/ /\/ /\/ /\/ /\/ /\/ /\/ /\/ /\/ /\/ /\/ /\/ /\ 
   / /\ \/\ \/\ \/\ \/\ \/\ \/\ \/\ \/\ \/\ \/\ \/\ \/\ \/\ \/\ \/\ \ 
   \ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `'\ `' /
    `--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'`--'
Copyright 2017 - 2019, ConquerBlast Games, Inc. All rights reserved.

""")
    title_screen_selections()


def help_menu():
    os.system('cls')
    print("<><─────────><><──────────><>")
    print("><>    - Help Menu -      <><")
    print("<><─────────><><──────────><>")
    print("Type 'help' to see           ")
    print("A list of commands           ")
    print("                             ")
    print("                             ")
    print("                             ")
    print("<><───────────────────────><>")
    title_screen_selections()


class ControlledSpawn:
    def __init__(self):
        self.trigger = True


Can_spawn = ControlledSpawn()


#### Maps for the player locations ####
def Print_map():
#################Dungeon Start#################
    if myPlayer.location =='dungeon_Right1':
        os.system('cls')
        dungeon_Right1()
    elif myPlayer.location =='dungeon_Right2':
        os.system('cls')
        dungeon_Right2()
    elif myPlayer.location =='dungeon_Right3':
        os.system('cls')
        dungeon_Right3()
    elif myPlayer.location =='dungeon_Right4':
        os.system('cls')
        dungeon_Right4()
    elif myPlayer.location =='dungeon_Right5':
        os.system('cls')
        dungeon_Right5()
    elif myPlayer.location =='dungeon_Right6':
        os.system('cls')
        dungeon_Right6()
    elif myPlayer.location =='dungeon_Right7':
        os.system('cls')
        dungeon_Right7()
    elif myPlayer.location =='dungeon_Right8':
        os.system('cls')
        dungeon_Right8()
    elif myPlayer.location =='dungeon_Right9':
        os.system('cls')
        dungeon_Right9()
    elif myPlayer.location =='dungeon_Right10':
        os.system('cls')
        dungeon_Right10()
    elif myPlayer.location =='dungeon_Right11':
        os.system('cls')
        dungeon_Right11()
    elif myPlayer.location =='dungeon_Right12':
        os.system('cls')
        dungeon_Right12()
    elif myPlayer.location =='dungeon_Right13':
        os.system('cls')
        dungeon_Right13()
    elif myPlayer.location =='dungeon_Right14':
        os.system('cls')
        dungeon_Right14()
    elif myPlayer.location =='dungeon_Right15':
        os.system('cls')
        dungeon_Right15()
    elif myPlayer.location =='dungeon_Right16':
        os.system('cls')
        dungeon_Right16()
    elif myPlayer.location =='dungeon_Right17':
        os.system('cls')
        dungeon_Right17()
    elif myPlayer.location =='dungeon_Right18':
        os.system('cls')
        dungeon_Right18()
    elif myPlayer.location =='dungeon_Right19':
        os.system('cls')
        dungeon_Right19()
    elif myPlayer.location =='dungeon_Right20':
        os.system('cls')
        dungeon_Right20()
    elif myPlayer.location =='dungeon_Right21':
        os.system('cls')
        dungeon_Right21()
    elif myPlayer.location =='dungeon_Right22':
        os.system('cls')
        dungeon_Right22()
    elif myPlayer.location =='dungeon_Right23':
        os.system('cls')
        dungeon_Right23()
    elif myPlayer.location =='dungeon_Right24':
        os.system('cls')
        dungeon_Right24()
    elif myPlayer.location =='dungeon_Right25':
        os.system('cls')
        dungeon_Right25()
    elif myPlayer.location =='dungeon_Right26':
        os.system('cls')
        dungeon_Right26()
    elif myPlayer.location =='dungeon_Right27':
        os.system('cls')
        dungeon_Right27()
##################################################

    elif myPlayer.location =='dungeon_Main1':
        os.system('cls')
        dungeon_Main1()
    elif myPlayer.location =='dungeon_Main2':
        os.system('cls')
        dungeon_Main2()
    elif myPlayer.location =='dungeon_Main3':
        os.system('cls')
        dungeon_Main3()
    elif myPlayer.location =='dungeon_Main4':
        os.system('cls')
        dungeon_Main4()
    elif myPlayer.location =='dungeon_Main5':
        os.system('cls')
        dungeon_Main5()
    elif myPlayer.location =='dungeon_Main6':
        os.system('cls')
        dungeon_Main6()
    elif myPlayer.location =='dungeon_Main7':
        os.system('cls')
        dungeon_Main7()
    elif myPlayer.location =='dungeon_Main8':
        os.system('cls')
        dungeon_Main8()
    elif myPlayer.location =='dungeon_Main9':
        os.system('cls')
        dungeon_Main9()
    elif myPlayer.location =='dungeon_Main10':
        os.system('cls')
        dungeon_Main10()
    elif myPlayer.location =='dungeon_Main11':
        os.system('cls')
        dungeon_Main11()
    elif myPlayer.location =='dungeon_Main12':
        os.system('cls')
        dungeon_Main12()
    elif myPlayer.location =='dungeon_Main13':
        os.system('cls')
        dungeon_Main13()
    elif myPlayer.location =='dungeon_Main14':
        os.system('cls')
        dungeon_Main14()
    elif myPlayer.location =='dungeon_Main15':
        os.system('cls')
        dungeon_Main15()
    elif myPlayer.location =='dungeon_Main16':
        os.system('cls')
        dungeon_Main16()
    elif myPlayer.location =='dungeon_Main17':
        os.system('cls')
        dungeon_Main17()
    elif myPlayer.location =='dungeon_Main18':
        os.system('cls')
        dungeon_Main18()
    elif myPlayer.location =='dungeon_Main19':
        os.system('cls')
        dungeon_Main19()
    elif myPlayer.location =='dungeon_Main20':
        os.system('cls')
        dungeon_Main20()
    elif myPlayer.location =='dungeon_Main21':
        os.system('cls')
        dungeon_Main21()
    elif myPlayer.location =='dungeon_Main22':
        os.system('cls')
        dungeon_Main22()
    elif myPlayer.location =='dungeon_Main23':
        os.system('cls')
        dungeon_Main23()
    elif myPlayer.location =='dungeon_Main24':
        os.system('cls')
        dungeon_Main24()
    elif myPlayer.location =='dungeon_Main25':
        os.system('cls')
        dungeon_Main25()
    elif myPlayer.location =='dungeon_Main26':
        os.system('cls')
        dungeon_Main26()
##################################################

    elif myPlayer.location =='dungeon_Bottom_Right1':
        os.system('cls')

        dungeon_Bottom_Right1()
    elif myPlayer.location == 'dungeon_Bottom_Right2':
        os.system('cls')
        dungeon_Bottom_Right2()
    elif myPlayer.location =='dungeon_Bottom_Right3':
        os.system('cls')
        dungeon_Bottom_Right3()
    elif myPlayer.location == 'dungeon_Bottom_Right4':
        os.system('cls')
        dungeon_Bottom_Right4()
    elif myPlayer.location =='dungeon_Bottom_Right5':
        os.system('cls')
        dungeon_Bottom_Right5()
    elif myPlayer.location == 'dungeon_Bottom_Right6':
        os.system('cls')
        dungeon_Bottom_Right6()
    elif myPlayer.location =='dungeon_Bottom_Right7':
        os.system('cls')
        dungeon_Bottom_Right7()
    elif myPlayer.location == 'dungeon_Bottom_Right8':
        os.system('cls')
        dungeon_Bottom_Right8()
    elif myPlayer.location =='dungeon_Bottom_Right9':
        os.system('cls')
        dungeon_Bottom_Right9()
    elif myPlayer.location == 'dungeon_Bottom_Right10':
        os.system('cls')
        dungeon_Bottom_Right10()
    elif myPlayer.location =='dungeon_Bottom_Right11':
        os.system('cls')
        dungeon_Bottom_Right11()
    elif myPlayer.location == 'dungeon_Bottom_Right12':
        os.system('cls')
        dungeon_Bottom_Right12()
    elif myPlayer.location =='dungeon_Bottom_Right13':
        os.system('cls')
        dungeon_Bottom_Right13()
    elif myPlayer.location == 'dungeon_Bottom_Right14':
        os.system('cls')
        dungeon_Bottom_Right14()
    elif myPlayer.location =='dungeon_Bottom_Right15':
        os.system('cls')
        dungeon_Bottom_Right15()
    elif myPlayer.location == 'dungeon_Bottom_Right16':
        os.system('cls')
        dungeon_Bottom_Right16()
    elif myPlayer.location =='dungeon_Bottom_Right17':
        os.system('cls')
        dungeon_Bottom_Right17()
    elif myPlayer.location == 'dungeon_Bottom_Right18':
        os.system('cls')
        dungeon_Bottom_Right18()
    elif myPlayer.location =='dungeon_Bottom_Right19':
        os.system('cls')
        dungeon_Bottom_Right19()
    elif myPlayer.location == 'dungeon_Bottom_Right20':
        os.system('cls')
        dungeon_Bottom_Right20()
    elif myPlayer.location =='dungeon_Bottom_Right21':
        os.system('cls')
        dungeon_Bottom_Right21()
    elif myPlayer.location == 'dungeon_Bottom_Right22':
        os.system('cls')
        dungeon_Bottom_Right22()
##################################################

    elif myPlayer.location =='dungeon_bottom_right_tunnel1':
        os.system('cls')
        dungeon_bottom_right_tunnel1()
    elif myPlayer.location =='dungeon_bottom_right_tunnel2':
        os.system('cls')
        dungeon_bottom_right_tunnel2()
    elif myPlayer.location =='dungeon_bottom_right_tunnel3':
        os.system('cls')
        dungeon_bottom_right_tunnel3()
    elif myPlayer.location =='dungeon_bottom_right_tunnel4':
        os.system('cls')
        dungeon_bottom_right_tunnel4()
    elif myPlayer.location =='dungeon_bottom_right_tunnel5':
        os.system('cls')
        dungeon_bottom_right_tunnel5()
    elif myPlayer.location =='dungeon_bottom_right_tunnel6':
        os.system('cls')
        dungeon_bottom_right_tunnel6()
    elif myPlayer.location =='dungeon_bottom_right_tunnel7':
        os.system('cls')
        dungeon_bottom_right_tunnel7()
##################################################

    elif myPlayer.location =='dungeon_bottom_right_tunnel_miniboss1':
        os.system('cls')

        dungeon_bottom_right_tunnel_miniboss1()
    elif myPlayer.location =='dungeon_bottom_right_tunnel_miniboss2':
        os.system('cls')
        dungeon_bottom_right_tunnel_miniboss2()
    elif myPlayer.location =='dungeon_bottom_right_tunnel_miniboss3':
        os.system('cls')
        dungeon_bottom_right_tunnel_miniboss3()
    elif myPlayer.location =='dungeon_bottom_right_tunnel_miniboss4':
        os.system('cls')
        dungeon_bottom_right_tunnel_miniboss4()
    elif myPlayer.location =='dungeon_bottom_right_tunnel_miniboss5':
        os.system('cls')
        dungeon_bottom_right_tunnel_miniboss5()
    elif myPlayer.location =='dungeon_bottom_right_tunnel_miniboss6':
        os.system('cls')
        dungeon_bottom_right_tunnel_miniboss6()
    elif myPlayer.location =='dungeon_bottom_right_tunnel_miniboss7':
        os.system('cls')
        dungeon_bottom_right_tunnel_miniboss7()
    elif myPlayer.location =='dungeon_bottom_right_tunnel_miniboss8':
        os.system('cls')
        dungeon_bottom_right_tunnel_miniboss8()
    elif myPlayer.location =='dungeon_bottom_right_tunnel_miniboss9':
        os.system('cls')
        dungeon_bottom_right_tunnel_miniboss9()
    elif myPlayer.location =='dungeon_bottom_right_tunnel_miniboss10':
        os.system('cls')
        dungeon_bottom_right_tunnel_miniboss10()
##################################################

    elif myPlayer.location =='dungeon_left1':
        os.system('cls')
        dungeon_left1()
    elif myPlayer.location =='dungeon_left2':
        os.system('cls')
        dungeon_left2()
    elif myPlayer.location =='dungeon_left3':
        os.system('cls')
        dungeon_left3()
    elif myPlayer.location =='dungeon_left4':
        os.system('cls')
        dungeon_left4()
    elif myPlayer.location =='dungeon_left5':
        os.system('cls')
        dungeon_left5()
    elif myPlayer.location =='dungeon_left6':
        os.system('cls')
        dungeon_left6()
    elif myPlayer.location =='dungeon_left7':
        os.system('cls')
        dungeon_left7()
    elif myPlayer.location =='dungeon_left8':
        os.system('cls')
        dungeon_left8()
    elif myPlayer.location =='dungeon_left9':
        os.system('cls')
        dungeon_left9()
##################################################

    elif myPlayer.location =='dungeon_boss_room1':
        os.system('cls')

        dungeon_boss_room1()
    elif myPlayer.location =='dungeon_boss_room2':
        os.system('cls')
        dungeon_boss_room2()
    elif myPlayer.location =='dungeon_boss_room3':
        os.system('cls')
        dungeon_boss_room3()
    elif myPlayer.location =='dungeon_boss_room4':
        os.system('cls')
        dungeon_boss_room4()
    elif myPlayer.location =='dungeon_boss_room5':
        os.system('cls')
        dungeon_boss_room5()
    elif myPlayer.location =='dungeon_boss_room6':
        os.system('cls')
        dungeon_boss_room6()
    elif myPlayer.location =='dungeon_boss_room7':
        os.system('cls')
        dungeon_boss_room7()
    elif myPlayer.location =='dungeon_boss_room8':
        os.system('cls')
        dungeon_boss_room8()
    elif myPlayer.location =='dungeon_boss_room9':
        os.system('cls')
        dungeon_boss_room9()
    elif myPlayer.location =='dungeon_boss_room10':
        os.system('cls')
        dungeon_boss_room10()
    elif myPlayer.location =='dungeon_boss_room11':
        os.system('cls')
        dungeon_boss_room11()
    elif myPlayer.location =='dungeon_boss_room12':
        os.system('cls')
        dungeon_boss_room12()
    elif myPlayer.location =='dungeon_boss_room13':
        os.system('cls')
        dungeon_boss_room13()
    elif myPlayer.location =='dungeon_boss_room14':
        os.system('cls')
        dungeon_boss_room14()
    elif myPlayer.location =='dungeon_boss_room15':
        os.system('cls')
        dungeon_boss_room15()
    elif myPlayer.location =='dungeon_boss_room16':
        os.system('cls')
        dungeon_boss_room16()
    elif myPlayer.location =='dungeon_boss_room17':
        os.system('cls')
        dungeon_boss_room17()
    elif myPlayer.location =='dungeon_boss_room18':
        os.system('cls')
        dungeon_boss_room18()
    elif myPlayer.location =='dungeon_boss_room19':
        os.system('cls')
        dungeon_boss_room19()
    elif myPlayer.location =='dungeon_boss_room20':
        os.system('cls')
        dungeon_boss_room20()
    elif myPlayer.location =='dungeon_boss_room21':
        os.system('cls')
        dungeon_boss_room21()
    elif myPlayer.location =='dungeon_boss_room22':
        os.system('cls')
        dungeon_boss_room22()


#################Wild_Forest Start#################
    elif myPlayer.location == 'Wild_Forest_BottomRight1':
        os.system('cls')
        Wild_Forest_BottomRight1()
    elif myPlayer.location == 'Wild_Forest_BottomRight2':
        os.system('cls')
        Wild_Forest_BottomRight2()
    elif myPlayer.location == 'Wild_Forest_BottomRight3':
        os.system('cls')
        Wild_Forest_BottomRight3()
    elif myPlayer.location == 'Wild_Forest_BottomRight4':
        os.system('cls')
        Wild_Forest_BottomRight4()
    elif myPlayer.location == 'Wild_Forest_BottomRight5':
        os.system('cls')
        Wild_Forest_BottomRight5()
    elif myPlayer.location == 'Wild_Forest_BottomRight6':
        os.system('cls')
        Wild_Forest_BottomRight6()
    elif myPlayer.location == 'Wild_Forest_BottomRight7':
        os.system('cls')
        Wild_Forest_BottomRight7()
    elif myPlayer.location == 'Wild_Forest_BottomRight8':
        os.system('cls')
        Wild_Forest_BottomRight8()
    elif myPlayer.location == 'Wild_Forest_BottomRight9':
        os.system('cls')
        Wild_Forest_BottomRight9()
    elif myPlayer.location == 'Wild_Forest_BottomRight10':
        os.system('cls')
        Wild_Forest_BottomRight10()
    elif myPlayer.location == 'Wild_Forest_BottomRight11':
        os.system('cls')
        Wild_Forest_BottomRight11()
    elif myPlayer.location == 'Wild_Forest_BottomRight12':
        os.system('cls')
        Wild_Forest_BottomRight12()
    elif myPlayer.location == 'Wild_Forest_BottomRight13':
        os.system('cls')
        Wild_Forest_BottomRight13()
    elif myPlayer.location == 'Wild_Forest_BottomRight14':
        os.system('cls')
        Wild_Forest_BottomRight14()
    elif myPlayer.location == 'Wild_Forest_BottomRight15':
        os.system('cls')
        Wild_Forest_BottomRight15()
    elif myPlayer.location == 'Wild_Forest_BottomRight16':
        os.system('cls')
        Wild_Forest_BottomRight16()
    elif myPlayer.location == 'Wild_Forest_BottomRight17':
        os.system('cls')
        Wild_Forest_BottomRight17()
    elif myPlayer.location == 'Wild_Forest_BottomRight18':
        os.system('cls')
        Wild_Forest_BottomRight18()
    elif myPlayer.location == 'Wild_Forest_BottomRight19':
        os.system('cls')
        Wild_Forest_BottomRight19()
    elif myPlayer.location == 'Wild_Forest_BottomRight20':
        os.system('cls')
        Wild_Forest_BottomRight20()
    elif myPlayer.location == 'Wild_Forest_BottomRight21':
        os.system('cls')
        Wild_Forest_BottomRight21()
    elif myPlayer.location == 'Wild_Forest_BottomRight22':
        os.system('cls')
        Wild_Forest_BottomRight22()
    elif myPlayer.location == 'Wild_Forest_BottomRight23':
        os.system('cls')
        Wild_Forest_BottomRight23()
    elif myPlayer.location == 'Wild_Forest_BottomRight24':
        os.system('cls')
        Wild_Forest_BottomRight24()
    elif myPlayer.location == 'Wild_Forest_BottomRight25':
        os.system('cls')
        Wild_Forest_BottomRight25()
    elif myPlayer.location == 'Wild_Forest_BottomRight26':
        os.system('cls')
        Wild_Forest_BottomRight26()
    elif myPlayer.location == 'Wild_Forest_BottomRight27':
        os.system('cls')
        Wild_Forest_BottomRight27()
    elif myPlayer.location == 'Wild_Forest_BottomRight28':
        os.system('cls')
        Wild_Forest_BottomRight28()
    elif myPlayer.location == 'Wild_Forest_BottomRight29':
        os.system('cls')
        Wild_Forest_BottomRight29()
    elif myPlayer.location == 'Wild_Forest_BottomRight30':
        os.system('cls')
        Wild_Forest_BottomRight30()
    ###############################################################
    elif myPlayer.location == 'Wild_Forest_BottomLeft1':
        os.system('cls')
        Wild_Forest_BottomLeft1()
    elif myPlayer.location == 'Wild_Forest_BottomLeft2':
        os.system('cls')
        Wild_Forest_BottomLeft2()
    elif myPlayer.location == 'Wild_Forest_BottomLeft3':
        os.system('cls')
        Wild_Forest_BottomLeft3()
    elif myPlayer.location == 'Wild_Forest_BottomLeft4':
        os.system('cls')
        Wild_Forest_BottomLeft4()
    elif myPlayer.location == 'Wild_Forest_BottomLeft5':
        os.system('cls')
        Wild_Forest_BottomLeft5()
    elif myPlayer.location == 'Wild_Forest_BottomLeft6':
        os.system('cls')
        Wild_Forest_BottomLeft6()
    elif myPlayer.location == 'Wild_Forest_BottomLeft7':
        os.system('cls')
        Wild_Forest_BottomLeft7()
    elif myPlayer.location == 'Wild_Forest_BottomLeft8':
        os.system('cls')
        Wild_Forest_BottomLeft8()
    elif myPlayer.location == 'Wild_Forest_BottomLeft9':
        os.system('cls')
        Wild_Forest_BottomLeft9()
    elif myPlayer.location == 'Wild_Forest_BottomLeft10':
        os.system('cls')
        Wild_Forest_BottomLeft10()
    elif myPlayer.location == 'Wild_Forest_BottomLeft11':
        os.system('cls')
        Wild_Forest_BottomLeft11()
    elif myPlayer.location == 'Wild_Forest_BottomLeft12':
        os.system('cls')
        Wild_Forest_BottomLeft12()
    elif myPlayer.location == 'Wild_Forest_BottomLeft13':
        os.system('cls')
        Wild_Forest_BottomLeft13()
    elif myPlayer.location == 'Wild_Forest_BottomLeft14':
        os.system('cls')
        Wild_Forest_BottomLeft14()
    elif myPlayer.location == 'Wild_Forest_BottomLeft15':
        os.system('cls')
        Wild_Forest_BottomLeft15()
    elif myPlayer.location == 'Wild_Forest_BottomLeft16':
        os.system('cls')
        Wild_Forest_BottomLeft16()
    elif myPlayer.location == 'Wild_Forest_BottomLeft17':
        os.system('cls')
        Wild_Forest_BottomLeft17()
    elif myPlayer.location == 'Wild_Forest_BottomLeft18':
        os.system('cls')
        Wild_Forest_BottomLeft18()
    elif myPlayer.location == 'Wild_Forest_BottomLeft19':
        os.system('cls')
        Wild_Forest_BottomLeft19()
    elif myPlayer.location == 'Wild_Forest_BottomLeft20':
        os.system('cls')
        Wild_Forest_BottomLeft20()
    elif myPlayer.location == 'Wild_Forest_BottomLeft21':
        os.system('cls')
        Wild_Forest_BottomLeft21()
    elif myPlayer.location == 'Wild_Forest_BottomLeft22':
        os.system('cls')
        Wild_Forest_BottomLeft22()
    elif myPlayer.location == 'Wild_Forest_BottomLeft23':
        os.system('cls')
        Wild_Forest_BottomLeft23()
    elif myPlayer.location == 'Wild_Forest_BottomLeft24':
        os.system('cls')
        Wild_Forest_BottomLeft24()
    elif myPlayer.location == 'Wild_Forest_BottomLeft25':
        os.system('cls')
        Wild_Forest_BottomLeft25()
    elif myPlayer.location == 'Wild_Forest_BottomLeft26':
        os.system('cls')
        Wild_Forest_BottomLeft26()
    elif myPlayer.location == 'Wild_Forest_BottomLeft27':
        os.system('cls')
        Wild_Forest_BottomLeft27()
    elif myPlayer.location == 'Wild_Forest_BottomLeft28':
        os.system('cls')
        Wild_Forest_BottomLeft28()
    elif myPlayer.location == 'Wild_Forest_BottomLeft29':
        os.system('cls')
        Wild_Forest_BottomLeft29()
    elif myPlayer.location == 'Wild_Forest_BottomLeft30':
        os.system('cls')
        Wild_Forest_BottomLeft30()

    ##############################################################
    elif myPlayer.location == 'Wild_Forest_TopRight1':
        os.system('cls')
        Wild_Forest_TopRight1()
    elif myPlayer.location == 'Wild_Forest_TopRight2':
        os.system('cls')
        Wild_Forest_TopRight2()
    elif myPlayer.location == 'Wild_Forest_TopRight3':
        os.system('cls')
        Wild_Forest_TopRight3()
    elif myPlayer.location == 'Wild_Forest_TopRight4':
        os.system('cls')
        Wild_Forest_TopRight4()
    elif myPlayer.location == 'Wild_Forest_TopRight5':
        os.system('cls')
        Wild_Forest_TopRight5()
    elif myPlayer.location == 'Wild_Forest_TopRight6':
        os.system('cls')
        Wild_Forest_TopRight6()
    elif myPlayer.location == 'Wild_Forest_TopRight7':
        os.system('cls')
        Wild_Forest_TopRight7()
    elif myPlayer.location == 'Wild_Forest_TopRight8':
        os.system('cls')
        Wild_Forest_TopRight8()
    elif myPlayer.location == 'Wild_Forest_TopRight9':
        os.system('cls')
        Wild_Forest_TopRight9()
    elif myPlayer.location == 'Wild_Forest_TopRight10':
        os.system('cls')
        Wild_Forest_TopRight10()
    elif myPlayer.location == 'Wild_Forest_TopRight11':
        os.system('cls')
        Wild_Forest_TopRight11()
    elif myPlayer.location == 'Wild_Forest_TopRight12':
        os.system('cls')
        Wild_Forest_TopRight12()
    elif myPlayer.location == 'Wild_Forest_TopRight13':
        os.system('cls')
        Wild_Forest_TopRight13()
    elif myPlayer.location == 'Wild_Forest_TopRight14':
        os.system('cls')
        Wild_Forest_TopRight14()
    elif myPlayer.location == 'Wild_Forest_TopRight15':
        os.system('cls')
        Wild_Forest_TopRight15()
    elif myPlayer.location == 'Wild_Forest_TopRight16':
        os.system('cls')
        Wild_Forest_TopRight16()
    elif myPlayer.location == 'Wild_Forest_TopRight17':
        os.system('cls')
        Wild_Forest_TopRight17()
    elif myPlayer.location == 'Wild_Forest_TopRight18':
        os.system('cls')
        Wild_Forest_TopRight18()
    elif myPlayer.location == 'Wild_Forest_TopRight19':
        os.system('cls')
        Wild_Forest_TopRight19()
    elif myPlayer.location == 'Wild_Forest_TopRight20':
        os.system('cls')
        Wild_Forest_TopRight20()
    elif myPlayer.location == 'Wild_Forest_TopRight21':
        os.system('cls')
        Wild_Forest_TopRight21()
    elif myPlayer.location == 'Wild_Forest_TopRight22':
        os.system('cls')
        Wild_Forest_TopRight22()
    elif myPlayer.location == 'Wild_Forest_TopRight23':
        os.system('cls')
        Wild_Forest_TopRight23()
    elif myPlayer.location == 'Wild_Forest_TopRight24':
        os.system('cls')
        Wild_Forest_TopRight24()
    elif myPlayer.location == 'Wild_Forest_TopRight25':
        os.system('cls')
        Wild_Forest_TopRight25()
    elif myPlayer.location == 'Wild_Forest_TopRight26':
        os.system('cls')
        Wild_Forest_TopRight26()
    elif myPlayer.location == 'Wild_Forest_TopRight27':
        os.system('cls')
        Wild_Forest_TopRight27()
    elif myPlayer.location == 'Wild_Forest_TopRight28':
        os.system('cls')
        Wild_Forest_TopRight28()
    elif myPlayer.location == 'Wild_Forest_TopRight29':
        os.system('cls')
        Wild_Forest_TopRight29()
    elif myPlayer.location == 'Wild_Forest_TopRight30':
        os.system('cls')
        Wild_Forest_TopRight30()
    ##############################################################
    elif myPlayer.location == 'Wild_Forest_TopLeft1':
        os.system('cls')
        Wild_Forest_TopLeft1()
    elif myPlayer.location == 'Wild_Forest_TopLeft2':
        os.system('cls')
        Wild_Forest_TopLeft2()
    elif myPlayer.location == 'Wild_Forest_TopLeft3':
        os.system('cls')
        Wild_Forest_TopLeft3()
    elif myPlayer.location == 'Wild_Forest_TopLeft4':
        os.system('cls')
        Wild_Forest_TopLeft4()
    elif myPlayer.location == 'Wild_Forest_TopLeft5':
        os.system('cls')
        Wild_Forest_TopLeft5()
    elif myPlayer.location == 'Wild_Forest_TopLeft6':
        os.system('cls')
        Wild_Forest_TopLeft6()
    elif myPlayer.location == 'Wild_Forest_TopLeft7':
        os.system('cls')
        Wild_Forest_TopLeft7()
    elif myPlayer.location == 'Wild_Forest_TopLeft8':
        os.system('cls')
        Wild_Forest_TopLeft8()
    elif myPlayer.location == 'Wild_Forest_TopLeft9':
        os.system('cls')
        Wild_Forest_TopLeft9()

    elif myPlayer.location == 'Wild_Forest_TopLeft10':
        os.system('cls')
        Wild_Forest_TopLeft10()
    elif myPlayer.location == 'Wild_Forest_TopLeft11':
        os.system('cls')
        Wild_Forest_TopLeft11()
    elif myPlayer.location == 'Wild_Forest_TopLeft12':
        os.system('cls')
        Wild_Forest_TopLeft12()
    elif myPlayer.location == 'Wild_Forest_TopLeft13':
        os.system('cls')
        Wild_Forest_TopLeft13()
    elif myPlayer.location == 'Wild_Forest_TopLeft14':
        os.system('cls')
        Wild_Forest_TopLeft14()
    elif myPlayer.location == 'Wild_Forest_TopLeft15':
        os.system('cls')
        Wild_Forest_TopLeft15()
    elif myPlayer.location == 'Wild_Forest_TopLeft16':
        os.system('cls')
        Wild_Forest_TopLeft16()
    elif myPlayer.location == 'Wild_Forest_TopLeft17':
        os.system('cls')
        Wild_Forest_TopLeft17()
    elif myPlayer.location == 'Wild_Forest_TopLeft18':
        os.system('cls')
        Wild_Forest_TopLeft18()
    elif myPlayer.location == 'Wild_Forest_TopLeft19':
        os.system('cls')
        Wild_Forest_TopLeft19()
    elif myPlayer.location == 'Wild_Forest_TopLeft20':
        os.system('cls')
        Wild_Forest_TopLeft20()
    elif myPlayer.location == 'Wild_Forest_TopLeft21':
        os.system('cls')
        Wild_Forest_TopLeft21()
    elif myPlayer.location == 'Wild_Forest_TopLeft22':
        os.system('cls')
        Wild_Forest_TopLeft22()
    elif myPlayer.location == 'Wild_Forest_TopLeft23':
        os.system('cls')
        Wild_Forest_TopLeft23()
    elif myPlayer.location == 'Wild_Forest_TopLeft24':
        os.system('cls')
        Wild_Forest_TopLeft24()
    elif myPlayer.location == 'Wild_Forest_TopLeft25':
        os.system('cls')
        Wild_Forest_TopLeft25()
    elif myPlayer.location == 'Wild_Forest_TopLeft26':
        os.system('cls')
        Wild_Forest_TopLeft26()
    elif myPlayer.location == 'Wild_Forest_TopLeft27':
        os.system('cls')
        Wild_Forest_TopLeft27()
    elif myPlayer.location == 'Wild_Forest_TopLeft28':
        os.system('cls')
        Wild_Forest_TopLeft28()
    elif myPlayer.location == 'Wild_Forest_TopLeft29':
        os.system('cls')
        Wild_Forest_TopLeft29()
    elif myPlayer.location == 'Wild_Forest_TopLeft30':
        os.system('cls')
        Wild_Forest_TopLeft30()
    ##############################################################
    elif myPlayer.location == 'Wild_Forest_CenterFour1':
        os.system('cls')
        Wild_Forest_CenterFour1()
    elif myPlayer.location == 'Wild_Forest_CenterFour2':
        os.system('cls')
        Wild_Forest_CenterFour2()
    elif myPlayer.location == 'Wild_Forest_CenterFour3':
        os.system('cls')
        Wild_Forest_CenterFour3()
    elif myPlayer.location == 'Wild_Forest_CenterFour4':
        os.system('cls')
        Wild_Forest_CenterFour4()
    elif myPlayer.location == 'Wild_Forest_CenterFour5':
        os.system('cls')
        Wild_Forest_CenterFour5()
    elif myPlayer.location == 'Wild_Forest_CenterFour6':
        os.system('cls')
        Wild_Forest_CenterFour6()
    elif myPlayer.location == 'Wild_Forest_CenterFour7':
        os.system('cls')
        Wild_Forest_CenterFour7()
    elif myPlayer.location == 'Wild_Forest_CenterFour8':
        os.system('cls')
        Wild_Forest_CenterFour8()
    elif myPlayer.location == 'Wild_Forest_CenterFour9':
        os.system('cls')
        Wild_Forest_CenterFour9()
    elif myPlayer.location == 'Wild_Forest_CenterFour10':
        os.system('cls')
        Wild_Forest_CenterFour10()
    elif myPlayer.location == 'Wild_Forest_CenterFour11':
        os.system('cls')
        Wild_Forest_CenterFour11()
    elif myPlayer.location == 'Wild_Forest_CenterFour12':
        os.system('cls')
        Wild_Forest_CenterFour12()
    elif myPlayer.location == 'Wild_Forest_CenterFour13':
        os.system('cls')
        Wild_Forest_CenterFour13()
    elif myPlayer.location == 'Wild_Forest_CenterFour14':
        os.system('cls')
        Wild_Forest_CenterFour14()
    elif myPlayer.location == 'Wild_Forest_CenterFour15':
        os.system('cls')
        Wild_Forest_CenterFour15()
    elif myPlayer.location == 'Wild_Forest_CenterFour16':
        os.system('cls')
        Wild_Forest_CenterFour16()
    elif myPlayer.location == 'Wild_Forest_CenterFour17':
        os.system('cls')
        Wild_Forest_CenterFour17()
    elif myPlayer.location == 'Wild_Forest_CenterFour18':
        os.system('cls')
        Wild_Forest_CenterFour18()
    elif myPlayer.location == 'Wild_Forest_CenterFour19':
        os.system('cls')
        Wild_Forest_CenterFour19()
    elif myPlayer.location == 'Wild_Forest_CenterFour20':
        os.system('cls')
        Wild_Forest_CenterFour20()
    elif myPlayer.location == 'Wild_Forest_CenterFour21':
        os.system('cls')
        Wild_Forest_CenterFour21()
    elif myPlayer.location == 'Wild_Forest_CenterFour22':
        os.system('cls')
        Wild_Forest_CenterFour22()
    elif myPlayer.location == 'Wild_Forest_CenterFour23':
        os.system('cls')
        Wild_Forest_CenterFour23()
    elif myPlayer.location == 'Wild_Forest_CenterFour24':
        os.system('cls')
        Wild_Forest_CenterFour24()
    elif myPlayer.location == 'Wild_Forest_CenterFour25':
        os.system('cls')
        Wild_Forest_CenterFour25()
    elif myPlayer.location == 'Wild_Forest_CenterFour26':
        os.system('cls')
        Wild_Forest_CenterFour26()
    elif myPlayer.location == 'Wild_Forest_CenterFour27':
        os.system('cls')
        Wild_Forest_CenterFour27()
    elif myPlayer.location == 'Wild_Forest_CenterFour28':
        os.system('cls')
        Wild_Forest_CenterFour28()
    elif myPlayer.location == 'Wild_Forest_CenterFour29':
        os.system('cls')
        Wild_Forest_CenterFour29()
    elif myPlayer.location == 'Wild_Forest_CenterFour30':
        os.system('cls')
        Wild_Forest_CenterFour30()
    ##############################################################
    elif myPlayer.location == 'Wild_Forest_SideLeft1':
        os.system('cls')
        Wild_Forest_SideLeft1()
    elif myPlayer.location == 'Wild_Forest_SideLeft2':
        os.system('cls')
        Wild_Forest_SideLeft2()
    elif myPlayer.location == 'Wild_Forest_SideLeft3':
        os.system('cls')
        Wild_Forest_SideLeft3()
    elif myPlayer.location == 'Wild_Forest_SideLeft4':
        os.system('cls')
        Wild_Forest_SideLeft4()
    elif myPlayer.location == 'Wild_Forest_SideLeft5':
        os.system('cls')
        Wild_Forest_SideLeft5()
    elif myPlayer.location == 'Wild_Forest_SideLeft6':
        os.system('cls')
        Wild_Forest_SideLeft6()
    elif myPlayer.location == 'Wild_Forest_SideLeft7':
        os.system('cls')
        Wild_Forest_SideLeft7()
    elif myPlayer.location == 'Wild_Forest_SideLeft8':
        os.system('cls')
        Wild_Forest_SideLeft8()
    elif myPlayer.location == 'Wild_Forest_SideLeft9':
        os.system('cls')
        Wild_Forest_SideLeft9()
    elif myPlayer.location == 'Wild_Forest_SideLeft10':
        os.system('cls')
        Wild_Forest_SideLeft10()
    elif myPlayer.location == 'Wild_Forest_SideLeft11':
        os.system('cls')
        Wild_Forest_SideLeft11()
    elif myPlayer.location == 'Wild_Forest_SideLeft12':
        os.system('cls')
        Wild_Forest_SideLeft12()
    elif myPlayer.location == 'Wild_Forest_SideLeft13':
        os.system('cls')
        Wild_Forest_SideLeft13()
    elif myPlayer.location == 'Wild_Forest_SideLeft14':
        os.system('cls')
        Wild_Forest_SideLeft14()
    elif myPlayer.location == 'Wild_Forest_SideLeft15':
        os.system('cls')
        Wild_Forest_SideLeft15()
    elif myPlayer.location == 'Wild_Forest_SideLeft16':
        os.system('cls')
        Wild_Forest_SideLeft16()
    elif myPlayer.location == 'Wild_Forest_SideLeft17':
        os.system('cls')
        Wild_Forest_SideLeft17()
    elif myPlayer.location == 'Wild_Forest_SideLeft18':
        os.system('cls')
        Wild_Forest_SideLeft18()
    elif myPlayer.location == 'Wild_Forest_SideLeft19':
        os.system('cls')
        Wild_Forest_SideLeft19()
    elif myPlayer.location == 'Wild_Forest_SideLeft20':
        os.system('cls')
        Wild_Forest_SideLeft20()
    elif myPlayer.location == 'Wild_Forest_SideLeft21':
        os.system('cls')
        Wild_Forest_SideLeft21()
    elif myPlayer.location == 'Wild_Forest_SideLeft22':
        os.system('cls')
        Wild_Forest_SideLeft22()
    elif myPlayer.location == 'Wild_Forest_SideLeft23':
        os.system('cls')
        Wild_Forest_SideLeft23()
    elif myPlayer.location == 'Wild_Forest_SideLeft24':
        os.system('cls')
        Wild_Forest_SideLeft24()
    elif myPlayer.location == 'Wild_Forest_SideLeft25':
        os.system('cls')
        Wild_Forest_SideLeft25()
    elif myPlayer.location == 'Wild_Forest_SideLeft26':
        os.system('cls')
        Wild_Forest_SideLeft26()
    elif myPlayer.location == 'Wild_Forest_SideLeft27':
        os.system('cls')
        Wild_Forest_SideLeft27()
    elif myPlayer.location == 'Wild_Forest_SideLeft28':
        os.system('cls')
        Wild_Forest_SideLeft28()
    elif myPlayer.location == 'Wild_Forest_SideLeft29':
        os.system('cls')
        Wild_Forest_SideLeft29()
    elif myPlayer.location == 'Wild_Forest_SideLeft30':
        os.system('cls')
        Wild_Forest_SideLeft30()
    ##############################################################
    elif myPlayer.location == 'Wild_Forest_SideRight1':
        os.system('cls')
        Wild_Forest_SideRight1()
    elif myPlayer.location == 'Wild_Forest_SideRight2':
        os.system('cls')
        Wild_Forest_SideRight2()
    elif myPlayer.location == 'Wild_Forest_SideRight3':
        os.system('cls')
        Wild_Forest_SideRight3()
    elif myPlayer.location == 'Wild_Forest_SideRight4':
        os.system('cls')
        Wild_Forest_SideRight4()
    elif myPlayer.location == 'Wild_Forest_SideRight5':
        os.system('cls')
        Wild_Forest_SideRight5()
    elif myPlayer.location == 'Wild_Forest_SideRight6':
        os.system('cls')
        Wild_Forest_SideRight6()
    elif myPlayer.location == 'Wild_Forest_SideRight7':
        os.system('cls')
        Wild_Forest_SideRight7()
    elif myPlayer.location == 'Wild_Forest_SideRight8':
        os.system('cls')
        Wild_Forest_SideRight8()
    elif myPlayer.location == 'Wild_Forest_SideRight9':
        os.system('cls')
        Wild_Forest_SideRight9()
    elif myPlayer.location == 'Wild_Forest_SideRight10':
        os.system('cls')
        Wild_Forest_SideRight10()
    elif myPlayer.location == 'Wild_Forest_SideRight11':
        os.system('cls')
        Wild_Forest_SideRight11()
    elif myPlayer.location == 'Wild_Forest_SideRight12':
        os.system('cls')
        Wild_Forest_SideRight12()
    elif myPlayer.location == 'Wild_Forest_SideRight13':
        os.system('cls')
        Wild_Forest_SideRight13()
    elif myPlayer.location == 'Wild_Forest_SideRight14':
        os.system('cls')
        Wild_Forest_SideRight14()
    elif myPlayer.location == 'Wild_Forest_SideRight15':
        os.system('cls')
        Wild_Forest_SideRight15()
    elif myPlayer.location == 'Wild_Forest_SideRight16':
        os.system('cls')
        Wild_Forest_SideRight16()
    elif myPlayer.location == 'Wild_Forest_SideRight17':
        os.system('cls')
        Wild_Forest_SideRight17()
    elif myPlayer.location == 'Wild_Forest_SideRight18':
        os.system('cls')
        Wild_Forest_SideRight18()
    elif myPlayer.location == 'Wild_Forest_SideRight19':
        os.system('cls')
        Wild_Forest_SideRight19()
    elif myPlayer.location == 'Wild_Forest_SideRight20':
        os.system('cls')
        Wild_Forest_SideRight20()
    elif myPlayer.location == 'Wild_Forest_SideRight21':
        os.system('cls')
        Wild_Forest_SideRight21()
    elif myPlayer.location == 'Wild_Forest_SideRight22':
        os.system('cls')
        Wild_Forest_SideRight22()
    elif myPlayer.location == 'Wild_Forest_SideRight23':
        os.system('cls')
        Wild_Forest_SideRight23()
    elif myPlayer.location == 'Wild_Forest_SideRight24':
        os.system('cls')
        Wild_Forest_SideRight24()
    elif myPlayer.location == 'Wild_Forest_SideRight25':
        os.system('cls')
        Wild_Forest_SideRight25()
    elif myPlayer.location == 'Wild_Forest_SideRight26':
        os.system('cls')
        Wild_Forest_SideRight26()
    elif myPlayer.location == 'Wild_Forest_SideRight27':
        os.system('cls')
        Wild_Forest_SideRight27()
    elif myPlayer.location == 'Wild_Forest_SideRight28':
        os.system('cls')
        Wild_Forest_SideRight28()
    elif myPlayer.location == 'Wild_Forest_SideRight29':
        os.system('cls')
        Wild_Forest_SideRight29()
    elif myPlayer.location == 'Wild_Forest_SideRight30':
        os.system('cls')
        Wild_Forest_SideRight30()
    ##############################################################
    elif myPlayer.location == 'Wild_Forest_TopCenter1':
        os.system('cls')
        Wild_Forest_TopCenter1()
    elif myPlayer.location == 'Wild_Forest_TopCenter2':
        os.system('cls')
        Wild_Forest_TopCenter2()
    elif myPlayer.location == 'Wild_Forest_TopCenter3':
        os.system('cls')
        Wild_Forest_TopCenter3()
    elif myPlayer.location == 'Wild_Forest_TopCenter4':
        os.system('cls')
        Wild_Forest_TopCenter4()
    elif myPlayer.location == 'Wild_Forest_TopCenter5':
        os.system('cls')
        Wild_Forest_TopCenter5()
    elif myPlayer.location == 'Wild_Forest_TopCenter6':
        os.system('cls')
        Wild_Forest_TopCenter6()
    elif myPlayer.location == 'Wild_Forest_TopCenter7':
        os.system('cls')
        Wild_Forest_TopCenter7()
    elif myPlayer.location == 'Wild_Forest_TopCenter8':
        os.system('cls')
        Wild_Forest_TopCenter8()
    elif myPlayer.location == 'Wild_Forest_TopCenter9':
        os.system('cls')
        Wild_Forest_TopCenter9()
    elif myPlayer.location == 'Wild_Forest_TopCenter10':
        os.system('cls')
        Wild_Forest_TopCenter10()
    elif myPlayer.location == 'Wild_Forest_TopCenter11':
        os.system('cls')
        Wild_Forest_TopCenter11()
    elif myPlayer.location == 'Wild_Forest_TopCenter12':
        os.system('cls')
        Wild_Forest_TopCenter12()
    elif myPlayer.location == 'Wild_Forest_TopCenter13':
        os.system('cls')
        Wild_Forest_TopCenter13()
    elif myPlayer.location == 'Wild_Forest_TopCenter14':
        os.system('cls')
        Wild_Forest_TopCenter14()
    elif myPlayer.location == 'Wild_Forest_TopCenter15':
        os.system('cls')
        Wild_Forest_TopCenter15()
    elif myPlayer.location == 'Wild_Forest_TopCenter16':
        os.system('cls')
        Wild_Forest_TopCenter16()
    elif myPlayer.location == 'Wild_Forest_TopCenter17':
        os.system('cls')
        Wild_Forest_TopCenter17()
    elif myPlayer.location == 'Wild_Forest_TopCenter18':
        os.system('cls')
        Wild_Forest_TopCenter18()
    elif myPlayer.location == 'Wild_Forest_TopCenter19':
        os.system('cls')
        Wild_Forest_TopCenter19()
    elif myPlayer.location == 'Wild_Forest_TopCenter20':
        os.system('cls')
        Wild_Forest_TopCenter20()
    elif myPlayer.location == 'Wild_Forest_TopCenter21':
        os.system('cls')
        Wild_Forest_TopCenter21()
    elif myPlayer.location == 'Wild_Forest_TopCenter22':
        os.system('cls')
        Wild_Forest_TopCenter22()
    elif myPlayer.location == 'Wild_Forest_TopCenter23':
        os.system('cls')
        Wild_Forest_TopCenter23()
    elif myPlayer.location == 'Wild_Forest_TopCenter24':
        os.system('cls')
        Wild_Forest_TopCenter24()
    elif myPlayer.location == 'Wild_Forest_TopCenter25':
        os.system('cls')
        Wild_Forest_TopCenter25()
    elif myPlayer.location == 'Wild_Forest_TopCenter26':
        os.system('cls')
        Wild_Forest_TopCenter26()
    elif myPlayer.location == 'Wild_Forest_TopCenter27':
        os.system('cls')
        Wild_Forest_TopCenter27()
    elif myPlayer.location == 'Wild_Forest_TopCenter28':
        os.system('cls')
        Wild_Forest_TopCenter28()
    elif myPlayer.location == 'Wild_Forest_TopCenter29':
        os.system('cls')
        Wild_Forest_TopCenter29()
    elif myPlayer.location == 'Wild_Forest_TopCenter30':
        os.system('cls')
        Wild_Forest_TopCenter30()
    ##############################################################
    elif myPlayer.location == 'Wild_Forest_BottomCenter1':
        os.system('cls')
        Wild_Forest_BottomCenter1()
    elif myPlayer.location == 'Wild_Forest_BottomCenter2':
        os.system('cls')
        Wild_Forest_BottomCenter2()
    elif myPlayer.location == 'Wild_Forest_BottomCenter3':
        os.system('cls')
        Wild_Forest_BottomCenter3()
    elif myPlayer.location == 'Wild_Forest_BottomCenter4':
        os.system('cls')
        Wild_Forest_BottomCenter4()
    elif myPlayer.location == 'Wild_Forest_BottomCenter5':
        os.system('cls')
        Wild_Forest_BottomCenter5()
    elif myPlayer.location == 'Wild_Forest_BottomCenter6':
        os.system('cls')
        Wild_Forest_BottomCenter6()
    elif myPlayer.location == 'Wild_Forest_BottomCenter7':
        os.system('cls')
        Wild_Forest_BottomCenter7()
    elif myPlayer.location == 'Wild_Forest_BottomCenter8':
        os.system('cls')
        Wild_Forest_BottomCenter8()
    elif myPlayer.location == 'Wild_Forest_BottomCenter9':
        os.system('cls')
        Wild_Forest_BottomCenter9()
    elif myPlayer.location == 'Wild_Forest_BottomCenter10':
        os.system('cls')
        Wild_Forest_BottomCenter10()
    elif myPlayer.location == 'Wild_Forest_BottomCenter11':
        os.system('cls')
        Wild_Forest_BottomCenter11()
    elif myPlayer.location == 'Wild_Forest_BottomCenter12':
        os.system('cls')
        Wild_Forest_BottomCenter12()
    elif myPlayer.location == 'Wild_Forest_BottomCenter13':
        os.system('cls')
        Wild_Forest_BottomCenter13()
    elif myPlayer.location == 'Wild_Forest_BottomCenter14':
        os.system('cls')
        Wild_Forest_BottomCenter14()
    elif myPlayer.location == 'Wild_Forest_BottomCenter15':
        os.system('cls')
        Wild_Forest_BottomCenter15()
    elif myPlayer.location == 'Wild_Forest_BottomCenter16':
        os.system('cls')
        Wild_Forest_BottomCenter16()
    elif myPlayer.location == 'Wild_Forest_BottomCenter17':
        os.system('cls')
        Wild_Forest_BottomCenter17()
    elif myPlayer.location == 'Wild_Forest_BottomCenter18':
        os.system('cls')
        Wild_Forest_BottomCenter18()
    elif myPlayer.location == 'Wild_Forest_BottomCenter19':
        os.system('cls')
        Wild_Forest_BottomCenter19()
    elif myPlayer.location == 'Wild_Forest_BottomCenter20':
        os.system('cls')
        Wild_Forest_BottomCenter20()
    elif myPlayer.location == 'Wild_Forest_BottomCenter21':
        os.system('cls')
        Wild_Forest_BottomCenter21()
    elif myPlayer.location == 'Wild_Forest_BottomCenter22':
        os.system('cls')
        Wild_Forest_BottomCenter22()
    elif myPlayer.location == 'Wild_Forest_BottomCenter23':
        os.system('cls')
        Wild_Forest_BottomCenter23()
    elif myPlayer.location == 'Wild_Forest_BottomCenter24':
        os.system('cls')
        Wild_Forest_BottomCenter24()
    elif myPlayer.location == 'Wild_Forest_BottomCenter25':
        os.system('cls')
        Wild_Forest_BottomCenter25()
    elif myPlayer.location == 'Wild_Forest_BottomCenter26':
        os.system('cls')
        Wild_Forest_BottomCenter26()
    elif myPlayer.location == 'Wild_Forest_BottomCenter27':
        os.system('cls')
        Wild_Forest_BottomCenter27()
    elif myPlayer.location == 'Wild_Forest_BottomCenter28':
        os.system('cls')
        Wild_Forest_BottomCenter28()
    elif myPlayer.location == 'Wild_Forest_BottomCenter29':
        os.system('cls')
        Wild_Forest_BottomCenter29()
    elif myPlayer.location == 'Wild_Forest_BottomCenter30':
        os.system('cls')
        Wild_Forest_BottomCenter30()

    #################Wild_Forest End#############
    elif myPlayer.location == 'CityOfAden1':
        os.system('cls')
        CityOfAden1()
    elif myPlayer.location == 'CityOfAden2':
        os.system('cls')
        CityOfAden2()
    elif myPlayer.location == 'CityOfAden3':
        os.system('cls')
        CityOfAden3()
    elif myPlayer.location == 'CityOfAden4':
        os.system('cls')
        CityOfAden4()
    elif myPlayer.location == 'CityOfAden5':
        os.system('cls')
        CityOfAden5()
    elif myPlayer.location == 'CityOfAden6':
        os.system('cls')
        CityOfAden6()
    elif myPlayer.location == 'CityOfAden7':
        os.system('cls')
        CityOfAden7()
    elif myPlayer.location == 'CityOfAden8':
        os.system('cls')
        CityOfAden8()
    elif myPlayer.location == 'CityOfAden9':
        os.system('cls')
        CityOfAden9()
    elif myPlayer.location == 'CityOfAden10':
        os.system('cls')
        CityOfAden10()
    elif myPlayer.location == 'CityOfAden11':
        os.system('cls')
        CityOfAden11()
    elif myPlayer.location == 'CityOfAden12':
        os.system('cls')
        CityOfAden12()
    elif myPlayer.location == 'CityOfAden13':
        os.system('cls')
        CityOfAden13()
    elif myPlayer.location == 'CityOfAden14':
        os.system('cls')
        CityOfAden14()
    elif myPlayer.location == 'CityOfAden15':
        os.system('cls')
        CityOfAden15()
    elif myPlayer.location == 'CityOfAden16':
        os.system('cls')
        CityOfAden16()
    elif myPlayer.location == 'CityOfAden17':
        os.system('cls')
        CityOfAden17()
    elif myPlayer.location == 'CityOfAden18':
        os.system('cls')
        CityOfAden18()
    elif myPlayer.location == 'CityOfAden19':
        os.system('cls')
        CityOfAden19()
    elif myPlayer.location == 'CityOfAden20':
        os.system('cls')
        CityOfAden20()
    elif myPlayer.location == 'CityOfAden21':
        os.system('cls')
        CityOfAden21()
    elif myPlayer.location == 'CityOfAden22':
        os.system('cls')
        CityOfAden22()
    elif myPlayer.location == 'CityOfAden23':
        os.system('cls')
        CityOfAden23()
    #############City Of aden Lower

    elif myPlayer.location == 'CityOfAdenLower1':
        os.system('cls')
        CityOfAdenLower1()
    elif myPlayer.location == 'CityOfAdenLower2':
        os.system('cls')
        CityOfAdenLower2()
    elif myPlayer.location == 'CityOfAdenLower3':
        os.system('cls')
        CityOfAdenLower3()
    elif myPlayer.location == 'CityOfAdenLower4':
        os.system('cls')
        CityOfAdenLower4()
    elif myPlayer.location == 'CityOfAdenLower5':
        os.system('cls')
        CityOfAdenLower5()
    elif myPlayer.location == 'CityOfAdenLower6':
        os.system('cls')
        CityOfAdenLower6()
    elif myPlayer.location == 'CityOfAdenLower7':
        os.system('cls')
        CityOfAdenLower7()
    elif myPlayer.location == 'CityOfAdenLower8':
        os.system('cls')
        CityOfAdenLower8()
    elif myPlayer.location == 'CityOfAdenLower9':
        os.system('cls')
        CityOfAdenLower9()
    elif myPlayer.location == 'CityOfAdenLower10':
        os.system('cls')
        CityOfAdenLower10()
    elif myPlayer.location == 'CityOfAdenLower11':
        os.system('cls')
        CityOfAdenLower11()
    elif myPlayer.location == 'CityOfAdenLower12':
        os.system('cls')
        CityOfAdenLower12()
    elif myPlayer.location == 'CityOfAdenLower13':
        os.system('cls')
        CityOfAdenLower13()
    elif myPlayer.location == 'CityOfAdenLower14':
        os.system('cls')
        CityOfAdenLower14()
    elif myPlayer.location == 'CityOfAdenLower15':
        os.system('cls')
        CityOfAdenLower15()
    elif myPlayer.location == 'CityOfAdenLower16':
        os.system('cls')
        CityOfAdenLower16()
    elif myPlayer.location == 'CityOfAdenLower17':
        os.system('cls')
        CityOfAdenLower17()
    elif myPlayer.location == 'CityOfAdenLower18':
        os.system('cls')
        CityOfAdenLower18()
    elif myPlayer.location == 'CityOfAdenLower19':
        os.system('cls')
        CityOfAdenLower19()
    elif myPlayer.location == 'CityOfAdenLower20':
        os.system('cls')
        CityOfAdenLower20()
    elif myPlayer.location == 'CityOfAdenLower21':
        os.system('cls')
        CityOfAdenLower21()
    elif myPlayer.location == 'CityOfAdenLower22':
        os.system('cls')
        CityOfAdenLower22()
    elif myPlayer.location == 'CityOfAdenLower23':
        os.system('cls')
        CityOfAdenLower23()
    elif myPlayer.location == 'CityOfAdenLower24':
        os.system('cls')
        CityOfAdenLower24()
    elif myPlayer.location == 'CityOfAdenLower25':
        os.system('cls')
        CityOfAdenLower25()
    elif myPlayer.location == 'CityOfAdenLower26':
        os.system('cls')
        CityOfAdenLower26()
    elif myPlayer.location == 'CityOfAdenLower27':
        os.system('cls')
        CityOfAdenLower27()
    elif myPlayer.location == 'CityOfAdenLower28':
        os.system('cls')
        CityOfAdenLower28()
    elif myPlayer.location == 'CityOfAdenLower29':
        os.system('cls')
        CityOfAdenLower29()
    elif myPlayer.location == 'CityOfAdenLower30':
        os.system('cls')
        CityOfAdenLower30()
    elif myPlayer.location == 'CityOfAdenLower31':
        os.system('cls')
        CityOfAdenLower31()
    ############# Healing Inn
    elif myPlayer.location == 'Healing_inn1':
        os.system('cls')
        Healing_inn1()
    elif myPlayer.location == 'Healing_inn2':
        os.system('cls')
        Healing_inn2()
    elif myPlayer.location == 'Healing_inn3':
        os.system('cls')
        Healing_inn3()
    elif myPlayer.location == 'Healing_inn4':
        os.system('cls')
        Healing_inn4()
    elif myPlayer.location == 'Healing_inn5':
        os.system('cls')
        Healing_inn5()
    elif myPlayer.location == 'Healing_inn6':
        os.system('cls')
        Healing_inn6()
    elif myPlayer.location == 'Healing_inn7':
        os.system('cls')
        Healing_inn7()
    elif myPlayer.location == 'Healing_inn8':
        os.system('cls')
        Healing_inn8()
    elif myPlayer.location == 'Healing_inn9':
        os.system('cls')
        Healing_inn9()
    elif myPlayer.location == 'Healing_inn10':
        os.system('cls')
        Healing_inn10()
    elif myPlayer.location == 'Healing_inn11':
        os.system('cls')
        Healing_inn11()
#########################################
    elif myPlayer.location == 'Healing_inn_aden1':
        os.system('cls')
        Healing_inn_aden1()
    elif myPlayer.location == 'Healing_inn_aden2':
        os.system('cls')
        Healing_inn_aden2()
    elif myPlayer.location == 'Healing_inn_aden3':
        os.system('cls')
        Healing_inn_aden3()
    elif myPlayer.location == 'Healing_inn_aden4':
        os.system('cls')
        Healing_inn_aden4()
    elif myPlayer.location == 'Healing_inn_aden5':
        os.system('cls')
        Healing_inn_aden5()
    elif myPlayer.location == 'Healing_inn_aden6':
        os.system('cls')
        Healing_inn_aden6()
    elif myPlayer.location == 'Healing_inn_aden7':
        os.system('cls')
        Healing_inn_aden7()
    elif myPlayer.location == 'Healing_inn_aden8':
        os.system('cls')
        Healing_inn_aden8()
    elif myPlayer.location == 'Healing_inn_aden9':
        os.system('cls')
        Healing_inn_aden9()
    elif myPlayer.location == 'Healing_inn_aden10':
        os.system('cls')
        Healing_inn_aden10()
    elif myPlayer.location == 'Healing_inn_aden11':
        os.system('cls')
        Healing_inn_aden11()
#########################################
    #############City Of aden Lower

    elif myPlayer.location == 'Forest15':

        winsound.PlaySound("C:\orest trail.wav", winsound.SND_ASYNC)
        os.system('cls')
        Forest15()

    elif myPlayer.location == 'Forest14':

        winsound.PlaySound("C:\orest trail.wav", winsound.SND_ASYNC)
        os.system('cls')
        Forest14()

    elif myPlayer.location == 'Forest13':

        winsound.PlaySound("C:\orest trail.wav", winsound.SND_ASYNC)
        os.system('cls')
        Forest13()

    elif myPlayer.location == 'Forest12':

        winsound.PlaySound("C:\orest trail.wav", winsound.SND_ASYNC)
        os.system('cls')
        Forest12()
    elif myPlayer.location == 'Forest11':

        winsound.PlaySound("C:\orest trail.wav", winsound.SND_ASYNC)
        os.system('cls')
        Forest11()

    elif myPlayer.location == 'Forest10':

        winsound.PlaySound("C:\orest trail.wav", winsound.SND_ASYNC)
        os.system('cls')
        Forest10()

    elif myPlayer.location == 'Forest9':

        winsound.PlaySound("C:\orest trail.wav", winsound.SND_ASYNC)
        os.system('cls')
        Forest9()

    elif myPlayer.location == 'Forest8':

        winsound.PlaySound("C:\orest trail.wav", winsound.SND_ASYNC)
        os.system('cls')
        Forest8()

    elif myPlayer.location == 'Forest7':

        winsound.PlaySound("C:\orest trail.wav", winsound.SND_ASYNC)
        os.system('cls')
        Forest7()

    elif myPlayer.location == 'Forest6':

        winsound.PlaySound("C:\orest trail.wav", winsound.SND_ASYNC)
        os.system('cls')
        Forest6()

    elif myPlayer.location == 'Forest5':

        winsound.PlaySound("C:\orest trail.wav", winsound.SND_ASYNC)
        os.system('cls')
        Forest5()

    elif myPlayer.location == 'Forest4':

        winsound.PlaySound("C:\orest trail.wav", winsound.SND_ASYNC)
        os.system('cls')
        Forest4()

    elif myPlayer.location == 'Forest3':

        winsound.PlaySound("C:\orest trail.wav", winsound.SND_ASYNC)
        os.system('cls')
        Forest3()

    elif myPlayer.location == 'Forest2':

        winsound.PlaySound("C:\orest trail.wav", winsound.SND_ASYNC)
        os.system('cls')
        Forest2()

    elif myPlayer.location == 'Forest1':

        winsound.PlaySound("C:\orest trail.wav", winsound.SND_ASYNC)
        os.system('cls')
        Forest1()

    elif myPlayer.location == 'Street':

        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Weather_counter_step()
        Street()
    elif myPlayer.location == 'Street2':

        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Street2()

    elif myPlayer.location == 'Street3':

        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Street3()
    elif myPlayer.location == 'Street4':

        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Street4()

    elif myPlayer.location == 'Guest Lobby':
        winsound.PlaySound("C:\Door_open_wood.wav", winsound.SND_ASYNC)
        os.system('cls')
        Guest_Lobby()

    elif myPlayer.location == 'Guest Conference':
        winsound.PlaySound("C:\soft_walk.wav", winsound.SND_ASYNC)
        os.system('cls')
        Guest_Conference()
    elif myPlayer.location == 'Guest Cafe':
        winsound.PlaySound("C:\soft_walk.wav", winsound.SND_ASYNC)
        os.system('cls')
        Guest_cafe()
    elif myPlayer.location == 'Guest Research':
        winsound.PlaySound("C:\soft_walk.wav", winsound.SND_ASYNC)
        os.system('cls')
        Guest_research()


    elif myPlayer.location == 'Shack':
        winsound.PlaySound("C:\Door_open_wood.wav", winsound.SND_ASYNC)
        os.system('cls')
        Shack()
    ##########################################################################################

    ###########Foyer
    elif myPlayer.location == 'Foyer_House1':
        winsound.PlaySound("C:\soft_walk.wav", winsound.SND_ASYNC)
        os.system('cls')
        Foyer_House1()
    elif myPlayer.location == 'Foyer_House2':
        winsound.PlaySound("C:\soft_walk.wav", winsound.SND_ASYNC)
        os.system('cls')
        Foyer_House2()
    elif myPlayer.location == 'Foyer_House3':
        winsound.PlaySound("C:\soft_walk.wav", winsound.SND_ASYNC)
        os.system('cls')
        Foyer_House3()
    elif myPlayer.location == 'Foyer_House4':
        winsound.PlaySound("C:\soft_walk.wav", winsound.SND_ASYNC)
        os.system('cls')
        Foyer_House4()
    elif myPlayer.location == 'Foyer_House5':
        winsound.PlaySound("C:\soft_walk.wav", winsound.SND_ASYNC)
        os.system('cls')
        Foyer_House5()

        ###########BedRoom
    elif myPlayer.location == 'BedRoom_House6':
        winsound.PlaySound("C:\Door_open_wood.wav", winsound.SND_ASYNC)
        os.system('cls')
        BedRoom_House6()
    elif myPlayer.location == 'BedRoom_House7':
        winsound.PlaySound("C:\Door_open_wood.wav", winsound.SND_ASYNC)
        os.system('cls')
        BedRoom_House7()
    ###########LivingRoom
    elif myPlayer.location == 'LivingRoom_House8':
        winsound.PlaySound("C:\soft_walk.wav", winsound.SND_ASYNC)
        os.system('cls')
        LivingRoom_House8()
    elif myPlayer.location == 'LivingRoom_House9':
        winsound.PlaySound("C:\soft_walk.wav", winsound.SND_ASYNC)
        os.system('cls')
        LivingRoom_House9()
    elif myPlayer.location == 'LivingRoom_House10':
        winsound.PlaySound("C:\soft_walk.wav", winsound.SND_ASYNC)
        os.system('cls')
        LivingRoom_House10()
    elif myPlayer.location == 'LivingRoom_House11':
        winsound.PlaySound("C:\soft_walk.wav", winsound.SND_ASYNC)
        os.system('cls')
        LivingRoom_House11()
    elif myPlayer.location == 'LivingRoom_House12':
        winsound.PlaySound("C:\soft_walk.wav", winsound.SND_ASYNC)
        os.system('cls')
        LivingRoom_House12()
    elif myPlayer.location == 'LivingRoom_House13':
        winsound.PlaySound("C:\soft_walk.wav", winsound.SND_ASYNC)
        os.system('cls')
        LivingRoom_House13()
    elif myPlayer.location == 'LivingRoom_House14':
        winsound.PlaySound("C:\soft_walk.wav", winsound.SND_ASYNC)
        os.system('cls')
        LivingRoom_House14()
    elif myPlayer.location == 'LivingRoom_House15':
        winsound.PlaySound("C:\soft_walk.wav", winsound.SND_ASYNC)
        os.system('cls')
        LivingRoom_House15()
    elif myPlayer.location == 'LivingRoom_House16':
        winsound.PlaySound("C:\soft_walk.wav", winsound.SND_ASYNC)
        os.system('cls')
        LivingRoom_House16()
        ###########Kitchen
    elif myPlayer.location == 'Kitchen_House17':
        winsound.PlaySound("C:\soft_walk.wav", winsound.SND_ASYNC)
        os.system('cls')
        Kitchen_House17()
        ##########Garden
    elif myPlayer.location == 'Garden1':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden1()
    elif myPlayer.location == 'Garden2':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden2()
    elif myPlayer.location == 'Garden3':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden3()
    elif myPlayer.location == 'Garden4':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden4()
    elif myPlayer.location == 'Garden5':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden5()
    elif myPlayer.location == 'Garden6':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden6()
    elif myPlayer.location == 'Garden7':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden7()
    elif myPlayer.location == 'Garden8':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden8()
    elif myPlayer.location == 'Garden9':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden9()
    elif myPlayer.location == 'Garden10':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden10()
    elif myPlayer.location == 'Garden11':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden11()
    elif myPlayer.location == 'Garden12':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden12()
    elif myPlayer.location == 'Garden13':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden13()
    elif myPlayer.location == 'Garden14':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden14()
    elif myPlayer.location == 'Garden15':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden15()
    elif myPlayer.location == 'Garden16':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden16()
    elif myPlayer.location == 'Garden17':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden17()
    elif myPlayer.location == 'Garden18':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden18()
    elif myPlayer.location == 'Garden19':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden19()
    elif myPlayer.location == 'Garden20':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden20()
    elif myPlayer.location == 'Garden21':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden21()
    elif myPlayer.location == 'Garden22':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden22()
    elif myPlayer.location == 'Garden23':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden23()
    elif myPlayer.location == 'Garden24':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden24()
    elif myPlayer.location == 'Garden25':
        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
        os.system('cls')
        Garden25()


#########################################################################################

#### Definitions ####
ZONENAME = ''
DESCRIPTION = 'description'
EXAMINATION = 'examine'
SOLVED = 'solved'
LOCKED_CHEST = 'Locked chest'
OBJECT = 'object'
ITEM = 'item'
ITEM_EXIST = 'item exist'
UP = 'up'
DOWN = 'down'
LEFT = 'left'
RIGHT = 'right'
MOB = 'mob'
NPC_EXIST = 'NPC exist'
NPC_NAME = 'NPC name'
MOB_DIFFICULTY = ' Mob Difficulty'
CRATE = 'Crate existing'
NORTH = 'North'
SOUTH = 'south'
EAST = 'east'
WEST = 'west'
BOSS_TF = 'Boss true or False'

areamap = {
    'dungeon_Right1': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right1',
        DOWN: 'dungeon_Right1',
        LEFT: 'dungeon_Main17',
        RIGHT:'dungeon_Right2',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,
        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },

    'dungeon_Right2': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',

                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right2',
        DOWN: 'dungeon_Right2',
        LEFT: 'dungeon_Right1',
        RIGHT:'dungeon_Right3' ,
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,
        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST: False,
        WEST: False,

    },
    'dungeon_Right3': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right3',
        DOWN: 'dungeon_Right3',
        LEFT: 'dungeon_Right2',
        RIGHT:'dungeon_Right4' ,
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_Right4': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right4',
        DOWN: 'dungeon_Right4',
        LEFT: 'dungeon_Right3',
        RIGHT:'dungeon_Right5' ,
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Right5': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right5',
        DOWN: 'dungeon_Right6',
        LEFT: 'dungeon_Right4',
        RIGHT:'dungeon_Right5' ,
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_Right6': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right5',
        DOWN: 'dungeon_Right7',
        LEFT: 'dungeon_Right6',
        RIGHT:'dungeon_Right6' ,
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Right7': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right6',
        DOWN: 'dungeon_Right8',
        LEFT: 'dungeon_Right7',
        RIGHT:'dungeon_Right7' ,
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_Right8': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right7',
        DOWN: 'dungeon_Right13',
        LEFT: 'dungeon_Right14',
        RIGHT:'dungeon_Right12' ,
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Right9': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right9',
        DOWN: 'dungeon_Right12',
        LEFT: 'dungeon_Right8',
        RIGHT:'dungeon_Right10' ,
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_Right10': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right10',
        DOWN: 'dungeon_Right11',
        LEFT: 'dungeon_Right9',
        RIGHT:'dungeon_Right10' ,
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: True,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Right11': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
        SOLVED: True,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right10',
        DOWN: 'dungeon_Right22',
        LEFT: 'dungeon_Right12',
        RIGHT:'dungeon_Right11' ,
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_Right12': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right9',
        DOWN: 'dungeon_Right21',
        LEFT: 'dungeon_Right13',
        RIGHT:'dungeon_Right11' ,
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Right13': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right8',
        DOWN: 'dungeon_Right20',
        LEFT: 'dungeon_Right14',
        RIGHT:'dungeon_Right12' ,
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_Right14': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right15',
        DOWN: 'dungeon_Right19',
        LEFT: 'dungeon_Right17',
        RIGHT:'dungeon_Right13' ,
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Right15': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right15',
        DOWN: 'dungeon_Right14',
        LEFT: 'dungeon_Right16',
        RIGHT:'dungeon_Right8' ,
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_Right16': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right16',
        DOWN: 'dungeon_Right17',
        LEFT: 'dungeon_Right16',
        RIGHT:'dungeon_Right15' ,
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_Right17': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right16',
        DOWN: 'dungeon_Right18',
        LEFT: 'dungeon_Right17',
        RIGHT:'dungeon_Right14' ,
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Right18': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right17',
        DOWN: 'dungeon_Right27',
        LEFT: 'dungeon_Right18',
        RIGHT:'dungeon_Right19' ,
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_Right19': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right14',
        DOWN: 'dungeon_Right26',
        LEFT: 'dungeon_Right18',
        RIGHT:'dungeon_Right20',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Right20': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right13',
        DOWN: 'dungeon_Right25',
        LEFT: 'dungeon_Right19',
        RIGHT:'dungeon_Right21' ,
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Right21': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right12',
        DOWN: 'dungeon_Right24',
        LEFT: 'dungeon_Right20',
        RIGHT:'dungeon_Right22' ,
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Right22': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right11',
        DOWN: 'dungeon_Right23',
        LEFT: 'dungeon_Right21',
        RIGHT:'dungeon_Right22' ,
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Right23': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
        SOLVED: True,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right22',
        DOWN: 'dungeon_Right23',
        LEFT: 'dungeon_Right24',
        RIGHT: 'dungeon_Right23',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Right24': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right21',
        DOWN: 'dungeon_Right24',
        LEFT: 'dungeon_Right25',
        RIGHT: 'dungeon_Right23',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Right25': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right20',
        DOWN: 'dungeon_Bottom_Right1',
        LEFT: 'dungeon_Right26',
        RIGHT: 'dungeon_Right24',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: True,
        EAST:False,
        WEST:False,
    },
    'dungeon_Right26': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right19',
        DOWN: 'dungeon_Right26',
        LEFT: 'dungeon_Right27',
        RIGHT: 'dungeon_Right25',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Right27': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'The cavern appears to have been used many centuries ago. It is but a relic of a forgotten time.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right18',
        DOWN: 'dungeon_Right27',
        LEFT: 'dungeon_Right27',
        RIGHT: 'dungeon_Right26',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: True,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
####################################################

    'dungeon_Main1': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft28',
        DOWN: 'dungeon_Main2',
        LEFT: 'dungeon_Main1',
        RIGHT: 'dungeon_Main1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Main2': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main1',
        DOWN: 'dungeon_Main3',
        LEFT: 'dungeon_Main2',
        RIGHT: 'dungeon_Main2',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Main3': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main2',
        DOWN: 'dungeon_Main4',
        LEFT: 'dungeon_Main3',
        RIGHT: 'dungeon_Main3',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Main4': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main3',
        DOWN: 'dungeon_Main5',
        LEFT: 'dungeon_Main4',
        RIGHT: 'dungeon_Main4',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_Main5': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main4',
        DOWN: 'dungeon_Main14',
        LEFT: 'dungeon_Main6',
        RIGHT: 'dungeon_Main26',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Main6': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main6',
        DOWN: 'dungeon_Main7',
        LEFT: 'dungeon_Main6',
        RIGHT: 'dungeon_Main5',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Main7': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main6',
        DOWN: 'dungeon_Main12',
        LEFT: 'dungeon_Main8',
        RIGHT: 'dungeon_Main14',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: True,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Main8': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
        SOLVED: True,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main8',
        DOWN: 'dungeon_Main9',
        LEFT: 'dungeon_Main8',
        RIGHT: 'dungeon_Main7',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_Main9': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main8',
        DOWN: 'dungeon_Main10',
        LEFT: 'dungeon_left1',
        RIGHT: 'dungeon_Main12',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:True,
    },
    'dungeon_Main10': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main9',
        DOWN: 'dungeon_Main10',
        LEFT: 'dungeon_Main10',
        RIGHT: 'dungeon_Main11',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Main11': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main12',
        DOWN: 'dungeon_Main23',
        LEFT: 'dungeon_Main10',
        RIGHT: 'dungeon_Main21',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: True,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Main12': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main7',
        DOWN: 'dungeon_Main11',
        LEFT: 'dungeon_Main9',
        RIGHT: 'dungeon_Main13',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_Main13': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main14',
        DOWN: 'dungeon_Main21',
        LEFT: 'dungeon_Main12',
        RIGHT: 'dungeon_Main16',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Main14': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main5',
        DOWN: 'dungeon_Main13',
        LEFT: 'dungeon_Main7',
        RIGHT: 'dungeon_Main15',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Main15': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main26',
        DOWN: 'dungeon_Main16',
        LEFT: 'dungeon_Main14',
        RIGHT: 'dungeon_Main18',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Main16': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main15',
        DOWN: 'dungeon_Main20',
        LEFT: 'dungeon_Main13',
        RIGHT: 'dungeon_Main17',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_Main17': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
        SOLVED: True,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main18',
        DOWN: 'dungeon_Main19',
        LEFT: 'dungeon_Main16',
        RIGHT: 'dungeon_Right1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_Main18': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main18',
        DOWN: 'dungeon_Main17',
        LEFT: 'dungeon_Main15',
        RIGHT: 'dungeon_Main18',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Main19': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main17',
        DOWN: 'dungeon_Main19',
        LEFT: 'dungeon_Main20',
        RIGHT: 'dungeon_Main19',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Main20': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main16',
        DOWN: 'dungeon_Main24',
        LEFT: 'dungeon_Main21',
        RIGHT: 'dungeon_Main19',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_Main21': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main13',
        DOWN: 'dungeon_Main22',
        LEFT: 'dungeon_Main11',
        RIGHT: 'dungeon_Main20',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Main22': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main21',
        DOWN: 'dungeon_Main25',
        LEFT: 'dungeon_Main23',
        RIGHT: 'dungeon_Main24',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Main23': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main11',
        DOWN: 'dungeon_Main23',
        LEFT: 'dungeon_Main23',
        RIGHT: 'dungeon_Main22',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Main24': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main20',
        DOWN: 'dungeon_Main24',
        LEFT: 'dungeon_Main22',
        RIGHT: 'dungeon_Main24',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: True,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_Main25': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main22',
        DOWN: 'dungeon_Main25',
        LEFT: 'dungeon_Main25',
        RIGHT: 'dungeon_Main25',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Main26': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A grand opening in the mouth of the cave, mysterious tunnels looked excavated centuries ago',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main26',
        DOWN: 'dungeon_Main15',
        LEFT: 'dungeon_Main5',
        RIGHT: 'dungeon_Main26',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: True,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_Bottom_Right1': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Dark internal cavern, like the belly of the beast',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Right25',
        DOWN: 'dungeon_Bottom_Right5',
        LEFT: 'dungeon_Bottom_Right1',
        RIGHT: 'dungeon_Bottom_Right2',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Bottom_Right2': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Dark internal cavern, like the belly of the beast',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Bottom_Right2',
        DOWN: 'dungeon_Bottom_Right6',
        LEFT: 'dungeon_Bottom_Right1',
        RIGHT: 'dungeon_Bottom_Right2',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Bottom_Right3': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Dark internal cavern, like the belly of the beast',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Bottom_Right3',
        DOWN: 'dungeon_Bottom_Right8',
        LEFT: 'dungeon_Bottom_Right3',
        RIGHT: 'dungeon_Bottom_Right4',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: True,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Bottom_Right4': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Dark internal cavern, like the belly of the beast',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Bottom_Right4',
        DOWN: 'dungeon_Bottom_Right9',
        LEFT: 'dungeon_Bottom_Right3',
        RIGHT: 'dungeon_Bottom_Right5',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Bottom_Right5': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Dark internal cavern, like the belly of the beast',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Bottom_Right1',
        DOWN: 'dungeon_Bottom_Right10',
        LEFT: 'dungeon_Bottom_Right4',
        RIGHT: 'dungeon_Bottom_Right6',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Bottom_Right6': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Dark internal cavern, like the belly of the beast',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Bottom_Right2',
        DOWN: 'dungeon_Bottom_Right11',
        LEFT: 'dungeon_Bottom_Right5',
        RIGHT: 'dungeon_Bottom_Right7',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Bottom_Right7': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Dark internal cavern, like the belly of the beast',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Bottom_Right7',
        DOWN: 'dungeon_Bottom_Right12',
        LEFT: 'dungeon_Bottom_Right6',
        RIGHT: 'dungeon_Bottom_Right7',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Bottom_Right8': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Dark internal cavern, like the belly of the beast',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Bottom_Right3',
        DOWN: 'dungeon_Bottom_Right13',
        LEFT: 'dungeon_Bottom_Right8',
        RIGHT: 'dungeon_Bottom_Right9',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: True,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Bottom_Right9': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Dark internal cavern, like the belly of the beast',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Bottom_Right4',
        DOWN: 'dungeon_Bottom_Right14',
        LEFT: 'dungeon_Bottom_Right8',
        RIGHT: 'dungeon_Bottom_Right10',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Bottom_Right10': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Dark internal cavern, like the belly of the beast',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Bottom_Right5',
        DOWN: 'dungeon_Bottom_Right15',
        LEFT: 'dungeon_Bottom_Right9',
        RIGHT: 'dungeon_Bottom_Right11',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Bottom_Right11': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Dark internal cavern, like the belly of the beast',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Bottom_Right6',
        DOWN: 'dungeon_Bottom_Right16',
        LEFT: 'dungeon_Bottom_Right10',
        RIGHT: 'dungeon_Bottom_Right12',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Bottom_Right12': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Dark internal cavern, like the belly of the beast',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Bottom_Right7',
        DOWN: 'dungeon_Bottom_Right17',
        LEFT: 'dungeon_Bottom_Right11',
        RIGHT: 'dungeon_Bottom_Right12',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: True,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'dungeon_Bottom_Right13': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Dark internal cavern, like the belly of the beast',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Bottom_Right8',
        DOWN: 'dungeon_Bottom_Right18',
        LEFT: 'dungeon_bottom_right_tunnel1',
        RIGHT: 'dungeon_Bottom_Right14',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Bottom_Right14': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Dark internal cavern, like the belly of the beast',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Bottom_Right9',
        DOWN: 'dungeon_Bottom_Right19',
        LEFT: 'dungeon_Bottom_Right13',
        RIGHT: 'dungeon_Bottom_Right15',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Bottom_Right15': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Dark internal cavern, like the belly of the beast',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Bottom_Right10',
        DOWN: 'dungeon_Bottom_Right20',
        LEFT: 'dungeon_Bottom_Right14',
        RIGHT: 'dungeon_Bottom_Right16',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Bottom_Right16': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Dark internal cavern, like the belly of the beast',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Bottom_Right11',
        DOWN: 'dungeon_Bottom_Right21',
        LEFT: 'dungeon_Bottom_Right15',
        RIGHT: 'dungeon_Bottom_Right17',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Bottom_Right17': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Dark internal cavern, like the belly of the beast',
        EXAMINATION: 'EXAMINE',
                
        SOLVED: True,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Bottom_Right12',
        DOWN: 'dungeon_Bottom_Right22',
        LEFT: 'dungeon_Bottom_Right16',
        RIGHT: 'dungeon_Bottom_Right17',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Bottom_Right18': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Dark internal cavern, like the belly of the beast',
        EXAMINATION: 'EXAMINE',
                
        SOLVED: True,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Bottom_Right13',
        DOWN: 'dungeon_Bottom_Right18',
        LEFT: 'dungeon_Bottom_Right18',
        RIGHT: 'dungeon_Bottom_Right19',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_Bottom_Right19': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Dark internal cavern, like the belly of the beast',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Bottom_Right14',
        DOWN: 'dungeon_Bottom_Right19',
        LEFT: 'dungeon_Bottom_Right18',
        RIGHT: 'dungeon_Bottom_Right20',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_Bottom_Right20': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Dark internal cavern, like the belly of the beast',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Bottom_Right15',
        DOWN: 'dungeon_Bottom_Right20',
        LEFT: 'dungeon_Bottom_Right19',
        RIGHT: 'dungeon_Bottom_Right21',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_Bottom_Right21': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Dark internal cavern, like the belly of the beast',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Bottom_Right16',
        DOWN: 'dungeon_Bottom_Right21',
        LEFT: 'dungeon_Bottom_Right20',
        RIGHT: 'dungeon_Bottom_Right22',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_Bottom_Right22': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Dark internal cavern, like the belly of the beast',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Bottom_Right17',
        DOWN: 'dungeon_Bottom_Right22',
        LEFT: 'dungeon_Bottom_Right21',
        RIGHT: 'dungeon_Bottom_Right22',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_bottom_right_tunnel1': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Windy dark tunnel commonly found in many caves',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_bottom_right_tunnel1',
        DOWN: 'dungeon_bottom_right_tunnel1',
        LEFT: 'dungeon_bottom_right_tunnel2',
        RIGHT: 'dungeon_Bottom_Right13',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_bottom_right_tunnel2': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Windy dark tunnel commonly found in many caves',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_bottom_right_tunnel2',
        DOWN: 'dungeon_bottom_right_tunnel2',
        LEFT: 'dungeon_bottom_right_tunnel3',
        RIGHT: 'dungeon_bottom_right_tunnel1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_bottom_right_tunnel3': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Windy dark tunnel commonly found in many caves',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_bottom_right_tunnel3',
        DOWN: 'dungeon_bottom_right_tunnel3',
        LEFT: 'dungeon_bottom_right_tunnel4',
        RIGHT: 'dungeon_bottom_right_tunnel2',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_bottom_right_tunnel4': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Windy dark tunnel commonly found in many caves',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_bottom_right_tunnel4',
        DOWN: 'dungeon_bottom_right_tunnel_miniboss1',
        LEFT: 'dungeon_bottom_right_tunnel5',
        RIGHT: 'dungeon_bottom_right_tunnel3',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: True,
        EAST:False,
        WEST:False,
    },
    'dungeon_bottom_right_tunnel5': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Windy dark tunnel commonly found in many caves',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_bottom_right_tunnel6',
        DOWN: 'dungeon_bottom_right_tunnel5',
        LEFT: 'dungeon_bottom_right_tunnel5',
        RIGHT: 'dungeon_bottom_right_tunnel4',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_bottom_right_tunnel6': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Windy dark tunnel commonly found in many caves',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_bottom_right_tunnel7',
        DOWN: 'dungeon_bottom_right_tunnel5',
        LEFT: 'dungeon_bottom_right_tunnel6',
        RIGHT: 'dungeon_bottom_right_tunnel6',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_bottom_right_tunnel7': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Windy dark tunnel commonly found in many caves',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_Main25',
        DOWN: 'dungeon_bottom_right_tunnel6',
        LEFT: 'dungeon_bottom_right_tunnel7',
        RIGHT: 'dungeon_bottom_right_tunnel7',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_bottom_right_tunnel_miniboss1': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Small clasterphobic room, many stalactites on the ceiling and floor making movement difficult.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_bottom_right_tunnel4',
        DOWN: 'dungeon_bottom_right_tunnel_miniboss2',
        LEFT: 'dungeon_bottom_right_tunnel_miniboss1',
        RIGHT: 'dungeon_bottom_right_tunnel_miniboss1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_bottom_right_tunnel_miniboss2': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Small clasterphobic room, many stalactites on the ceiling and floor making movement difficult.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_bottom_right_tunnel_miniboss1',
        DOWN: 'dungeon_bottom_right_tunnel_miniboss7',
        LEFT: 'dungeon_bottom_right_tunnel_miniboss9',
        RIGHT: 'dungeon_bottom_right_tunnel_miniboss3',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_bottom_right_tunnel_miniboss3': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Small clasterphobic room, many stalactites on the ceiling and floor making movement difficult.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_bottom_right_tunnel_miniboss3',
        DOWN: 'dungeon_bottom_right_tunnel_miniboss4',
        LEFT: 'dungeon_bottom_right_tunnel_miniboss2',
        RIGHT: 'dungeon_bottom_right_tunnel_miniboss3',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_bottom_right_tunnel_miniboss4': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Small clasterphobic room, many stalactites on the ceiling and floor making movement difficult.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_bottom_right_tunnel_miniboss3',
        DOWN: 'dungeon_bottom_right_tunnel_miniboss5',
        LEFT: 'dungeon_bottom_right_tunnel_miniboss7',
        RIGHT: 'dungeon_bottom_right_tunnel_miniboss4',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_bottom_right_tunnel_miniboss5': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Small clasterphobic room, many stalactites on the ceiling and floor making movement difficult.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_bottom_right_tunnel_miniboss4',
        DOWN: 'dungeon_bottom_right_tunnel_miniboss5',
        LEFT: 'dungeon_bottom_right_tunnel_miniboss6',
        RIGHT: 'dungeon_bottom_right_tunnel_miniboss5',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_bottom_right_tunnel_miniboss6': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Small clasterphobic room, many stalactites on the ceiling and floor making movement difficult.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_bottom_right_tunnel_miniboss7',
        DOWN: 'dungeon_bottom_right_tunnel_miniboss6',
        LEFT: 'dungeon_bottom_right_tunnel_miniboss10',
        RIGHT: 'dungeon_bottom_right_tunnel_miniboss5',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_bottom_right_tunnel_miniboss7': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Small clasterphobic room, many stalactites on the ceiling and floor making movement difficult.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_bottom_right_tunnel_miniboss2',
        DOWN: 'dungeon_bottom_right_tunnel_miniboss6',
        LEFT: 'dungeon_bottom_right_tunnel_miniboss8',
        RIGHT: 'dungeon_bottom_right_tunnel_miniboss4',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_bottom_right_tunnel_miniboss8': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Small clasterphobic room, many stalactites on the ceiling and floor making movement difficult.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_bottom_right_tunnel_miniboss9',
        DOWN: 'dungeon_bottom_right_tunnel_miniboss10',
        LEFT: 'dungeon_bottom_right_tunnel_miniboss8',
        RIGHT: 'dungeon_bottom_right_tunnel_miniboss7',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_bottom_right_tunnel_miniboss9': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Small clasterphobic room, many stalactites on the ceiling and floor making movement difficult.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_bottom_right_tunnel_miniboss9',
        DOWN: 'dungeon_bottom_right_tunnel_miniboss8',
        LEFT: 'dungeon_bottom_right_tunnel_miniboss9',
        RIGHT: 'dungeon_bottom_right_tunnel_miniboss2',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: True,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_bottom_right_tunnel_miniboss10': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Small clasterphobic room, many stalactites on the ceiling and floor making movement difficult.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_bottom_right_tunnel_miniboss8',
        DOWN: 'dungeon_bottom_right_tunnel_miniboss10',
        LEFT: 'dungeon_bottom_right_tunnel_miniboss10',
        RIGHT: 'dungeon_bottom_right_tunnel_miniboss6',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_left1': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Many echos are heard as water droplets fall and unseen creatures crawl around the cavern floor',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_left2',
        DOWN: 'dungeon_left9',
        LEFT: 'dungeon_left6',
        RIGHT: 'dungeon_Main9',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_left2': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Many echos are heard as water droplets fall and unseen creatures crawl around the cavern floor',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_left2',
        DOWN: 'dungeon_left1',
        LEFT: 'dungeon_left3',
        RIGHT: 'dungeon_left2',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_left3': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Many echos are heard as water droplets fall and unseen creatures crawl around the cavern floor',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_left3',
        DOWN: 'dungeon_left6',
        LEFT: 'dungeon_left4',
        RIGHT: 'dungeon_left2',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_left4': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Many echos are heard as water droplets fall and unseen creatures crawl around the cavern floor',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_left4',
        DOWN: 'dungeon_left5',
        LEFT: 'dungeon_left4',
        RIGHT: 'dungeon_left3',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_left5': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Many echos are heard as water droplets fall and unseen creatures crawl around the cavern floor',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_left4',
        DOWN: 'dungeon_left8',
        LEFT: 'dungeon_boss_room1',
        RIGHT: 'dungeon_left6',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:True,
    },
    'dungeon_left6': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Many echos are heard as water droplets fall and unseen creatures crawl around the cavern floor',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_left3',
        DOWN: 'dungeon_left7',
        LEFT: 'dungeon_left5',
        RIGHT: 'dungeon_left1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_left7': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Many echos are heard as water droplets fall and unseen creatures crawl around the cavern floor',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_left6',
        DOWN: 'dungeon_left7',
        LEFT: 'dungeon_left8',
        RIGHT: 'dungeon_left9',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_left8': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Many echos are heard as water droplets fall and unseen creatures crawl around the cavern floor',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_left5',
        DOWN: 'dungeon_left8',
        LEFT: 'dungeon_left8',
        RIGHT: 'dungeon_left7',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: True,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_left9': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'Many echos are heard as water droplets fall and unseen creatures crawl around the cavern floor',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_left1',
        DOWN: 'dungeon_left9',
        LEFT: 'dungeon_left7',
        RIGHT: 'dungeon_left9',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: True,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'dungeon_boss_room1': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A strong presence is felt in this cavern, something of great importance has taken place here.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_boss_room10',
        DOWN: 'dungeon_boss_room2',
        LEFT: 'dungeon_boss_room8',
        RIGHT: 'dungeon_left5',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_boss_room2': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A strong presence is felt in this cavern, something of great importance has taken place here.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_boss_room1',
        DOWN: 'dungeon_boss_room3',
        LEFT: 'dungeon_boss_room7',
        RIGHT: 'dungeon_boss_room2',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_boss_room3': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A strong presence is felt in this cavern, something of great importance has taken place here.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_boss_room2',
        DOWN: 'dungeon_boss_room4',
        LEFT: 'dungeon_boss_room6',
        RIGHT: 'dungeon_boss_room3',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_boss_room4': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A strong presence is felt in this cavern, something of great importance has taken place here.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_boss_room3',
        DOWN: 'dungeon_boss_room4',
        LEFT: 'dungeon_boss_room5',
        RIGHT: 'dungeon_boss_room4',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_boss_room5': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A strong presence is felt in this cavern, something of great importance has taken place here.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_boss_room6',
        DOWN: 'dungeon_boss_room5',
        LEFT: 'dungeon_boss_room18',
        RIGHT: 'dungeon_boss_room4',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: True,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_boss_room6': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A strong presence is felt in this cavern, something of great importance has taken place here.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_boss_room7',
        DOWN: 'dungeon_boss_room5',
        LEFT: 'dungeon_boss_room17',
        RIGHT: 'dungeon_boss_room3',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_boss_room7': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A strong presence is felt in this cavern, something of great importance has taken place here.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_boss_room8',
        DOWN: 'dungeon_boss_room6',
        LEFT: 'dungeon_boss_room16',
        RIGHT: 'dungeon_boss_room2',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_boss_room8': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A strong presence is felt in this cavern, something of great importance has taken place here.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_boss_room9',
        DOWN: 'dungeon_boss_room7',
        LEFT: 'dungeon_boss_room15',
        RIGHT: 'dungeon_boss_room1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_boss_room9': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A strong presence is felt in this cavern, something of great importance has taken place here.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_boss_room12',
        DOWN: 'dungeon_boss_room8',
        LEFT: 'dungeon_boss_room14',
        RIGHT: 'dungeon_boss_room10',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_boss_room10': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A strong presence is felt in this cavern, something of great importance has taken place here.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_boss_room11',
        DOWN: 'dungeon_boss_room1',
        LEFT: 'dungeon_boss_room9',
        RIGHT: 'dungeon_boss_room10',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_boss_room11': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A strong presence is felt in this cavern, something of great importance has taken place here.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_boss_room11',
        DOWN: 'dungeon_boss_room10',
        LEFT: 'dungeon_boss_room12',
        RIGHT: 'dungeon_boss_room11',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,

        CRATE: True,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_boss_room12': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A strong presence is felt in this cavern, something of great importance has taken place here.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_boss_room12',
        DOWN: 'dungeon_boss_room9',
        LEFT: 'dungeon_boss_room13',
        RIGHT: 'dungeon_boss_room11',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_boss_room13': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A strong presence is felt in this cavern, something of great importance has taken place here.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_boss_room13',
        DOWN: 'dungeon_boss_room14',
        LEFT: 'dungeon_boss_room13',
        RIGHT: 'dungeon_boss_room12',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,

        CRATE: True,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_boss_room14': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A strong presence is felt in this cavern, something of great importance has taken place here.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_boss_room13',
        DOWN: 'dungeon_boss_room15',
        LEFT: 'dungeon_boss_room19',
        RIGHT: 'dungeon_boss_room9',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_boss_room15': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A strong presence is felt in this cavern, something of great importance has taken place here.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_boss_room14',
        DOWN: 'dungeon_boss_room16',
        LEFT: 'dungeon_boss_room20',
        RIGHT: 'dungeon_boss_room8',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_boss_room16': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A strong presence is felt in this cavern, something of great importance has taken place here.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_boss_room15',
        DOWN: 'dungeon_boss_room17',
        LEFT: 'dungeon_boss_room21',
        RIGHT: 'dungeon_boss_room7',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_boss_room17': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A strong presence is felt in this cavern, something of great importance has taken place here.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_boss_room16',
        DOWN: 'dungeon_boss_room18',
        LEFT: 'dungeon_boss_room22',
        RIGHT: 'dungeon_boss_room6',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_boss_room18': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A strong presence is felt in this cavern, something of great importance has taken place here.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_boss_room17',
        DOWN: 'dungeon_boss_room18',
        LEFT: 'dungeon_boss_room18',
        RIGHT: 'dungeon_boss_room5',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_boss_room19': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A strong presence is felt in this cavern, something of great importance has taken place here.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_boss_room19',
        DOWN: 'dungeon_boss_room20',
        LEFT: 'dungeon_boss_room19',
        RIGHT: 'dungeon_boss_room14',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_boss_room20': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A strong presence is felt in this cavern, something of great importance has taken place here.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_boss_room19',
        DOWN: 'dungeon_boss_room21',
        LEFT: 'dungeon_boss_room20',
        RIGHT: 'dungeon_boss_room15',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'dungeon_boss_room21': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A strong presence is felt in this cavern, something of great importance has taken place here.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: True,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_boss_room20',
        DOWN: 'dungeon_boss_room22',
        LEFT: 'dungeon_boss_room21',
        RIGHT: 'dungeon_boss_room16',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:True,
    },
    'dungeon_boss_room22': {
        ZONENAME: 'Forest Cavern',
        DESCRIPTION: 'A strong presence is felt in this cavern, something of great importance has taken place here.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'dungeon_boss_room21',
        DOWN: 'dungeon_boss_room22',
        LEFT: 'dungeon_boss_room22',
        RIGHT: 'dungeon_boss_room17',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 7,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },






    ####################################################

    'Healing_inn_aden1': {
        ZONENAME: 'Inn',
        DESCRIPTION: 'Remote Inn for those who wander and desperately need a oasis',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Healing_inn_aden6',
        DOWN: 'CityOfAdenLower25',
        LEFT: 'Healing_inn_aden10',
        RIGHT: 'Healing_inn_aden2',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Healing_inn_aden2': {
        ZONENAME: 'Inn',
        DESCRIPTION: 'Remote Inn for those who wander and desperately need a oasis',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Healing_inn_aden5',
        DOWN: 'Healing_inn_aden2',
        LEFT: 'Healing_inn_aden1',
        RIGHT: 'Healing_inn_aden3',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Healing_inn_aden3': {
        ZONENAME: 'Inn',
        DESCRIPTION: 'Remote Inn for those who wander and desperately need a oasis',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Healing_inn_aden4',
        DOWN: 'Healing_inn_aden3',
        LEFT: 'Healing_inn_aden2',
        RIGHT: 'Healing_inn_aden3',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Healing_inn_aden4': {
        ZONENAME: 'Inn',
        DESCRIPTION: 'Remote Inn for those who wander and desperately need a oasis',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Healing_inn_aden4',
        DOWN: 'Healing_inn_aden3',
        LEFT: 'Healing_inn_aden5',
        RIGHT: 'Healing_inn_aden4',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Healing_inn_aden5': {
        ZONENAME: 'Inn',
        DESCRIPTION: 'Remote Inn for those who wander and desperately need a oasis',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Healing_inn_aden5',
        DOWN: 'Healing_inn_aden2',
        LEFT: 'Healing_inn_aden6',
        RIGHT: 'Healing_inn_aden4',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Healing_inn_aden6': {
        ZONENAME: 'Inn',
        DESCRIPTION: 'Remote Inn for those who wander and desperately need a oasis',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Healing_inn_aden11',
        DOWN: 'Healing_inn_aden1',
        LEFT: 'Healing_inn_aden7',
        RIGHT: 'Healing_inn_aden5',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Healing_inn_aden7': {
        ZONENAME: 'Inn',
        DESCRIPTION: 'Remote Inn for those who wander and desperately need a oasis',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Healing_inn_aden7',
        DOWN: 'Healing_inn_aden10',
        LEFT: 'Healing_inn_aden8',
        RIGHT: 'Healing_inn_aden6',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Healing_inn_aden8': {
        ZONENAME: 'Inn',
        DESCRIPTION: 'Remote Inn for those who wander and desperately need a oasis',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Healing_inn_aden8',
        DOWN: 'Healing_inn_aden9',
        LEFT: 'Healing_inn_aden8',
        RIGHT: 'Healing_inn_aden7',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Healing_inn_aden9': {
        ZONENAME: 'Inn',
        DESCRIPTION: 'Remote Inn for those who wander and desperately need a oasis',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Healing_inn_aden8',
        DOWN: 'Healing_inn_aden9',
        LEFT: 'Healing_inn_aden9',
        RIGHT: 'Healing_inn_aden10',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Healing_inn_aden10': {
        ZONENAME: 'Inn',
        DESCRIPTION: 'Remote Inn for those who wander and desperately need a oasis',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Healing_inn_aden7',
        DOWN: 'Healing_inn_aden10',
        LEFT: 'Healing_inn_aden9',
        RIGHT: 'Healing_inn_aden1',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Healing_inn_aden11': {
        ZONENAME: 'Inn',
        DESCRIPTION: 'Remote Inn for those who wander and desperately need a oasis',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Healing_inn_aden11',
        DOWN: 'Healing_inn_aden6',
        LEFT: 'Healing_inn_aden11',
        RIGHT: 'Healing_inn_aden11',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Healing_inn1': {
        ZONENAME: 'Inn',
        DESCRIPTION: 'Remote Inn for those who wander and desperately need a oasis',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Healing_inn6',
        DOWN: 'Wild_Forest_TopLeft7',
        LEFT: 'Healing_inn10',
        RIGHT: 'Healing_inn2',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Healing_inn2': {
        ZONENAME: 'Inn',
        DESCRIPTION: 'Remote Inn for those who wander and desperately need a oasis',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Healing_inn5',
        DOWN: 'Healing_inn2',
        LEFT: 'Healing_inn1',
        RIGHT: 'Healing_inn3',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Healing_inn3': {
        ZONENAME: 'Inn',
        DESCRIPTION: 'Remote Inn for those who wander and desperately need a oasis',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Healing_inn4',
        DOWN: 'Healing_inn3',
        LEFT: 'Healing_inn2',
        RIGHT: 'Healing_inn3',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Healing_inn4': {
        ZONENAME: 'Inn',
        DESCRIPTION: 'Remote Inn for those who wander and desperately need a oasis',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Healing_inn4',
        DOWN: 'Healing_inn3',
        LEFT: 'Healing_inn5',
        RIGHT: 'Healing_inn4',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Healing_inn5': {
        ZONENAME: 'Inn',
        DESCRIPTION: 'Remote Inn for those who wander and desperately need a oasis',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Healing_inn5',
        DOWN: 'Healing_inn2',
        LEFT: 'Healing_inn6',
        RIGHT: 'Healing_inn4',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Healing_inn6': {
        ZONENAME: 'Inn',
        DESCRIPTION: 'Remote Inn for those who wander and desperately need a oasis',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Healing_inn11',
        DOWN: 'Healing_inn1',
        LEFT: 'Healing_inn7',
        RIGHT: 'Healing_inn5',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Healing_inn7': {
        ZONENAME: 'Inn',
        DESCRIPTION: 'Remote Inn for those who wander and desperately need a oasis',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Healing_inn7',
        DOWN: 'Healing_inn10',
        LEFT: 'Healing_inn8',
        RIGHT: 'Healing_inn6',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Healing_inn8': {
        ZONENAME: 'Inn',
        DESCRIPTION: 'Remote Inn for those who wander and desperately need a oasis',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Healing_inn8',
        DOWN: 'Healing_inn9',
        LEFT: 'Healing_inn8',
        RIGHT: 'Healing_inn9',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Healing_inn9': {
        ZONENAME: 'Inn',
        DESCRIPTION: 'Remote Inn for those who wander and desperately need a oasis',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Healing_inn8',
        DOWN: 'Healing_inn9',
        LEFT: 'Healing_inn9',
        RIGHT: 'Healing_inn10',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Healing_inn10': {
        ZONENAME: 'Inn',
        DESCRIPTION: 'Remote Inn for those who wander and desperately need a oasis',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Healing_inn7',
        DOWN: 'Healing_inn10',
        LEFT: 'Healing_inn9',
        RIGHT: 'Healing_inn1',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Healing_inn11': {
        ZONENAME: 'Inn',
        DESCRIPTION: 'Remote Inn for those who wander and desperately need a oasis',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Healing_inn11',
        DOWN: 'Healing_inn6',
        LEFT: 'Healing_inn11',
        RIGHT: 'Healing_inn11',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Wild_Forest_CenterFour1': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour1',
        DOWN: 'Wild_Forest_CenterFour12',
        LEFT: 'Wild_Forest_CenterFour2',
        RIGHT: 'Wild_Forest_CenterFour1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Wild_Forest_CenterFour2': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour2',
        DOWN: 'Wild_Forest_CenterFour11',
        LEFT: 'Wild_Forest_CenterFour3',
        RIGHT: 'Wild_Forest_CenterFour1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Wild_Forest_CenterFour3': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter27',
        DOWN: 'Wild_Forest_CenterFour10',
        LEFT: 'Wild_Forest_CenterFour4',
        RIGHT: 'Wild_Forest_CenterFour2',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',

        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Wild_Forest_CenterFour4': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour4',
        DOWN: 'Wild_Forest_CenterFour9',
        LEFT: 'Wild_Forest_CenterFour5',
        RIGHT: 'Wild_Forest_CenterFour3',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Wild_Forest_CenterFour5': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour5',
        DOWN: 'Wild_Forest_CenterFour8',
        LEFT: 'Wild_Forest_CenterFour6',
        RIGHT: 'Wild_Forest_CenterFour4',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Wild_Forest_CenterFour6': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour6',
        DOWN: 'Wild_Forest_CenterFour7',
        LEFT: 'Wild_Forest_CenterFour6',
        RIGHT: 'Wild_Forest_CenterFour5',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Wild_Forest_CenterFour7': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour6',
        DOWN: 'Wild_Forest_CenterFour18',
        LEFT: 'Wild_Forest_CenterFour7',
        RIGHT: 'Wild_Forest_CenterFour8',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Wild_Forest_CenterFour8': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour5',
        DOWN: 'Wild_Forest_CenterFour17',
        LEFT: 'Wild_Forest_CenterFour7',
        RIGHT: 'Wild_Forest_CenterFour9',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Wild_Forest_CenterFour9': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour4',
        DOWN: 'Wild_Forest_CenterFour16',
        LEFT: 'Wild_Forest_CenterFour8',
        RIGHT: 'Wild_Forest_CenterFour10',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Wild_Forest_CenterFour10': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour3',
        DOWN: 'Wild_Forest_CenterFour15',
        LEFT: 'Wild_Forest_CenterFour9',
        RIGHT: 'Wild_Forest_CenterFour11',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Wild_Forest_CenterFour11': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour2',
        DOWN: 'Wild_Forest_CenterFour14',
        LEFT: 'Wild_Forest_CenterFour10',
        RIGHT: 'Wild_Forest_CenterFour12',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Wild_Forest_CenterFour12': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour1',
        DOWN: 'Wild_Forest_CenterFour13',
        LEFT: 'Wild_Forest_CenterFour11',
        RIGHT: 'Wild_Forest_CenterFour12',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Wild_Forest_CenterFour13': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour12',
        DOWN: 'Wild_Forest_CenterFour24',
        LEFT: 'Wild_Forest_CenterFour14',
        RIGHT: 'Wild_Forest_SideRight18',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_CenterFour14': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour11',
        DOWN: 'Wild_Forest_CenterFour23',
        LEFT: 'Wild_Forest_CenterFour15',
        RIGHT: 'Wild_Forest_CenterFour13',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_CenterFour15': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour10',
        DOWN: 'Wild_Forest_CenterFour22',
        LEFT: 'Wild_Forest_CenterFour16',
        RIGHT: 'Wild_Forest_CenterFour14',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_CenterFour16': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour9',
        DOWN: 'Wild_Forest_CenterFour21',
        LEFT: 'Wild_Forest_CenterFour17',
        RIGHT: 'Wild_Forest_CenterFour15',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',

        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Wild_Forest_CenterFour17': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour8',
        DOWN: 'Wild_Forest_CenterFour20',
        LEFT: 'Wild_Forest_CenterFour18',
        RIGHT: 'Wild_Forest_CenterFour16',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_CenterFour18': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour7',
        DOWN: 'Wild_Forest_CenterFour19',
        LEFT: 'Wild_Forest_SideLeft13',
        RIGHT: 'Wild_Forest_CenterFour17',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_CenterFour19': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour18',
        DOWN: 'Wild_Forest_CenterFour30',
        LEFT: 'Wild_Forest_CenterFour19',
        RIGHT: 'Wild_Forest_CenterFour20',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_CenterFour20': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour17',
        DOWN: 'Wild_Forest_CenterFour29',
        LEFT: 'Wild_Forest_CenterFour19',
        RIGHT: 'Wild_Forest_CenterFour21',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_CenterFour21': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour16',
        DOWN: 'Wild_Forest_CenterFour28',
        LEFT: 'Wild_Forest_CenterFour20',
        RIGHT: 'Wild_Forest_CenterFour22',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_CenterFour22': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour15',
        DOWN: 'Wild_Forest_CenterFour27',
        LEFT: 'Wild_Forest_CenterFour21',
        RIGHT: 'Wild_Forest_CenterFour23',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_CenterFour23': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour14',
        DOWN: 'Wild_Forest_CenterFour26',
        LEFT: 'Wild_Forest_CenterFour22',
        RIGHT: 'Wild_Forest_CenterFour24',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_CenterFour24': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour13',
        DOWN: 'Wild_Forest_CenterFour25',
        LEFT: 'Wild_Forest_CenterFour23',
        RIGHT: 'Wild_Forest_CenterFour24',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_CenterFour25': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour24',
        DOWN: 'Wild_Forest_CenterFour25',
        LEFT: 'Wild_Forest_CenterFour26',
        RIGHT: 'Wild_Forest_CenterFour25',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_CenterFour26': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour23',
        DOWN: 'Wild_Forest_CenterFour26',
        LEFT: 'Wild_Forest_CenterFour27',
        RIGHT: 'Wild_Forest_CenterFour25',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_CenterFour27': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour22',
        DOWN: 'Wild_Forest_BottomCenter3',
        LEFT: 'Wild_Forest_CenterFour28',
        RIGHT: 'Wild_Forest_CenterFour26',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_CenterFour28': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour21',
        DOWN: 'Wild_Forest_CenterFour28',
        LEFT: 'Wild_Forest_CenterFour29',
        RIGHT: 'Wild_Forest_CenterFour27',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_CenterFour29': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour20',
        DOWN: 'Wild_Forest_CenterFour29',
        LEFT: 'Wild_Forest_CenterFour30',
        RIGHT: 'Wild_Forest_CenterFour28',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_CenterFour30': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour19',
        DOWN: 'Wild_Forest_CenterFour30',
        LEFT: 'Wild_Forest_CenterFour30',
        RIGHT: 'Wild_Forest_CenterFour29',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight1': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight1',
        DOWN: 'Wild_Forest_TopRight12',
        LEFT: 'Wild_Forest_TopRight2',
        RIGHT: 'Wild_Forest_TopRight1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight2': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight2',
        DOWN: 'Wild_Forest_TopRight11',
        LEFT: 'Wild_Forest_TopRight3',
        RIGHT: 'Wild_Forest_TopRight1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight3': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight3',
        DOWN: 'Wild_Forest_TopRight10',
        LEFT: 'Wild_Forest_TopRight4',
        RIGHT: 'Wild_Forest_TopRight2',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight4': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight4',
        DOWN: 'Wild_Forest_TopRight9',
        LEFT: 'Wild_Forest_TopRight5',
        RIGHT: 'Wild_Forest_TopRight3',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight5': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight5',
        DOWN: 'Wild_Forest_TopRight8',
        LEFT: 'Wild_Forest_TopRight6',
        RIGHT: 'Wild_Forest_TopRight4',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight6': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight6',
        DOWN: 'Wild_Forest_TopRight7',
        LEFT: 'Wild_Forest_TopRight6',
        RIGHT: 'Wild_Forest_TopRight5',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight7': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight6',
        DOWN: 'Wild_Forest_TopRight18',
        LEFT: 'Wild_Forest_TopRight7',
        RIGHT: 'Wild_Forest_TopRight8',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight8': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight5',
        DOWN: 'Wild_Forest_TopRight17',
        LEFT: 'Wild_Forest_TopRight7',
        RIGHT: 'Wild_Forest_TopRight9',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight9': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight4',
        DOWN: 'Wild_Forest_TopRight16',
        LEFT: 'Wild_Forest_TopRight8',
        RIGHT: 'Wild_Forest_TopRight10',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight10': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight3',
        DOWN: 'Wild_Forest_TopRight15',
        LEFT: 'Wild_Forest_TopRight9',
        RIGHT: 'Wild_Forest_TopRight11',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight11': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight2',
        DOWN: 'Wild_Forest_TopRight14',
        LEFT: 'Wild_Forest_TopRight10',
        RIGHT: 'Wild_Forest_TopRight12',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight12': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight1',
        DOWN: 'Wild_Forest_TopRight13',
        LEFT: 'Wild_Forest_TopRight11',
        RIGHT: 'Wild_Forest_TopRight12',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight13': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight12',
        DOWN: 'Wild_Forest_TopRight24',
        LEFT: 'Wild_Forest_TopRight14',
        RIGHT: 'Wild_Forest_TopRight13',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight14': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight11',
        DOWN: 'Wild_Forest_TopRight23',
        LEFT: 'Wild_Forest_TopRight15',
        RIGHT: 'Wild_Forest_TopRight13',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight15': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight10',
        DOWN: 'Wild_Forest_TopRight22',
        LEFT: 'Wild_Forest_TopRight16',
        RIGHT: 'Wild_Forest_TopRight14',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',

        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight16': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight9',
        DOWN: 'Wild_Forest_TopRight21',
        LEFT: 'Wild_Forest_TopRight17',
        RIGHT: 'Wild_Forest_TopRight15',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight17': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight8',
        DOWN: 'Wild_Forest_TopRight20',
        LEFT: 'Wild_Forest_TopRight18',
        RIGHT: 'Wild_Forest_TopRight16',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight18': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight7',
        DOWN: 'Wild_Forest_TopRight19',
        LEFT: 'Wild_Forest_TopCenter13',
        RIGHT: 'Wild_Forest_TopRight17',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight19': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight18',
        DOWN: 'Wild_Forest_TopRight30',
        LEFT: 'Wild_Forest_TopRight19',
        RIGHT: 'Wild_Forest_TopRight20',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight20': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight17',
        DOWN: 'Wild_Forest_TopRight29',
        LEFT: 'Wild_Forest_TopRight19',
        RIGHT: 'Wild_Forest_TopRight21',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight21': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight16',
        DOWN: 'Wild_Forest_TopRight28',
        LEFT: 'Wild_Forest_TopRight20',
        RIGHT: 'Wild_Forest_TopRight22',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight22': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight15',
        DOWN: 'Wild_Forest_TopRight27',
        LEFT: 'Wild_Forest_TopRight21',
        RIGHT: 'Wild_Forest_TopRight23',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight23': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight14',
        DOWN: 'Wild_Forest_TopRight26',
        LEFT: 'Wild_Forest_TopRight22',
        RIGHT: 'Wild_Forest_TopRight24',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight24': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight13',
        DOWN: 'Wild_Forest_TopRight25',
        LEFT: 'Wild_Forest_TopRight23',
        RIGHT: 'Wild_Forest_TopRight24',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight25': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight24',
        DOWN: 'Wild_Forest_TopRight25',
        LEFT: 'Wild_Forest_TopRight26',
        RIGHT: 'Wild_Forest_TopRight25',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight26': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight23',
        DOWN: 'Wild_Forest_TopRight26',
        LEFT: 'Wild_Forest_TopRight27',
        RIGHT: 'Wild_Forest_TopRight25',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight27': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight22',
        DOWN: 'Wild_Forest_TopRight27',
        LEFT: 'Wild_Forest_TopRight28',
        RIGHT: 'Wild_Forest_TopRight26',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight28': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight21',
        DOWN: 'Wild_Forest_SideRight4',
        LEFT: 'Wild_Forest_TopRight29',
        RIGHT: 'Wild_Forest_TopRight27',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Wild_Forest_TopRight29': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight20',
        DOWN: 'Wild_Forest_TopRight29',
        LEFT: 'Wild_Forest_TopRight30',
        RIGHT: 'Wild_Forest_TopRight28',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopRight30': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight19',
        DOWN: 'Wild_Forest_TopRight30',
        LEFT: 'Wild_Forest_TopRight30',
        RIGHT: 'Wild_Forest_TopRight29',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft1': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft1',
        DOWN: 'Wild_Forest_TopLeft12',
        LEFT: 'Wild_Forest_TopLeft2',
        RIGHT: 'Wild_Forest_TopLeft1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft2': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft2',
        DOWN: 'Wild_Forest_TopLeft11',
        LEFT: 'Wild_Forest_TopLeft3',
        RIGHT: 'Wild_Forest_TopLeft1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft3': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft3',
        DOWN: 'Wild_Forest_TopLeft10',
        LEFT: 'Wild_Forest_TopLeft4',
        RIGHT: 'Wild_Forest_TopLeft2',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft4': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft4',
        DOWN: 'Wild_Forest_TopLeft9',
        LEFT: 'Wild_Forest_TopLeft5',
        RIGHT: 'Wild_Forest_TopLeft3',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft5': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft5',
        DOWN: 'Wild_Forest_TopLeft8',
        LEFT: 'Wild_Forest_TopLeft6',
        RIGHT: 'Wild_Forest_TopLeft4',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft6': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft6',
        DOWN: 'Wild_Forest_TopLeft7',
        LEFT: 'Wild_Forest_TopLeft6',
        RIGHT: 'Wild_Forest_TopLeft5',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft7': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft6',
        DOWN: 'Wild_Forest_TopLeft18',
        LEFT: 'Healing_inn1',
        RIGHT: 'Wild_Forest_TopLeft8',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft8': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft5',
        DOWN: 'Wild_Forest_TopLeft17',
        LEFT: 'Wild_Forest_TopLeft7',
        RIGHT: 'Wild_Forest_TopLeft9',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft9': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft4',
        DOWN: 'Wild_Forest_TopLeft16',
        LEFT: 'Wild_Forest_TopLeft8',
        RIGHT: 'Wild_Forest_TopLeft10',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft10': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft3',
        DOWN: 'Wild_Forest_TopLeft15',
        LEFT: 'Wild_Forest_TopLeft9',
        RIGHT: 'Wild_Forest_TopLeft11',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft11': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft2',
        DOWN: 'Wild_Forest_TopLeft14',
        LEFT: 'Wild_Forest_TopLeft10',
        RIGHT: 'Wild_Forest_TopLeft12',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft12': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft1',
        DOWN: 'Wild_Forest_TopLeft13',
        LEFT: 'Wild_Forest_TopLeft11',
        RIGHT: 'Wild_Forest_TopLeft12',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft13': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft12',
        DOWN: 'Wild_Forest_TopLeft24',
        LEFT: 'Wild_Forest_TopLeft14',
        RIGHT: 'Wild_Forest_TopCenter18',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft14': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft11',
        DOWN: 'Wild_Forest_TopLeft23',
        LEFT: 'Wild_Forest_TopLeft15',
        RIGHT: 'Wild_Forest_TopLeft13',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Wild_Forest_TopLeft15': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft10',
        DOWN: 'Wild_Forest_TopLeft22',
        LEFT: 'Wild_Forest_TopLeft16',
        RIGHT: 'Wild_Forest_TopLeft14',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft16': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft9',
        DOWN: 'Wild_Forest_TopLeft21',
        LEFT: 'Wild_Forest_TopLeft17',
        RIGHT: 'Wild_Forest_TopLeft15',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft17': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft8',
        DOWN: 'Wild_Forest_TopLeft20',
        LEFT: 'Wild_Forest_TopLeft18',
        RIGHT: 'Wild_Forest_TopLeft16',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft18': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft7',
        DOWN: 'Wild_Forest_TopLeft19',
        LEFT: 'Wild_Forest_TopLeft18',
        RIGHT: 'Wild_Forest_TopLeft17',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft19': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft18',
        DOWN: 'Wild_Forest_TopLeft30',
        LEFT: 'Wild_Forest_TopLeft19',
        RIGHT: 'Wild_Forest_TopLeft20',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft20': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft17',
        DOWN: 'Wild_Forest_TopLeft29',
        LEFT: 'Wild_Forest_TopLeft19',
        RIGHT: 'Wild_Forest_TopLeft21',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft21': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft16',
        DOWN: 'Wild_Forest_TopLeft28',
        LEFT: 'Wild_Forest_TopLeft20',
        RIGHT: 'Wild_Forest_TopLeft22',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft22': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft15',
        DOWN: 'Wild_Forest_TopLeft27',
        LEFT: 'Wild_Forest_TopLeft21',
        RIGHT: 'Wild_Forest_TopLeft23',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft23': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft14',
        DOWN: 'Wild_Forest_TopLeft26',
        LEFT: 'Wild_Forest_TopLeft22',
        RIGHT: 'Wild_Forest_TopLeft24',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft24': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft13',
        DOWN: 'Wild_Forest_TopLeft25',
        LEFT: 'Wild_Forest_TopLeft23',
        RIGHT: 'Wild_Forest_TopLeft24',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft25': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft24',
        DOWN: 'Wild_Forest_TopLeft25',
        LEFT: 'Wild_Forest_TopLeft26',
        RIGHT: 'Wild_Forest_TopLeft25',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft26': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft23',
        DOWN: 'Wild_Forest_TopLeft26',
        LEFT: 'Wild_Forest_TopLeft27',
        RIGHT: 'Wild_Forest_TopLeft25',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft27': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft22',
        DOWN: 'Wild_Forest_SideLeft3',
        LEFT: 'Wild_Forest_TopLeft28',
        RIGHT: 'Wild_Forest_TopLeft26',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft28': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft21',
        DOWN: 'Wild_Forest_TopLeft28',
        LEFT: 'Wild_Forest_TopLeft29',
        RIGHT: 'Wild_Forest_TopLeft27',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft29': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft20',
        DOWN: 'Wild_Forest_TopLeft29',
        LEFT: 'Wild_Forest_TopLeft30',
        RIGHT: 'Wild_Forest_TopLeft28',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopLeft30': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft19',
        DOWN: 'Wild_Forest_TopLeft30',
        LEFT: 'Wild_Forest_TopLeft30',
        RIGHT: 'Wild_Forest_TopLeft29',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight1': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight1',
        DOWN: 'Wild_Forest_BottomRight12',
        LEFT: 'Wild_Forest_BottomRight2',
        RIGHT: 'Wild_Forest_BottomRight1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight2': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight2',
        DOWN: 'Wild_Forest_BottomRight11',
        LEFT: 'Wild_Forest_BottomRight3',
        RIGHT: 'Wild_Forest_BottomRight1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight3': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight3',
        DOWN: 'Wild_Forest_BottomRight10',
        LEFT: 'Wild_Forest_BottomRight4',
        RIGHT: 'Wild_Forest_BottomRight2',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Wild_Forest_BottomRight4': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight28',
        DOWN: 'Wild_Forest_BottomRight9',
        LEFT: 'Wild_Forest_BottomRight5',
        RIGHT: 'Wild_Forest_BottomRight3',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight5': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight5',
        DOWN: 'Wild_Forest_BottomRight8',
        LEFT: 'Wild_Forest_BottomRight6',
        RIGHT: 'Wild_Forest_BottomRight4',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight6': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight6',
        DOWN: 'Wild_Forest_BottomRight7',
        LEFT: 'Wild_Forest_BottomRight6',
        RIGHT: 'Wild_Forest_BottomRight5',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight7': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight6',
        DOWN: 'Wild_Forest_BottomRight18',
        LEFT: 'Wild_Forest_BottomRight7',
        RIGHT: 'Wild_Forest_BottomRight8',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight8': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight5',
        DOWN: 'Wild_Forest_BottomRight17',
        LEFT: 'Wild_Forest_BottomRight7',
        RIGHT: 'Wild_Forest_BottomRight9',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight9': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight4',
        DOWN: 'Wild_Forest_BottomRight16',
        LEFT: 'Wild_Forest_BottomRight8',
        RIGHT: 'Wild_Forest_BottomRight10',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight10': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight3',
        DOWN: 'Wild_Forest_BottomRight15',
        LEFT: 'Wild_Forest_BottomRight9',
        RIGHT: 'Wild_Forest_BottomRight11',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight11': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight2',
        DOWN: 'Wild_Forest_BottomRight14',
        LEFT: 'Wild_Forest_BottomRight10',
        RIGHT: 'Wild_Forest_BottomRight12',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight12': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight1',
        DOWN: 'Wild_Forest_BottomRight13',
        LEFT: 'Wild_Forest_BottomRight11',
        RIGHT: 'Wild_Forest_BottomRight12',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight13': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight12',
        DOWN: 'Wild_Forest_BottomRight24',
        LEFT: 'Wild_Forest_BottomRight14',
        RIGHT: 'Wild_Forest_BottomRight13',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight14': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight11',
        DOWN: 'Wild_Forest_BottomRight23',
        LEFT: 'Wild_Forest_BottomRight15',
        RIGHT: 'Wild_Forest_BottomRight13',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight15': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight10',
        DOWN: 'Wild_Forest_BottomRight22',
        LEFT: 'Wild_Forest_BottomRight16',
        RIGHT: 'Wild_Forest_BottomRight14',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight16': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight9',
        DOWN: 'Wild_Forest_BottomRight21',
        LEFT: 'Wild_Forest_BottomRight17',
        RIGHT: 'Wild_Forest_BottomRight15',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight17': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight8',
        DOWN: 'Wild_Forest_BottomRight20',
        LEFT: 'Wild_Forest_BottomRight18',
        RIGHT: 'Wild_Forest_BottomRight16',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight18': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight7',
        DOWN: 'Wild_Forest_BottomRight19',
        LEFT: 'Wild_Forest_BottomCenter13',
        RIGHT: 'Wild_Forest_BottomRight17',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight19': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight18',
        DOWN: 'Wild_Forest_BottomRight30',
        LEFT: 'Wild_Forest_BottomRight19',
        RIGHT: 'Wild_Forest_BottomRight20',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight20': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight17',
        DOWN: 'Wild_Forest_BottomRight29',
        LEFT: 'Wild_Forest_BottomRight19',
        RIGHT: 'Wild_Forest_BottomRight21',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight21': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight16',
        DOWN: 'Wild_Forest_BottomRight28',
        LEFT: 'Wild_Forest_BottomRight20',
        RIGHT: 'Wild_Forest_BottomRight22',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight22': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight15',
        DOWN: 'Wild_Forest_BottomRight27',
        LEFT: 'Wild_Forest_BottomRight21',
        RIGHT: 'Wild_Forest_BottomRight23',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight23': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight14',
        DOWN: 'Wild_Forest_BottomRight26',
        LEFT: 'Wild_Forest_BottomRight22',
        RIGHT: 'Wild_Forest_BottomRight24',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight24': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight13',
        DOWN: 'Wild_Forest_BottomRight25',
        LEFT: 'Wild_Forest_BottomRight23',
        RIGHT: 'Wild_Forest_BottomRight24',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Wild_Forest_BottomRight25': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight24',
        DOWN: 'Wild_Forest_BottomRight25',
        LEFT: 'Wild_Forest_BottomRight26',
        RIGHT: 'Wild_Forest_BottomRight25',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight26': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight23',
        DOWN: 'Wild_Forest_BottomRight26',
        LEFT: 'Wild_Forest_BottomRight27',
        RIGHT: 'Wild_Forest_BottomRight25',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight27': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight22',
        DOWN: 'Wild_Forest_BottomRight27',
        LEFT: 'Wild_Forest_BottomRight28',
        RIGHT: 'Wild_Forest_BottomRight26',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight28': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight21',
        DOWN: 'Wild_Forest_BottomRight28',
        LEFT: 'Wild_Forest_BottomRight29',
        RIGHT: 'Wild_Forest_BottomRight27',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight29': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight20',
        DOWN: 'Wild_Forest_BottomRight29',
        LEFT: 'Wild_Forest_BottomRight30',
        RIGHT: 'Wild_Forest_BottomRight28',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomRight30': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomRight19',
        DOWN: 'Wild_Forest_BottomRight30',
        LEFT: 'Wild_Forest_BottomRight30',
        RIGHT: 'Wild_Forest_BottomRight29',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft1': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft1',
        DOWN: 'Wild_Forest_BottomLeft12',
        LEFT: 'Wild_Forest_BottomLeft2',
        RIGHT: 'Wild_Forest_BottomLeft1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft2': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft2',
        DOWN: 'Wild_Forest_BottomLeft11',
        LEFT: 'Wild_Forest_BottomLeft3',
        RIGHT: 'Wild_Forest_BottomLeft1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft3': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft27',
        DOWN: 'Wild_Forest_BottomLeft10',
        LEFT: 'Wild_Forest_BottomLeft4',
        RIGHT: 'Wild_Forest_BottomLeft2',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft4': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft4',
        DOWN: 'Wild_Forest_BottomLeft9',
        LEFT: 'Wild_Forest_BottomLeft5',
        RIGHT: 'Wild_Forest_BottomLeft3',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft5': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft5',
        DOWN: 'Wild_Forest_BottomLeft8',
        LEFT: 'Wild_Forest_BottomLeft6',
        RIGHT: 'Wild_Forest_BottomLeft4',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft6': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft6',
        DOWN: 'Wild_Forest_BottomLeft7',
        LEFT: 'Wild_Forest_BottomLeft6',
        RIGHT: 'Wild_Forest_BottomLeft4',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft7': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft6',
        DOWN: 'Wild_Forest_BottomLeft18',
        LEFT: 'Wild_Forest_BottomLeft7',
        RIGHT: 'Wild_Forest_BottomLeft8',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft8': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft5',
        DOWN: 'Wild_Forest_BottomLeft17',
        LEFT: 'Wild_Forest_BottomLeft7',
        RIGHT: 'Wild_Forest_BottomLeft9',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft9': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft4',
        DOWN: 'Wild_Forest_BottomLeft16',
        LEFT: 'Wild_Forest_BottomLeft8',
        RIGHT: 'Wild_Forest_BottomLeft10',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft10': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft3',
        DOWN: 'Wild_Forest_BottomLeft15',
        LEFT: 'Wild_Forest_BottomLeft9',
        RIGHT: 'Wild_Forest_BottomLeft11',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft11': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft2',
        DOWN: 'Wild_Forest_BottomLeft14',
        LEFT: 'Wild_Forest_BottomLeft10',
        RIGHT: 'Wild_Forest_BottomLeft12',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft12': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft1',
        DOWN: 'Wild_Forest_BottomLeft13',
        LEFT: 'Wild_Forest_BottomLeft11',
        RIGHT: 'Wild_Forest_BottomLeft12',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft13': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft12',
        DOWN: 'Wild_Forest_BottomLeft24',
        LEFT: 'Wild_Forest_BottomLeft14',
        RIGHT: 'Wild_Forest_BottomCenter18',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft14': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft11',
        DOWN: 'Wild_Forest_BottomLeft23',
        LEFT: 'Wild_Forest_BottomLeft15',
        RIGHT: 'Wild_Forest_BottomLeft13',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft15': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft10',
        DOWN: 'Wild_Forest_BottomLeft22',
        LEFT: 'Wild_Forest_BottomLeft16',
        RIGHT: 'Wild_Forest_BottomLeft14',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft16': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft9',
        DOWN: 'Wild_Forest_BottomLeft21',
        LEFT: 'Wild_Forest_BottomLeft17',
        RIGHT: 'Wild_Forest_BottomLeft15',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft17': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft8',
        DOWN: 'Wild_Forest_BottomLeft20',
        LEFT: 'Wild_Forest_BottomLeft18',
        RIGHT: 'Wild_Forest_BottomLeft16',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft18': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft7',
        DOWN: 'Wild_Forest_BottomLeft19',
        LEFT: 'Wild_Forest_BottomLeft18',
        RIGHT: 'Wild_Forest_BottomLeft17',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft19': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft18',
        DOWN: 'Wild_Forest_BottomLeft30',
        LEFT: 'Wild_Forest_BottomLeft19',
        RIGHT: 'Wild_Forest_BottomLeft20',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft20': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft17',
        DOWN: 'Wild_Forest_BottomLeft29',
        LEFT: 'Wild_Forest_BottomLeft19',
        RIGHT: 'Wild_Forest_BottomLeft21',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft21': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft16',
        DOWN: 'Wild_Forest_BottomLeft28',
        LEFT: 'Wild_Forest_BottomLeft20',
        RIGHT: 'Wild_Forest_BottomLeft22',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft22': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft15',
        DOWN: 'Wild_Forest_BottomLeft27',
        LEFT: 'Wild_Forest_BottomLeft21',
        RIGHT: 'Wild_Forest_BottomLeft23',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft23': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft14',
        DOWN: 'Wild_Forest_BottomLeft26',
        LEFT: 'Wild_Forest_BottomLeft22',
        RIGHT: 'Wild_Forest_BottomLeft24',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft24': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft13',
        DOWN: 'Wild_Forest_BottomLeft25',
        LEFT: 'Wild_Forest_BottomLeft23',
        RIGHT: 'Wild_Forest_BottomLeft24',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft25': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft24',
        DOWN: 'Wild_Forest_BottomLeft25',
        LEFT: 'Wild_Forest_BottomLeft26',
        RIGHT: 'Wild_Forest_BottomLeft25',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft26': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft23',
        DOWN: 'Wild_Forest_BottomLeft26',
        LEFT: 'Wild_Forest_BottomLeft27',
        RIGHT: 'Wild_Forest_BottomLeft25',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft27': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft22',
        DOWN: 'Wild_Forest_BottomLeft27',
        LEFT: 'Wild_Forest_BottomLeft28',
        RIGHT: 'Wild_Forest_BottomLeft26',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft28': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft21',
        DOWN: 'dungeon_Main1',
        LEFT: 'Wild_Forest_BottomLeft29',
        RIGHT: 'Wild_Forest_BottomLeft27',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft29': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft20',
        DOWN: 'Wild_Forest_BottomLeft29',
        LEFT: 'Wild_Forest_BottomLeft30',
        RIGHT: 'Wild_Forest_BottomLeft28',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomLeft30': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomLeft19',
        DOWN: 'Wild_Forest_BottomLe30',
        LEFT: 'Wild_Forest_BottomLeft30',
        RIGHT: 'Wild_Forest_BottomLeft29',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight1': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight1',
        DOWN: 'Wild_Forest_SideRight12',
        LEFT: 'Wild_Forest_SideRight2',
        RIGHT: 'Wild_Forest_SideRight1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight2': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight2',
        DOWN: 'Wild_Forest_SideRight11',
        LEFT: 'Wild_Forest_SideRight3',
        RIGHT: 'Wild_Forest_SideRight1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight3': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight3',
        DOWN: 'Wild_Forest_SideRight10',
        LEFT: 'Wild_Forest_SideRight4',
        RIGHT: 'Wild_Forest_SideRight2',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight4': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopRight28',
        DOWN: 'Wild_Forest_SideRight9',
        LEFT: 'Wild_Forest_SideRight5',
        RIGHT: 'Wild_Forest_SideRight3',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight5': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight5',
        DOWN: 'Wild_Forest_SideRight8',
        LEFT: 'Wild_Forest_SideRight6',
        RIGHT: 'Wild_Forest_SideRight4',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight6': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight6',
        DOWN: 'Wild_Forest_SideRight7',
        LEFT: 'Wild_Forest_SideRight6',
        RIGHT: 'Wild_Forest_SideRight5',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight7': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight6',
        DOWN: 'Wild_Forest_SideRight18',
        LEFT: 'Wild_Forest_SideRight7',
        RIGHT: 'Wild_Forest_SideRight8',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight8': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight5',
        DOWN: 'Wild_Forest_SideRight17',
        LEFT: 'Wild_Forest_SideRight7',
        RIGHT: 'Wild_Forest_SideRight9',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight9': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight4',
        DOWN: 'Wild_Forest_SideRight16',
        LEFT: 'Wild_Forest_SideRight8',
        RIGHT: 'Wild_Forest_SideRight10',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight10': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight3',
        DOWN: 'Wild_Forest_SideRight15',
        LEFT: 'Wild_Forest_SideRight9',
        RIGHT: 'Wild_Forest_SideRight11',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight11': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight2',
        DOWN: 'Wild_Forest_SideRight14',
        LEFT: 'Wild_Forest_SideRight10',
        RIGHT: 'Wild_Forest_SideRight12',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight12': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight1',
        DOWN: 'Wild_Forest_SideRight13',
        LEFT: 'Wild_Forest_SideRight11',
        RIGHT: 'Wild_Forest_SideRight12',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight13': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight12',
        DOWN: 'Wild_Forest_SideRight24',
        LEFT: 'Wild_Forest_SideRight14',
        RIGHT: 'Forest2',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight14': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight11',
        DOWN: 'Wild_Forest_SideRight23',
        LEFT: 'Wild_Forest_SideRight15',
        RIGHT: 'Wild_Forest_SideRight13',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight15': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight10',
        DOWN: 'Wild_Forest_SideRight22',
        LEFT: 'Wild_Forest_SideRight16',
        RIGHT: 'Wild_Forest_SideRight14',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight16': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight9',
        DOWN: 'Wild_Forest_SideRight21',
        LEFT: 'Wild_Forest_SideRight17',
        RIGHT: 'Wild_Forest_SideRight15',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight17': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight8',
        DOWN: 'Wild_Forest_SideRight20',
        LEFT: 'Wild_Forest_SideRight18',
        RIGHT: 'Wild_Forest_SideRight16',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight18': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight7',
        DOWN: 'Wild_Forest_SideRight19',
        LEFT: 'Wild_Forest_CenterFour13',
        RIGHT: 'Wild_Forest_SideRight17',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight19': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight18',
        DOWN: 'Wild_Forest_SideRight30',
        LEFT: 'Wild_Forest_SideRight19',
        RIGHT: 'Wild_Forest_SideRight20',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight20': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight17',
        DOWN: 'Wild_Forest_SideRight29',
        LEFT: 'Wild_Forest_SideRight19',
        RIGHT: 'Wild_Forest_SideRight21',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight21': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight16',
        DOWN: 'Wild_Forest_SideRight28',
        LEFT: 'Wild_Forest_SideRight20',
        RIGHT: 'Wild_Forest_SideRight22',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight22': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight15',
        DOWN: 'Wild_Forest_SideRight27',
        LEFT: 'Wild_Forest_SideRight21',
        RIGHT: 'Wild_Forest_SideRight23',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight23': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight14',
        DOWN: 'Wild_Forest_SideRight26',
        LEFT: 'Wild_Forest_SideRight22',
        RIGHT: 'Wild_Forest_SideRight24',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',

        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Wild_Forest_SideRight24': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight13',
        DOWN: 'Wild_Forest_SideRight25',
        LEFT: 'Wild_Forest_SideRight23',
        RIGHT: 'Wild_Forest_SideRight24',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight25': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight24',
        DOWN: 'Wild_Forest_SideRight25',
        LEFT: 'Wild_Forest_SideRight26',
        RIGHT: 'Wild_Forest_SideRight25',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight26': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight23',
        DOWN: 'Wild_Forest_SideRight26',
        LEFT: 'Wild_Forest_SideRight27',
        RIGHT: 'Wild_Forest_SideRight25',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight27': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight22',
        DOWN: 'Wild_Forest_SideRight27',
        LEFT: 'Wild_Forest_SideRight28',
        RIGHT: 'Wild_Forest_SideRight26',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight28': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight21',
        DOWN: 'Wild_Forest_BottomRight4',
        LEFT: 'Wild_Forest_SideRight29',
        RIGHT: 'Wild_Forest_SideRight27',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight29': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight20',
        DOWN: 'Wild_Forest_SideRight29',
        LEFT: 'Wild_Forest_SideRight30',
        RIGHT: 'Wild_Forest_SideRight28',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideRight30': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideRight20',
        DOWN: 'Wild_Forest_SideRight29',
        LEFT: 'Wild_Forest_SideRight30',
        RIGHT: 'Wild_Forest_SideRight28',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft1': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft1',
        DOWN: 'Wild_Forest_SideLeft12',
        LEFT: 'Wild_Forest_SideLeft2',
        RIGHT: 'Wild_Forest_SideLeft1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft2': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft2',
        DOWN: 'Wild_Forest_SideLeft11',
        LEFT: 'Wild_Forest_SideLeft3',
        RIGHT: 'Wild_Forest_SideLeft1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft3': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopLeft27',
        DOWN: 'Wild_Forest_SideLeft10',
        LEFT: 'Wild_Forest_SideLeft4',
        RIGHT: 'Wild_Forest_SideLeft2',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft4': {
        ZONENAME: 'Living Room',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft4',
        DOWN: 'Wild_Forest_SideLeft9',
        LEFT: 'Wild_Forest_SideLeft5',
        RIGHT: 'Wild_Forest_SideLeft3',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft5': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft5',
        DOWN: 'Wild_Forest_SideLeft8',
        LEFT: 'Wild_Forest_SideLeft6',
        RIGHT: 'Wild_Forest_SideLeft4',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft6': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft6',
        DOWN: 'Wild_Forest_SideLeft7',
        LEFT: 'Wild_Forest_SideLeft6',
        RIGHT: 'Wild_Forest_SideLeft5',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft7': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft6',
        DOWN: 'Wild_Forest_SideLeft18',
        LEFT: 'Wild_Forest_SideLeft7',
        RIGHT: 'Wild_Forest_SideLeft8',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft8': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft5',
        DOWN: 'Wild_Forest_SideLeft17',
        LEFT: 'Wild_Forest_SideLeft7',
        RIGHT: 'Wild_Forest_SideLeft9',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft9': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft4',
        DOWN: 'Wild_Forest_SideLeft16',
        LEFT: 'Wild_Forest_SideLeft8',
        RIGHT: 'Wild_Forest_SideLeft10',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft10': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft3',
        DOWN: 'Wild_Forest_SideLeft15',
        LEFT: 'Wild_Forest_SideLeft9',
        RIGHT: 'Wild_Forest_SideLeft11',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft11': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft2',
        DOWN: 'Wild_Forest_SideLeft14',
        LEFT: 'Wild_Forest_SideLeft10',
        RIGHT: 'Wild_Forest_SideLeft12',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft12': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft1',
        DOWN: 'Wild_Forest_SideLeft13',
        LEFT: 'Wild_Forest_SideLeft11',
        RIGHT: 'Wild_Forest_SideLeft12',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft13': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft12',
        DOWN: 'Wild_Forest_SideLeft24',
        LEFT: 'Wild_Forest_SideLeft14',
        RIGHT: 'Wild_Forest_CenterFour18',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft14': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft11',
        DOWN: 'Wild_Forest_SideLeft23',
        LEFT: 'Wild_Forest_SideLeft15',
        RIGHT: 'Wild_Forest_SideLeft13',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft15': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft10',
        DOWN: 'Wild_Forest_SideLeft22',
        LEFT: 'Wild_Forest_SideLeft16',
        RIGHT: 'Wild_Forest_SideLeft14',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft16': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft9',
        DOWN: 'Wild_Forest_SideLeft21',
        LEFT: 'Wild_Forest_SideLeft17',
        RIGHT: 'Wild_Forest_SideLeft15',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft17': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft8',
        DOWN: 'Wild_Forest_SideLeft20',
        LEFT: 'Wild_Forest_SideLeft18',
        RIGHT: 'Wild_Forest_SideLeft16',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft18': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft7',
        DOWN: 'Wild_Forest_SideLeft19',
        LEFT: 'Wild_Forest_SideLeft18',
        RIGHT: 'Wild_Forest_SideLeft17',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft19': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft18',
        DOWN: 'Wild_Forest_SideLeft30',
        LEFT: 'Wild_Forest_SideLeft19',
        RIGHT: 'Wild_Forest_SideLeft20',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft20': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft17',
        DOWN: 'Wild_Forest_SideLeft29',
        LEFT: 'Wild_Forest_SideLeft19',
        RIGHT: 'Wild_Forest_SideLeft21',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft21': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft16',
        DOWN: 'Wild_Forest_SideLeft28',
        LEFT: 'Wild_Forest_SideLeft20',
        RIGHT: 'Wild_Forest_SideLeft22',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft22': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft15',
        DOWN: 'Wild_Forest_SideLeft27',
        LEFT: 'Wild_Forest_SideLeft21',
        RIGHT: 'Wild_Forest_SideLeft23',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft23': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft14',
        DOWN: 'Wild_Forest_SideLeft26',
        LEFT: 'Wild_Forest_SideLeft22',
        RIGHT: 'Wild_Forest_SideLeft24',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft24': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft13',
        DOWN: 'Wild_Forest_SideLeft25',
        LEFT: 'Wild_Forest_SideLeft23',
        RIGHT: 'Wild_Forest_SideLeft24',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft25': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft24',
        DOWN: 'Wild_Forest_SideLeft25',
        LEFT: 'Wild_Forest_SideLeft26',
        RIGHT: 'Wild_Forest_SideLeft25',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft26': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft23',
        DOWN: 'Wild_Forest_SideLeft26',
        LEFT: 'Wild_Forest_SideLeft27',
        RIGHT: 'Wild_Forest_SideLeft25',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,


        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft27': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft22',
        DOWN: 'Wild_Forest_BottomLeft3',
        LEFT: 'Wild_Forest_SideLeft28',
        RIGHT: 'Wild_Forest_SideLeft26',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft28': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft21',
        DOWN: 'Wild_Forest_SideLeft28',
        LEFT: 'Wild_Forest_SideLeft29',
        RIGHT: 'Wild_Forest_SideLeft27',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft29': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft20',
        DOWN: 'Wild_Forest_SideLeft29',
        LEFT: 'Wild_Forest_SideLeft30',
        RIGHT: 'Wild_Forest_SideLeft28',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_SideLeft30': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_SideLeft19',
        DOWN: 'Wild_Forest_SideLeft30',
        LEFT: 'Wild_Forest_SideLeft30',
        RIGHT: 'Wild_Forest_SideLeft29',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter1': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter1',
        DOWN: 'Wild_Forest_TopCenter12',
        LEFT: 'Wild_Forest_TopCenter2',
        RIGHT: 'Wild_Forest_TopCenter1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter2': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter2',
        DOWN: 'Wild_Forest_TopCenter11',
        LEFT: 'Wild_Forest_TopCenter3',
        RIGHT: 'Wild_Forest_TopCenter1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter3': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter3',
        DOWN: 'Wild_Forest_TopCenter10',
        LEFT: 'Wild_Forest_TopCenter4',
        RIGHT: 'Wild_Forest_TopCenter2',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter4': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter4',
        DOWN: 'Wild_Forest_TopCenter9',
        LEFT: 'Wild_Forest_TopCenter5',
        RIGHT: 'Wild_Forest_TopCenter3',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter5': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter5',
        DOWN: 'Wild_Forest_TopCenter8',
        LEFT: 'Wild_Forest_TopCenter6',
        RIGHT: 'Wild_Forest_TopCenter4',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter6': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter6',
        DOWN: 'Wild_Forest_TopCenter7',
        LEFT: 'Wild_Forest_TopCenter6',
        RIGHT: 'Wild_Forest_TopCenter5',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter7': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter6',
        DOWN: 'Wild_Forest_TopCenter18',
        LEFT: 'Wild_Forest_TopCenter7',
        RIGHT: 'Wild_Forest_TopCenter8',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter8': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter5',
        DOWN: 'Wild_Forest_TopCenter17',
        LEFT: 'Wild_Forest_TopCenter7',
        RIGHT: 'Wild_Forest_TopCenter9',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter9': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter4',
        DOWN: 'Wild_Forest_TopCenter16',
        LEFT: 'Wild_Forest_TopCenter8',
        RIGHT: 'Wild_Forest_TopCenter10',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter10': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter3',
        DOWN: 'Wild_Forest_TopCenter15',
        LEFT: 'Wild_Forest_TopCenter9',
        RIGHT: 'Wild_Forest_TopCenter11',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter11': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter2',
        DOWN: 'Wild_Forest_TopCenter14',
        LEFT: 'Wild_Forest_TopCenter10',
        RIGHT: 'Wild_Forest_TopCenter12',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter12': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter1',
        DOWN: 'Wild_Forest_TopCenter13',
        LEFT: 'Wild_Forest_TopCenter11',
        RIGHT: 'Wild_Forest_TopCenter12',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter13': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter12',
        DOWN: 'Wild_Forest_TopCenter24',
        LEFT: 'Wild_Forest_TopCenter14',
        RIGHT: 'Wild_Forest_TopRight18',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter14': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter11',
        DOWN: 'Wild_Forest_TopCenter23',
        LEFT: 'Wild_Forest_TopCenter15',
        RIGHT: 'Wild_Forest_TopCenter13',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter15': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter10',
        DOWN: 'Wild_Forest_TopCenter22',
        LEFT: 'Wild_Forest_TopCenter16',
        RIGHT: 'Wild_Forest_TopCenter14',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter16': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter9',
        DOWN: 'Wild_Forest_TopCenter21',
        LEFT: 'Wild_Forest_TopCenter17',
        RIGHT: 'Wild_Forest_TopCenter15',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter17': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter8',
        DOWN: 'Wild_Forest_TopCenter20',
        LEFT: 'Wild_Forest_TopCenter18',
        RIGHT: 'Wild_Forest_TopCenter16',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter18': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter7',
        DOWN: 'Wild_Forest_TopCenter19',
        LEFT: 'Wild_Forest_TopLeft13',
        RIGHT: 'Wild_Forest_TopCenter17',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter19': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter18',
        DOWN: 'Wild_Forest_TopCenter30',
        LEFT: 'Wild_Forest_TopCenter19',
        RIGHT: 'Wild_Forest_TopCenter20',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter20': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter17',
        DOWN: 'Wild_Forest_TopCenter29',
        LEFT: 'Wild_Forest_TopCenter19',
        RIGHT: 'Wild_Forest_TopCenter21',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter21': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter16',
        DOWN: 'Wild_Forest_TopCenter28',
        LEFT: 'Wild_Forest_TopCenter20',
        RIGHT: 'Wild_Forest_TopCenter22',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter22': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter15',
        DOWN: 'Wild_Forest_TopCenter27',
        LEFT: 'Wild_Forest_TopCenter21',
        RIGHT: 'Wild_Forest_TopCenter23',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter23': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter14',
        DOWN: 'Wild_Forest_TopCenter26',
        LEFT: 'Wild_Forest_TopCenter22',
        RIGHT: 'Wild_Forest_TopCenter24',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter24': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter13',
        DOWN: 'Wild_Forest_TopCenter25',
        LEFT: 'Wild_Forest_TopCenter23',
        RIGHT: 'Wild_Forest_TopCenter24',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter25': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter24',
        DOWN: 'Wild_Forest_TopCenter25',
        LEFT: 'Wild_Forest_TopCenter26',
        RIGHT: 'Wild_Forest_TopCenter25',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter26': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter23',
        DOWN: 'Wild_Forest_TopCenter26',
        LEFT: 'Wild_Forest_TopCenter27',
        RIGHT: 'Wild_Forest_TopCenter25',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter27': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter22',
        DOWN: 'Wild_Forest_CenterFour3',
        LEFT: 'Wild_Forest_TopCenter28',
        RIGHT: 'Wild_Forest_TopCenter26',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter28': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter21',
        DOWN: 'Wild_Forest_TopCenter28',
        LEFT: 'Wild_Forest_TopCenter29',
        RIGHT: 'Wild_Forest_TopCenter27',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter29': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter20',
        DOWN: 'Wild_Forest_TopCenter29',
        LEFT: 'Wild_Forest_TopCenter30',
        RIGHT: 'Wild_Forest_TopCenter28',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_TopCenter30': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_TopCenter19',
        DOWN: 'Wild_Forest_TopCenter30',
        LEFT: 'Wild_Forest_TopCenter30',
        RIGHT: 'Wild_Forest_TopCenter28',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter1': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter1',
        DOWN: 'Wild_Forest_BottomCenter12',
        LEFT: 'Wild_Forest_BottomCenter2',
        RIGHT: 'Wild_Forest_BottomCenter1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter2': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter2',
        DOWN: 'Wild_Forest_BottomCenter11',
        LEFT: 'Wild_Forest_BottomCenter3',
        RIGHT: 'Wild_Forest_BottomCenter1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter3': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_CenterFour27',
        DOWN: 'Wild_Forest_BottomCenter10',
        LEFT: 'Wild_Forest_BottomCenter4',
        RIGHT: 'Wild_Forest_BottomCenter2',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter4': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter4',
        DOWN: 'Wild_Forest_BottomCenter9',
        LEFT: 'Wild_Forest_BottomCenter5',
        RIGHT: 'Wild_Forest_BottomCenter3',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter5': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter5',
        DOWN: 'Wild_Forest_BottomCenter8',
        LEFT: 'Wild_Forest_BottomCenter6',
        RIGHT: 'Wild_Forest_BottomCenter4',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter6': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter6',
        DOWN: 'Wild_Forest_BottomCenter7',
        LEFT: 'Wild_Forest_BottomCenter6',
        RIGHT: 'Wild_Forest_BottomCenter5',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter7': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter6',
        DOWN: 'Wild_Forest_BottomCenter18',
        LEFT: 'Wild_Forest_BottomCenter7',
        RIGHT: 'Wild_Forest_BottomCenter8',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter8': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter5',
        DOWN: 'Wild_Forest_BottomCenter17',
        LEFT: 'Wild_Forest_BottomCenter7',
        RIGHT: 'Wild_Forest_BottomCenter9',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter9': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter4',
        DOWN: 'Wild_Forest_BottomCenter16',
        LEFT: 'Wild_Forest_BottomCenter8',
        RIGHT: 'Wild_Forest_BottomCenter10',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter10': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter3',
        DOWN: 'Wild_Forest_BottomCenter15',
        LEFT: 'Wild_Forest_BottomCenter9',
        RIGHT: 'Wild_Forest_BottomCenter11',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter11': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter2',
        DOWN: 'Wild_Forest_BottomCenter14',
        LEFT: 'Wild_Forest_BottomCenter10',
        RIGHT: 'Wild_Forest_BottomCenter12',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter12': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter1',
        DOWN: 'Wild_Forest_BottomCenter13',
        LEFT: 'Wild_Forest_BottomCenter11',
        RIGHT: 'Wild_Forest_BottomCenter12',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter13': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter12',
        DOWN: 'Wild_Forest_BottomCenter24',
        LEFT: 'Wild_Forest_BottomCenter14',
        RIGHT: 'Wild_Forest_BottomRight18',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter14': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter11',
        DOWN: 'Wild_Forest_BottomCenter23',
        LEFT: 'Wild_Forest_BottomCenter15',
        RIGHT: 'Wild_Forest_BottomCenter13',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter15': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter10',
        DOWN: 'Wild_Forest_BottomCenter22',
        LEFT: 'Wild_Forest_BottomCenter16',
        RIGHT: 'Wild_Forest_BottomCenter14',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter16': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter9',
        DOWN: 'Wild_Forest_BottomCenter21',
        LEFT: 'Wild_Forest_BottomCenter17',
        RIGHT: 'Wild_Forest_BottomCenter15',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter17': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter8',
        DOWN: 'Wild_Forest_BottomCenter20',
        LEFT: 'Wild_Forest_BottomCenter18',
        RIGHT: 'Wild_Forest_BottomCenter16',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter18': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter7',
        DOWN: 'Wild_Forest_BottomCenter19',
        LEFT: 'Wild_Forest_BottomLeft13',
        RIGHT: 'Wild_Forest_BottomCenter17',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter19': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter18',
        DOWN: 'Wild_Forest_BottomCenter30',
        LEFT: 'Wild_Forest_BottomCenter19',
        RIGHT: 'Wild_Forest_BottomCenter20',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter20': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter17',
        DOWN: 'Wild_Forest_BottomCenter29',
        LEFT: 'Wild_Forest_BottomCenter19',
        RIGHT: 'Wild_Forest_BottomCenter21',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter21': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter16',
        DOWN: 'Wild_Forest_BottomCenter28',
        LEFT: 'Wild_Forest_BottomCenter20',
        RIGHT: 'Wild_Forest_BottomCenter22',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter22': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter15',
        DOWN: 'Wild_Forest_BottomCenter27',
        LEFT: 'Wild_Forest_BottomCenter21',
        RIGHT: 'Wild_Forest_BottomCenter23',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter23': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter14',
        DOWN: 'Wild_Forest_BottomCenter26',
        LEFT: 'Wild_Forest_BottomCenter22',
        RIGHT: 'Wild_Forest_BottomCenter24',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter24': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter13',
        DOWN: 'Wild_Forest_BottomCenter25',
        LEFT: 'Wild_Forest_BottomCenter23',
        RIGHT: 'Wild_Forest_BottomCenter24',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter25': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter24',
        DOWN: 'Wild_Forest_BottomCenter25',
        LEFT: 'Wild_Forest_BottomCenter26',
        RIGHT: 'Wild_Forest_BottomCenter25',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter26': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter23',
        DOWN: 'Wild_Forest_BottomCenter26',
        LEFT: 'Wild_Forest_BottomCenter27',
        RIGHT: 'Wild_Forest_BottomCenter25',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter27': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter22',
        DOWN: 'Wild_Forest_BottomCenter27',
        LEFT: 'Wild_Forest_BottomCenter28',
        RIGHT: 'Wild_Forest_BottomCenter26',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter28': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter21',
        DOWN: 'Wild_Forest_BottomCenter28',
        LEFT: 'Wild_Forest_BottomCenter29',
        RIGHT: 'Wild_Forest_BottomCenter27',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter29': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter20',
        DOWN: 'Wild_Forest_BottomCenter29',
        LEFT: 'Wild_Forest_BottomCenter30',
        RIGHT: 'Wild_Forest_BottomCenter28',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Wild_Forest_BottomCenter30': {
        ZONENAME: 'Dark Forest',
        DESCRIPTION: 'Large Ominious trees and vegitation are all you can see, though there doesnt seem to be any wildlife sound.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Wild_Forest_BottomCenter19',
        DOWN: 'Wild_Forest_BottomCenter30',
        LEFT: 'Wild_Forest_BottomCenter30',
        RIGHT: 'Wild_Forest_BottomCenter29',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 6,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower1': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAden9',
        DOWN: 'CityOfAdenLower9',
        LEFT: 'CityOfAdenLower4',
        RIGHT: 'CityOfAdenLower2',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower2': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower2',
        DOWN: 'CityOfAdenLower10',
        LEFT: 'CityOfAdenLower1',
        RIGHT: 'CityOfAdenLower3',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower3': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower3',
        DOWN: 'CityOfAdenLower11',
        LEFT: 'CityOfAdenLower2',
        RIGHT: 'CityOfAdenLower3',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower4': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower4',
        DOWN: 'CityOfAdenLower8',
        LEFT: 'CityOfAdenLower5',
        RIGHT: 'CityOfAdenLower1',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower5': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower5',
        DOWN: 'CityOfAdenLower7',
        LEFT: 'CityOfAdenLower5',
        RIGHT: 'CityOfAdenLower4',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower6': {
        ZONENAME: 'City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower6',
        DOWN: 'CityOfAdenLower6',
        LEFT: 'CityOfAdenLower6',
        RIGHT: 'CityOfAdenLower7',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: True,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower7': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower5',
        DOWN: 'CityOfAdenLower13',
        LEFT: 'CityOfAdenLower6',
        RIGHT: 'CityOfAdenLower8',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower8': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower4',
        DOWN: 'CityOfAdenLower14',
        LEFT: 'CityOfAdenLower7',
        RIGHT: 'CityOfAdenLower9',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower9': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower1',
        DOWN: 'CityOfAdenLower15',
        LEFT: 'CityOfAdenLower8',
        RIGHT: 'CityOfAdenLower10',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower10': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower2',
        DOWN: 'CityOfAdenLower16',
        LEFT: 'CityOfAdenLower9',
        RIGHT: 'CityOfAdenLower11',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },

    'CityOfAdenLower11': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower3',
        DOWN: 'CityOfAdenLower17',
        LEFT: 'CityOfAdenLower10',
        RIGHT: 'CityOfAdenLower12',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',

        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower12': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower12',
        DOWN: 'CityOfAdenLower12',
        LEFT: 'CityOfAdenLower11',
        RIGHT: 'CityOfAdenLower12',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: True,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'CityOfAdenLower13': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower7',
        DOWN: 'CityOfAdenLower13',
        LEFT: 'CityOfAdenLower13',
        RIGHT: 'CityOfAdenLower14',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower14': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower8',
        DOWN: 'CityOfAdenLower14',
        LEFT: 'CityOfAdenLower13',
        RIGHT: 'CityOfAdenLower15',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower15': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower9',
        DOWN: 'CityOfAdenLower18',
        LEFT: 'CityOfAdenLower14',
        RIGHT: 'CityOfAdenLower16',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower16': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower10',
        DOWN: 'CityOfAdenLower16',
        LEFT: 'CityOfAdenLower15',
        RIGHT: 'CityOfAdenLower17',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower17': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower11',
        DOWN: 'CityOfAdenLower17',
        LEFT: 'CityOfAdenLower16',
        RIGHT: 'CityOfAdenLower17',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower18': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower15',
        DOWN: 'CityOfAdenLower25',
        LEFT: 'CityOfAdenLower21',
        RIGHT: 'CityOfAdenLower19',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower19': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower19',
        DOWN: 'CityOfAdenLower26',
        LEFT: 'CityOfAdenLower18',
        RIGHT: 'CityOfAdenLower20',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower20': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower20',
        DOWN: 'CityOfAdenLower27',
        LEFT: 'CityOfAdenLower19',
        RIGHT: 'CityOfAdenLower30',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower21': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower21',
        DOWN: 'CityOfAdenLower24',
        LEFT: 'CityOfAdenLower22',
        RIGHT: 'CityOfAdenLower18',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower22': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower22',
        DOWN: 'CityOfAdenLower23',
        LEFT: 'CityOfAdenLower28',
        RIGHT: 'CityOfAdenLower21',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower23': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower22',
        DOWN: 'CityOfAdenLower23',
        LEFT: 'CityOfAdenLower29',
        RIGHT: 'CityOfAdenLower24',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower24': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower21',
        DOWN: 'CityOfAdenLower24',
        LEFT: 'CityOfAdenLower23',
        RIGHT: 'CityOfAdenLower25',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower25': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: 'glasses',
        ITEM_EXIST: True,
        UP: 'CityOfAdenLower18',
        DOWN: 'Healing_inn_aden1',
        LEFT: 'CityOfAdenLower24',
        RIGHT: 'CityOfAdenLower26',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower26': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower19',
        DOWN: 'CityOfAdenLower26',
        LEFT: 'CityOfAdenLower25',
        RIGHT: 'CityOfAdenLower27',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower27': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower20',
        DOWN: 'CityOfAdenLower27',
        LEFT: 'CityOfAdenLower26',
        RIGHT: 'CityOfAdenLower31',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower28': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower28',
        DOWN: 'CityOfAdenLower28',
        LEFT: 'CityOfAdenLower28',
        RIGHT: 'CityOfAdenLower22',
        MOB: False,
        NPC_EXIST: True,
        NPC_NAME: '*NPC*',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower29': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower29',
        DOWN: 'CityOfAdenLower29',
        LEFT: 'CityOfAdenLower29',
        RIGHT: 'CityOfAdenLower23',
        MOB: False,
        NPC_EXIST: True,
        NPC_NAME: '*NPC*',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower30': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower30',
        DOWN: 'CityOfAdenLower30',
        LEFT: 'CityOfAdenLower20',
        RIGHT: 'CityOfAdenLower30',
        MOB: False,
        NPC_EXIST: True,
        NPC_NAME: '*NPC*',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAdenLower31': {
        ZONENAME: 'Lower City of Aden',
        DESCRIPTION: 'Beautiful Large walls protecting an ancient city,with bustling cultures mingling together in a market.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAdenLower31',
        DOWN: 'CityOfAdenLower31',
        LEFT: 'CityOfAdenLower27',
        RIGHT: 'CityOfAdenLower31',
        MOB: False,
        NPC_EXIST: True,
        NPC_NAME: '*NPC*',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAden1': {
        ZONENAME: 'City of Aden',
        DESCRIPTION: 'The great city of Aden, home to many locals in the Schwarzwald Forest',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAden2',
        DOWN: 'CityOfAden8',
        LEFT: 'Forest11',
        RIGHT: 'CityOfAden6',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAden2': {
        ZONENAME: 'City of Aden',
        DESCRIPTION: 'The great city of Aden, home to many locals in the Schwarzwald Forest',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAden3',
        DOWN: 'CityOfAden1',
        LEFT: 'CityOfAden2',
        RIGHT: 'CityOfAden5',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAden3': {
        ZONENAME: 'City of Aden',
        DESCRIPTION: 'The great city of Aden, home to many locals in the Schwarzwald Forest.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAden3',
        DOWN: 'CityOfAden2',
        LEFT: 'CityOfAden3',
        RIGHT: 'CityOfAden4',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAden4': {
        ZONENAME: 'City of Aden',
        DESCRIPTION: 'The great city of Aden, home to many locals in the Schwarzwald Forest',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAden20',
        DOWN: 'CityOfAden5',
        LEFT: 'CityOfAden3',
        RIGHT: 'CityOfAden4',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'CityOfAden5': {
        ZONENAME: 'City of Aden',
        DESCRIPTION: 'The great city of Aden, home to many locals in the Schwarzwald Forest',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAden4',
        DOWN: 'CityOfAden6',
        LEFT: 'CityOfAden2',
        RIGHT: 'CityOfAden5',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'CityOfAden6': {
        ZONENAME: 'City of Aden',
        DESCRIPTION: 'The great city of Aden, home to many locals in the Schwarzwald Forest',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAden5',
        DOWN: 'CityOfAden7',
        LEFT: 'CityOfAden1',
        RIGHT: 'CityOfAden6',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'CityOfAden7': {
        ZONENAME: 'City of Aden',
        DESCRIPTION: 'The great city of Aden, home to many locals in the Schwarzwald Forest',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAden6',
        DOWN: 'CityOfAden7',
        LEFT: 'CityOfAden8',
        RIGHT: 'CityOfAden9',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'CityOfAden8': {
        ZONENAME: 'City of Aden',
        DESCRIPTION: 'The great city of Aden, home to many locals in the Schwarzwald Forest',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAden1',
        DOWN: 'CityOfAden8',
        LEFT: 'CityOfAden8',
        RIGHT: 'CityOfAden7',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'CityOfAden9': {
        ZONENAME: 'City of Aden',
        DESCRIPTION: 'The great city of Aden, home to many locals in the Schwarzwald Forest',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAden23',
        DOWN: 'CityOfAdenLower1',
        LEFT: 'CityOfAden7',
        RIGHT: 'CityOfAden10',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'CityOfAden10': {
        ZONENAME: 'City of Aden',
        DESCRIPTION: 'The great city of Aden, home to many locals in the Schwarzwald Forest',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAden17',
        DOWN: 'CityOfAden10',
        LEFT: 'CityOfAden9',
        RIGHT: 'CityOfAden11',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'CityOfAden11': {
        ZONENAME: 'City of Aden',
        DESCRIPTION: 'The great city of Aden, home to many locals in the Schwarzwald Forest',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAden12',
        DOWN: 'CityOfAden11',
        LEFT: 'CityOfAden10',
        RIGHT: 'CityOfAden11',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'CityOfAden12': {
        ZONENAME: 'City of Aden',
        DESCRIPTION: 'The great city of Aden, home to many locals in the Schwarzwald Forest',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAden13',
        DOWN: 'CityOfAden11',
        LEFT: 'CityOfAden17',
        RIGHT: 'CityOfAden12',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'CityOfAden13': {
        ZONENAME: 'City of Aden',
        DESCRIPTION: 'The great city of Aden, home to many locals in the Schwarzwald Forest',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAden14',
        DOWN: 'CityOfAden12',
        LEFT: 'CityOfAden16',
        RIGHT: 'CityOfAden13',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'CityOfAden14': {
        ZONENAME: 'City of Aden',
        DESCRIPTION: 'The great city of Aden, home to many locals in the Schwarzwald Forest',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAden14',
        DOWN: 'CityOfAden13',
        LEFT: 'CityOfAden15',
        RIGHT: 'CityOfAden14',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'CityOfAden15': {
        ZONENAME: 'City of Aden',
        DESCRIPTION: 'The great city of Aden, home to many locals in the Schwarzwald Forest',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAden18',
        DOWN: 'CityOfAden16',
        LEFT: 'CityOfAden21',
        RIGHT: 'CityOfAden14',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'CityOfAden16': {
        ZONENAME: 'City of Aden',
        DESCRIPTION: 'The great city of Aden, home to many locals in the Schwarzwald Forest',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAden15',
        DOWN: 'CityOfAden17',
        LEFT: 'CityOfAden22',
        RIGHT: 'CityOfAden13',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'CityOfAden17': {
        ZONENAME: 'City of Aden',
        DESCRIPTION: 'The great city of Aden, home to many locals in the Schwarzwald Forest',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAden16',
        DOWN: 'CityOfAden10',
        LEFT: 'CityOfAden17',
        RIGHT: 'CityOfAden12',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'CityOfAden18': {
        ZONENAME: 'City of Aden',
        DESCRIPTION: 'The great city of Aden, home to many locals in the Schwarzwald Forest',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: True,
        ITEM: 'Crate',
        ITEM_EXIST: False,
        UP: 'CityOfAden18',
        DOWN: 'CityOfAden15',
        LEFT: 'CityOfAden19',
        RIGHT: 'CityOfAden18',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,
        CRATE: True,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'CityOfAden19': {
        ZONENAME: 'City of Aden',
        DESCRIPTION: 'The great city of Aden, home to many locals in the Schwarzwald Forest',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAden19',
        DOWN: 'CityOfAden19',
        LEFT: 'CityOfAden20',
        RIGHT: 'CityOfAden18',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: True,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'CityOfAden20': {
        ZONENAME: 'City of Aden',
        DESCRIPTION: 'The great city of Aden, home to many locals in the Schwarzwald Forest',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAden20',
        DOWN: 'CityOfAden4',
        LEFT: 'CityOfAden20',
        RIGHT: 'CityOfAden19',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: True,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'CityOfAden21': {
        ZONENAME: 'City of Aden',
        DESCRIPTION: 'The great city of Aden, home to many locals in the Schwarzwald Forest',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAden21',
        DOWN: 'CityOfAden21',
        LEFT: 'CityOfAden21',
        RIGHT: 'CityOfAden15',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'CityOfAden22': {
        ZONENAME: 'City of Aden',
        DESCRIPTION: 'Old shop located in the Upper potion of the city. You can buy and sell wares here. Type shop to enter',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAden22',
        DOWN: 'CityOfAden22',
        LEFT: 'CityOfAden22',
        RIGHT: 'CityOfAden16',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'CityOfAden23': {
        ZONENAME: 'City of Aden',
        DESCRIPTION: 'Local smith shop to repair Gear',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'CityOfAden23',
        DOWN: 'CityOfAden9',
        LEFT: 'CityOfAden23',
        RIGHT: 'CityOfAden23',
        MOB: False,
        NPC_EXIST: True,
        NPC_NAME: 'Abigail Winchester',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    ####################FOYER HOUSE START
    'Foyer_House1': {
        ZONENAME: 'Foyer',
        DESCRIPTION: 'Beautiful paintings on the ceiling depict old german art, paired with expensive moldings.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Foyer_House1',
        DOWN: 'Foyer_House1',
        LEFT: 'Foyer_House2',
        RIGHT: 'Street',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:True,
        WEST:False,
    },
    'Foyer_House2': {
        ZONENAME: 'Foyer',
        DESCRIPTION: 'Beautiful paintings on the ceiling depict old german art, paired with expensive moldings.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Foyer_House4',
        DOWN: 'BedRoom_House6',
        LEFT: 'Foyer_House3',
        RIGHT: 'Foyer_House1',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Foyer_House3': {
        ZONENAME: 'Foyer',
        DESCRIPTION: 'Beautiful paintings on the ceiling depict old german art, paired with expensive moldings.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: 'letter',
        ITEM_EXIST: True,
        UP: 'Foyer_House5',
        DOWN: 'Foyer_House3',
        LEFT: 'Foyer_House3',
        RIGHT: 'Foyer_House2',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Foyer_House4': {
        ZONENAME: 'Foyer',
        DESCRIPTION: 'Beautiful paintings on the ceiling depict old german art, paired with expensive moldings.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: 'elven sword',
        ITEM_EXIST: True,
        UP: 'Foyer_House4',
        DOWN: 'Foyer_House2',
        LEFT: 'Foyer_House5',
        RIGHT: 'Foyer_House4',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Foyer_House5': {
        ZONENAME: 'Foyer',
        DESCRIPTION: 'Beautiful paintings on the ceiling depict old german art, paired with expensive moldings.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Foyer_House5',
        DOWN: 'Foyer_House3',
        LEFT: 'LivingRoom_House8',
        RIGHT: 'Foyer_House4',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    ####################FOYER HOUSE END
    ####################Living Room House Start
    'LivingRoom_House8': {
        ZONENAME: 'Living Room',
        DESCRIPTION: 'Highly decorated with lavish moldings. The decor is mostly old paintings of relatives and exotic looking trinkits.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'LivingRoom_House8',
        DOWN: 'LivingRoom_House9',
        LEFT: 'LivingRoom_House15',
        RIGHT: 'Foyer_House5',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'LivingRoom_House9': {
        ZONENAME: 'Living Room',
        DESCRIPTION: 'Highly decorated with lavish moldings. The decor is mostly old paintings of relatives and exotic looking trinkits.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'LivingRoom_House8',
        DOWN: 'LivingRoom_House10',
        LEFT: 'LivingRoom_House14',
        RIGHT: 'LivingRoom_House9',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'LivingRoom_House10': {
        ZONENAME: 'Living Room',
        DESCRIPTION: 'Highly decorated with lavish moldings. The decor is mostly old paintings of relatives and exotic looking trinkits.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'LivingRoom_House9',
        DOWN: 'LivingRoom_House10',
        LEFT: 'LivingRoom_House11',
        RIGHT: 'LivingRoom_House10',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'LivingRoom_House11': {
        ZONENAME: 'Living Room',
        DESCRIPTION: 'Highly decorated with lavish moldings. The decor is mostly old paintings of relatives and exotic looking trinkits.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'LivingRoom_House14',
        DOWN: 'Kitchen_House17',
        LEFT: 'LivingRoom_House12',
        RIGHT: 'LivingRoom_House10',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'LivingRoom_House12': {
        ZONENAME: 'Living Room',
        DESCRIPTION: 'Highly decorated with lavish moldings. The decor is mostly old paintings of relatives and exotic looking trinkits.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: 'camera',
        ITEM_EXIST: True,
        UP: 'LivingRoom_House13',
        DOWN: 'LivingRoom_House12',
        LEFT: 'LivingRoom_House12',
        RIGHT: 'LivingRoom_House11',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'LivingRoom_House13': {
        ZONENAME: 'Living Room',
        DESCRIPTION: 'Highly decorated with lavish moldings. The decor is mostly old paintings of relatives and exotic looking trinkits.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'LivingRoom_House16',
        DOWN: 'LivingRoom_House12',
        LEFT: 'Garden1',
        RIGHT: 'LivingRoom_House14',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'LivingRoom_House14': {
        ZONENAME: 'Living Room',
        DESCRIPTION: 'Highly decorated with lavish moldings. The decor is mostly old paintings of relatives and exotic looking trinkits.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'LivingRoom_House15',
        DOWN: 'LivingRoom_House11',
        LEFT: 'LivingRoom_House13',
        RIGHT: 'LivingRoom_House9',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'LivingRoom_House15': {
        ZONENAME: 'Living Room',
        DESCRIPTION: 'Highly decorated with lavish moldings. The decor is mostly old paintings of relatives and exotic looking trinkits.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'LivingRoom_House15',
        DOWN: 'LivingRoom_House14',
        LEFT: 'LivingRoom_House16',
        RIGHT: 'LivingRoom_House8',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'LivingRoom_House16': {
        ZONENAME: 'Living Room',
        DESCRIPTION: 'Highly decorated with lavish moldings. The decor is mostly old paintings of relatives and exotic looking trinkits.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'LivingRoom_House16',
        DOWN: 'LivingRoom_House13',
        LEFT: 'LivingRoom_House16',
        RIGHT: 'LivingRoom_House15',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    ####################Living Room House End
    ####################Kitchen Room House Start
    'Kitchen_House17': {
        ZONENAME: 'Kitchen',
        DESCRIPTION: 'Kitchen table has an unfinished breakfast plate, It looks like someone left in a hurry',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: True,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'LivingRoom_House11',
        DOWN: 'Kitchen_House17',
        LEFT: 'Kitchen_House17',
        RIGHT: 'Kitchen_House17',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,
        CRATE: True,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    ####################Kitchen Room House End
    ####################BedRoom House start
    'BedRoom_House6': {
        ZONENAME: 'Master Bedroom',
        DESCRIPTION: 'Master bedroom of the Haupteingang Manor, were those voices just a dream?',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: 'item',
        ITEM_EXIST: False,
        UP: 'Foyer_House2',
        DOWN: 'BedRoom_House6',
        LEFT: 'BedRoom_House6',
        RIGHT: 'BedRoom_House7',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'BedRoom_House7': {
        ZONENAME: 'Master Bedroom',
        DESCRIPTION: 'Master bedroom of the Haupteingang Manor, were those voices just a dream?',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: True,
        BOSS_TF: False,
        OBJECT: True,
        ITEM: 'Manor Chest',
        ITEM_EXIST: False,
        UP: 'BedRoom_House7',
        DOWN: 'BedRoom_House7',
        LEFT: 'BedRoom_House6',
        RIGHT: 'BedRoom_House7',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    ####################BedRoom House End
    ####################Garden Start

    'Garden1': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Garden1',
        DOWN: 'Garden1',
        LEFT: 'Garden2',
        RIGHT: 'LivingRoom_House13',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'Garden2': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Garden3',
        DOWN: 'Garden20',
        LEFT: 'Garden2',
        RIGHT: 'Garden1',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Garden3': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Garden3',
        DOWN: 'Garden2',
        LEFT: 'Garden4',
        RIGHT: 'Garden3',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'Garden4': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Garden5',
        DOWN: 'Garden4',
        LEFT: 'Garden7',
        RIGHT: 'Garden3',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'Garden5': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Garden5',
        DOWN: 'Garden4',
        LEFT: 'Garden6',
        RIGHT: 'Garden5',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Garden6': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Garden6',
        DOWN: 'Garden7',
        LEFT: 'Garden9',
        RIGHT: 'Garden5',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'Garden7': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Garden6',
        DOWN: 'Garden7',
        LEFT: 'Garden8',
        RIGHT: 'Garden4',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'Garden8': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Garden9',
        DOWN: 'Garden8',
        LEFT: 'Garden11',
        RIGHT: 'Garden7',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Garden9': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Garden9',
        DOWN: 'Garden8',
        LEFT: 'Garden10',
        RIGHT: 'Garden6',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'Garden10': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Garden10',
        DOWN: 'Garden11',
        LEFT: 'Garden10',
        RIGHT: 'Garden9',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: True,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'Garden11': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Garden10',
        DOWN: 'Garden11',
        LEFT: 'Garden12',
        RIGHT: 'Garden8',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Garden12': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Garden12',
        DOWN: 'Garden13',
        LEFT: 'Garden12',
        RIGHT: 'Garden11',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'Garden13': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Garden12',
        DOWN: 'Garden14',
        LEFT: 'Garden13',
        RIGHT: 'Garden13',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'Garden14': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Garden13',
        DOWN: 'Garden15',
        LEFT: 'Garden14',
        RIGHT: 'Garden14',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'Garden15': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: 'key',
        ITEM_EXIST: True,
        UP: 'Garden14',
        DOWN: 'Garden15',
        LEFT: 'Garden15',
        RIGHT: 'Garden16',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'Garden16': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Garden16',
        DOWN: 'Garden25',
        LEFT: 'Garden15',
        RIGHT: 'Garden17',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'Garden17': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Garden17',
        DOWN: 'Garden24',
        LEFT: 'Garden16',
        RIGHT: 'Garden18',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Garden18': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Garden18',
        DOWN: 'Garden23',
        LEFT: 'Garden17',
        RIGHT: 'Garden19',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'Garden19': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Garden19',
        DOWN: 'Garden22',
        LEFT: 'Garden18',
        RIGHT: 'Garden20',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'Garden20': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Garden2',
        DOWN: 'Garden21',
        LEFT: 'Garden19',
        RIGHT: 'Garden20',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Garden21': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Garden20',
        DOWN: 'Garden21',
        LEFT: 'Garden22',
        RIGHT: 'Garden21',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Garden22': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Garden19',
        DOWN: 'Garden22',
        LEFT: 'Garden23',
        RIGHT: 'Garden21',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Garden23': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Garden18',
        DOWN: 'Garden23',
        LEFT: 'Garden24',
        RIGHT: 'Garden22',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Garden24': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Garden17',
        DOWN: 'Garden24',
        LEFT: 'Garden25',
        RIGHT: 'Garden23',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Garden25': {
        ZONENAME: 'Garden',
        DESCRIPTION: 'Pleasant Garden with many local flowers and plants, and a large fountain in the middle.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Garden16',
        DOWN: 'Garden25',
        LEFT: 'Garden25',
        RIGHT: 'Garden24',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    ####################Garden End
    'Street': {
        ZONENAME: 'Street',
        DESCRIPTION: 'Large Oak trees lining the gardens, many small shrubs and flowers coexist here\nA small yard shed nearby',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Street',
        DOWN: 'Street2',
        LEFT: 'Foyer_House1',
        RIGHT: 'Shack',
        MOB: False,
        NPC_EXIST: True,
        NPC_NAME: 'Anne Shephard',
        MOB_DIFFICULTY: 0,
        CRATE: True,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Street2': {
        ZONENAME: 'Street',
        DESCRIPTION: 'Large Oak trees lining the gardens, many small shrubs and flowers coexist here',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Street',
        DOWN: 'Street3',
        LEFT: 'Street2',
        RIGHT: 'Street2',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Street3': {
        ZONENAME: 'Street',
        DESCRIPTION: 'Large Oak trees lining the gardens, many small shrubs and flowers coexist here',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Street2',
        DOWN: 'Street4',
        LEFT: 'Street3',
        RIGHT: 'Street3',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },
    'Street4': {
        ZONENAME: 'Street',
        DESCRIPTION: 'You notice a old Germaic guest house desperately needing repair',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Street3',
        DOWN: 'Forest5',
        LEFT: 'Street4',
        RIGHT: 'Guest Lobby',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },

    'Forest1': {
        ZONENAME: 'Forest',
        DESCRIPTION: 'Large forest with tall oak trees, it is hard to see through all the low vegetation',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Forest2',
        DOWN: 'Forest1',
        LEFT: 'Forest1',
        RIGHT: 'Forest10',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 3,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },

    'Forest2': {
        ZONENAME: 'Forest',
        DESCRIPTION: 'Large forest with tall oak trees, it is hard to see through all the low vegetation',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Forest3',
        DOWN: 'Forest1',
        LEFT: 'Wild_Forest_SideRight13',
        RIGHT: 'Forest9',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 3,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:True,
    },

    'Forest3': {
        ZONENAME: 'Forest',
        DESCRIPTION: 'Large forest with tall oak trees, it is hard to see through all the low vegetation',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Forest4',
        DOWN: 'Forest2',
        LEFT: 'Forest3',
        RIGHT: 'Forest8',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 3,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'Forest4': {
        ZONENAME: 'Forest',
        DESCRIPTION: 'Large forest with tall oak trees, it is hard to see through all the low vegetation',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Forest5',
        DOWN: 'Forest3',
        LEFT: 'Forest4',
        RIGHT: 'Forest7',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 3,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'Forest5': {
        ZONENAME: 'Forest',
        DESCRIPTION: 'Large forest with tall oak trees, it is hard to see through all the low vegetation',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Street4',
        DOWN: 'Forest4',
        LEFT: 'Forest5',
        RIGHT: 'Forest6',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 3,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'Forest6': {
        ZONENAME: 'Forest',
        DESCRIPTION: 'Large forest with tall oak trees, it is hard to see through all the low vegetation',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Forest6',
        DOWN: 'Forest7',
        LEFT: 'Forest5',
        RIGHT: 'Forest15',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 3,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'Forest7': {
        ZONENAME: 'Forest',
        DESCRIPTION: 'Large forest with tall oak trees, it is hard to see through all the low vegetation',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Forest6',
        DOWN: 'Forest8',
        LEFT: 'Forest4',
        RIGHT: 'Forest14',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 3,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'Forest8': {
        ZONENAME: 'Forest',
        DESCRIPTION: 'Large forest with tall oak trees, it is hard to see through all the low vegetation',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Forest7',
        DOWN: 'Forest9',
        LEFT: 'Forest3',
        RIGHT: 'Forest13',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 3,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'Forest9': {
        ZONENAME: 'Forest',
        DESCRIPTION: 'Large forest with tall oak trees, it is hard to see through all the low vegetation',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Forest8',
        DOWN: 'Forest10',
        LEFT: 'Forest2',
        RIGHT: 'Forest12',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 3,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'Forest10': {
        ZONENAME: 'Forest',
        DESCRIPTION: 'Large forest with tall oak trees, it is hard to see through all the low vegetation',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Forest9',
        DOWN: 'Forest10',
        LEFT: 'Forest1',
        RIGHT: 'Forest11',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 3,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Forest11': {
        ZONENAME: 'Forest',
        DESCRIPTION: 'Large forest with tall oak trees, it is hard to see through all the low vegetation',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Forest12',
        DOWN: 'Forest11',
        LEFT: 'Forest10',
        RIGHT: 'CityOfAden1',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 3,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Forest12': {
        ZONENAME: 'Forest',
        DESCRIPTION: 'Large forest with tall oak trees, it is hard to see through all the low vegetation',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Forest13',
        DOWN: 'Forest11',
        LEFT: 'Forest9',
        RIGHT: 'Forest12',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 3,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },

    'Forest13': {
        ZONENAME: 'Forest',
        DESCRIPTION: 'Large forest with tall oak trees, it is hard to see through all the low vegetation',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Forest14',
        DOWN: 'Forest12',
        LEFT: 'Forest8',
        RIGHT: 'Forest13',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 3,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Forest14': {
        ZONENAME: 'Forest',
        DESCRIPTION: 'Large forest with tall oak trees, it is hard to see through all the low vegetation',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Forest15',
        DOWN: 'Forest13',
        LEFT: 'Forest7',
        RIGHT: 'Forest14',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 3,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Forest15': {
        ZONENAME: 'Forest',
        DESCRIPTION: 'Large forest with tall oak trees, it is hard to see through all the low vegetation',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Forest15',
        DOWN: 'Forest14',
        LEFT: 'Forest6',
        RIGHT: 'Forest15',
        MOB: True,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,
    },
    'Guest Lobby': {
        ZONENAME: 'Guest Lobby',
        DESCRIPTION: 'an old checkout stand and some dusty shelves, it looks like this place is rarely visited',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Guest Lobby',
        DOWN: 'Guest Cafe',
        LEFT: 'Street4',
        RIGHT: 'Guest Conference',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },

    'Guest Conference': {
        ZONENAME: 'Guest Conference',
        DESCRIPTION: 'What used to be a active community, this room held a lot of those important meetings',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '**the strange and other worldly**',
        ITEM_EXIST: True,
        UP: 'Guest Conference',
        DOWN: 'Guest Research',
        LEFT: 'Guest Lobby',
        RIGHT: 'Guest Conference',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },

    'Guest Cafe': {
        ZONENAME: 'Guest Cafe',
        DESCRIPTION: 'A cheese sandwhich and coffee is all that is on the menu,\n and the sign posted says they are out of cheese.',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Guest Lobby',
        DOWN: 'Guest Cafe',
        LEFT: 'Guest Cafe',
        RIGHT: 'Guest Research',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },

    'Guest Research': {
        ZONENAME: 'Guest Research',
        DESCRIPTION: 'Old books from all catagories makes this a very rich place of knowledge',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: False,
        ITEM: 'mysterious map g',
        ITEM_EXIST: True,
        UP: 'Guest Conference',
        DOWN: 'Guest Research',
        LEFT: 'Guest Cafe',
        RIGHT: 'Guest Research',
        MOB: False,
        NPC_EXIST: True,
        NPC_NAME: 'Klaus Muller',
        MOB_DIFFICULTY: 0,

        CRATE: False,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },

    'Shack': {
        ZONENAME: 'Yard Shack',
        DESCRIPTION: 'Small Shabby Shack for Yard Supplys',
        EXAMINATION: 'EXAMINE',
                
                        
        SOLVED: False,
        LOCKED_CHEST: False,
        BOSS_TF: False,
        OBJECT: True,
        ITEM: '',
        ITEM_EXIST: False,
        UP: 'Shack',
        DOWN: 'Shack',
        LEFT: 'Street',
        RIGHT: 'Shack',
        MOB: False,
        NPC_EXIST: False,
        NPC_NAME: '',
        MOB_DIFFICULTY: 0,
        CRATE: True,
        NORTH: False,
        SOUTH: False,
        EAST:False,
        WEST:False,

    },

}


###########Journal and note keeping ############
def Journal():
    missions_toggle()
    Current_mission()
    os.system('cls')
    JournalOptions = ['', 'Notes', 'Clues', 'Missions', 'Maps', 'Quit']
    JournalBook = ("""

        ______ ______
      _/      Y      \_
     // ~~ ~~ | ~~ ~  \ \ 
    // ~ ~ ~~ | ~~~ ~~ \ \         
   //________.|.________\ \        
  `----------`-'----------'

    """)
    print_medeum('*Journal Opened*\n')
    # winsound.PlaySound("C:\open_book.wav", winsound.SND_ASYNC)
    print_medeum('Please select from the options below\n')
    print(JournalBook)
    print("┌───────────────────────────────┐")
    print('│        Journal Options        │')
    print('\n│'.join(JournalOptions))
    print("└───────────────────────────────┘")

    talk = input('> ')
    if talk.lower() == 'notes':
        print("Nothing in notes")
    elif talk.lower() in within.help:
        help()
    elif talk.lower() == 'clues':
        if Missions['Mission 1'][ACTIVE] is True:
            print_medeum('Try typing look in your area to find hidden objects!\n')
            input('Press ENTER to continue')
        elif Missions['Mission 2'][ACTIVE] is True:
            print_medeum('Now that I have spoken to Anne Shephard, it might be a good idea to FIND the camera.\n')
            input('Press ENTER to continue')
        elif Missions['Mission 3'][ACTIVE] is True:
            print_medeum('Remember, NPC characters are annotated by a N on the map. Typing TALK will prompt a conversation.\n')
            input('Press ENTER to continue')
        elif Missions['Mission 4'][ACTIVE] is True:
            print_medeum('No clues at this time\n')
    elif talk.lower() == 'maps':
        if 'mysterious map g' in myPlayer.inventory:
            print("Mysterious Map G")
            talk = input("> ")
            if talk in myPlayer.inventory:
                if talk.lower() == 'mysterious map g':
                    os.system('cls')
                    ForestMAPGYO()
                    input("Press ENTER to continue")
                    os.system('cls')
        else:
            print_medeum('You do not have a map!\n')
            input('Press ENTER to continue')
    elif talk.lower() == 'missions':
        print("┌───────────────────────────────┐")
        print('│       Active  Missions        │')
        print("└───────────────────────────────┘")
        print_medeum('Active Missions\n')
        if Missions['Mission 1'][ACTIVE] is True:
            print("┌───────────────────────────────┐")
            print('Mission Name: ' + Missions['Mission 1'][MISSION_NAME])
            print('Mission Description: ' + Missions['Mission 1'][MISSION_DES])
            print("└───────────────────────────────┘")
            input('Press ENTER to continue')
        if Missions['Mission 2'][ACTIVE] is True:
            print("┌───────────────────────────────┐")
            print('Mission Name: ' + Missions['Mission 2'][MISSION_NAME])
            print('Mission Description: ' + Missions['Mission 2'][MISSION_DES])
            print("└───────────────────────────────┘")
            input('Press ENTER to continue')
        if Missions['Mission 3'][ACTIVE] is True:
            print("┌───────────────────────────────┐")
            print('Mission Name: ' + Missions['Mission 3'][MISSION_NAME])
            print('Mission Description: ' + Missions['Mission 3'][MISSION_DES])
            print("└───────────────────────────────┘")
            input('Press ENTER to continue')
        if Missions['Mission 4'][ACTIVE] is True:
            print("┌───────────────────────────────┐")
            print('Mission Name: ' + Missions['Mission 4'][MISSION_NAME])
            print('Mission Description: ' + Missions['Mission 4'][MISSION_DES])
            print("└───────────────────────────────┘")
            input('Press ENTER to continue')
        if Missions['Mission 5'][ACTIVE] is True:
            print("┌───────────────────────────────┐")
            print('Mission Name: ' + Missions['Mission 5'][MISSION_NAME])
            print('Mission Description: ' + Missions['Mission 5'][MISSION_DES])
            print("└───────────────────────────────┘")
            input('Press ENTER to continue')
        if Missions['Mission 6'][ACTIVE] is True:
            print("┌───────────────────────────────┐")
            print('Mission Name: ' + Missions['Mission 6'][MISSION_NAME])
            print('Mission Description: ' + Missions['Mission 6'][MISSION_DES])
            print("└───────────────────────────────┘")
            input('Press ENTER to continue')
        if Missions['Mission 7'][ACTIVE] is True:
            print("┌───────────────────────────────┐")
            print('Mission Name: ' + Missions['Mission 7'][MISSION_NAME])
            print('Mission Description: ' + Missions['Mission 7'][MISSION_DES])
            print("└───────────────────────────────┘")
            input('Press ENTER to continue')
        if Missions['Mission 8'][ACTIVE] is True:
            print("┌───────────────────────────────┐")
            print('Mission Name: ' + Missions['Mission 8'][MISSION_NAME])
            print('Mission Description: ' + Missions['Mission 8'][MISSION_DES])
            print("└───────────────────────────────┘")
            input('Press ENTER to continue')
        if Missions['Mission 9'][ACTIVE] is True:
            print("┌───────────────────────────────┐")
            print('Mission Name: ' + Missions['Mission 9'][MISSION_NAME])
            print('Mission Description: ' + Missions['Mission 9'][MISSION_DES])
            print("└───────────────────────────────┘")
            input('Press ENTER to continue')
        if Missions['Mission 10'][ACTIVE] is True:
            print("┌───────────────────────────────┐")
            print('Mission Name: ' + Missions['Mission 10'][MISSION_NAME])
            print('Mission Description: ' + Missions['Mission 10'][MISSION_DES])
            print("└───────────────────────────────┘")
            input('Press ENTER to continue')

            ########################################

    while talk not in within.quit:
        os.system('cls')
        missions_toggle()
        print(JournalBook)
        print("┌───────────────────────────────┐")
        print('│        Journal Options        │')
        print('\n│'.join(JournalOptions))
        print("└───────────────────────────────┘")

        talk = input('> ')
        if talk.lower() == 'notes':
            print("Nothing in notes")
        elif talk.lower() in within.help:
            help()
        elif talk.lower() == 'clues':
            if Missions['Mission 1'][ACTIVE] is True:
                print_medeum('Try typing look in your area to find hidden objects!\n')
                input('Press ENTER to continue')
            elif Missions['Mission 2'][ACTIVE] is True:
                print_medeum('Now that I have spoken to Anne Shephard, it might be a good idea to FIND the camera.\n')
                input('Press ENTER to continue')
            elif Missions['Mission 3'][ACTIVE] is True:
                print_medeum(
                    'Remember, NPC characters are annotated by a N on the map. Typing TALK will prompt a conversation.\n')
                input('Press ENTER to continue')
            elif Missions['Mission 4'][ACTIVE] is True:
                print_medeum('No clues at this time\n')
        elif talk.lower() == 'maps':
            if 'Mysterious Map G' in myPlayer.inventory:
                print("Mysterious Map G")
                talk = input("> ")
                if talk in myPlayer.inventory:
                    if talk.lower() == 'mysterious map g':
                        os.system('cls')
                        ForestMAPGYO()
                        input("Press ENTER to continue")
                        os.system('cls')
            else:
                print_medeum('You do not have a map!\n')
                input('Press ENTER to continue')
        elif talk.lower() == 'missions':

            print("┌───────────────────────────────┐")
            print('│           Missions            │')
            print("└───────────────────────────────┘")
            print("┌───────────────────────────────┐")
            print('│       Current Objective       │')
            print("└───────────────────────────────┘")
            print_medeum('Active Missions\n')

            if Missions['Mission 1'][ACTIVE] is True:
                print("┌───────────────────────────────┐")
                print('Mission Name: ' + Missions['Mission 1'][MISSION_NAME])
                print('Mission Description: ' + Missions['Mission 1'][MISSION_DES])
                print("└───────────────────────────────┘")
                input('Press ENTER to continue')
            if Missions['Mission 2'][ACTIVE] is True:
                print("┌───────────────────────────────┐")
                print('Mission Name: ' + Missions['Mission 2'][MISSION_NAME])
                print('Mission Description: ' + Missions['Mission 2'][MISSION_DES])
                print("└───────────────────────────────┘")
                input('Press ENTER to continue')
            if Missions['Mission 3'][ACTIVE] is True:
                print("┌───────────────────────────────┐")
                print('Mission Name: ' + Missions['Mission 3'][MISSION_NAME])
                print('Mission Description: ' + Missions['Mission 3'][MISSION_DES])
                print("└───────────────────────────────┘")
                input('Press ENTER to continue')
            if Missions['Mission 4'][ACTIVE] is True:
                print("┌───────────────────────────────┐")
                print('Mission Name: ' + Missions['Mission 4'][MISSION_NAME])
                print('Mission Description: ' + Missions['Mission 4'][MISSION_DES])
                print("└───────────────────────────────┘")
                input('Press ENTER to continue')
            if Missions['Mission 5'][ACTIVE] is True:
                print("┌───────────────────────────────┐")
                print('Mission Name: ' + Missions['Mission 5'][MISSION_NAME])
                print('Mission Description: ' + Missions['Mission 5'][MISSION_DES])
                print("└───────────────────────────────┘")
                input('Press ENTER to continue')
            if Missions['Mission 6'][ACTIVE] is True:
                print("┌───────────────────────────────┐")
                print('Mission Name: ' + Missions['Mission 6'][MISSION_NAME])
                print('Mission Description: ' + Missions['Mission 6'][MISSION_DES])
                print("└───────────────────────────────┘")
                input('Press ENTER to continue')
            if Missions['Mission 7'][ACTIVE] is True:
                print("┌───────────────────────────────┐")
                print('Mission Name: ' + Missions['Mission 7'][MISSION_NAME])
                print('Mission Description: ' + Missions['Mission 7'][MISSION_DES])
                print("└───────────────────────────────┘")
                input('Press ENTER to continue')
            if Missions['Mission 8'][ACTIVE] is True:
                print("┌───────────────────────────────┐")
                print('Mission Name: ' + Missions['Mission 8'][MISSION_NAME])
                print('Mission Description: ' + Missions['Mission 8'][MISSION_DES])
                print("└───────────────────────────────┘")
                input('Press ENTER to continue')
            if Missions['Mission 9'][ACTIVE] is True:
                print("┌───────────────────────────────┐")
                print('Mission Name: ' + Missions['Mission 9'][MISSION_NAME])
                print('Mission Description: ' + Missions['Mission 9'][MISSION_DES])
                print("└───────────────────────────────┘")
                input('Press ENTER to continue')
            if Missions['Mission 10'][ACTIVE] is True:
                print("┌───────────────────────────────┐")
                print('Mission Name: ' + Missions['Mission 10'][MISSION_NAME])
                print('Mission Description: ' + Missions['Mission 10'][MISSION_DES])
                print("└───────────────────────────────┘")
                input('Press ENTER to continue')

    else:
        print_medeum('*Journal closed*')
        # winsound.PlaySound("C:\open_book.wav", winsound.SND_ASYNC)
        os.system('cls')


#### Win COndition for the game ####
class WinCondition:
    def __init__(self):
        self.win = True


You = WinCondition()



#general crates and things to look into












#### GAME INTERACTIVITY ####
# def print_location():
#     print('\n' + ('=' * (4 + len(myPlayer.location))))
#     print('<>< ' + myPlayer.location.upper() + ' ><>')
#     print('<>< ' + areamap[myPlayer.location][DESCRIPTION] + ' ><>')
#     print('\n' + ('=' * (4 + len(myPlayer.location))))


#### Credits for the help to making the game ####
def Credit():
    print_medeum('Beta test over\n')
    print_medeum('Thank you to everyone who was involved in the production of this game so far!\n')
    print_medeum('There is so much more to come! so please wait patiently for more content!\n')
    print_medeum('If you have any questions in regarding to becoming a beta tester let me know and I will forward our discord.\n')
    print_medeum('Credits:\n')
    print_slow("Creator: Boiled eggs(me)\n")
    print_slow("concept art....Adair\n")
    print_slow("Mob Design....Adair\n")
    print_slow("Digital Art Logo....Okker\n")
    print_slow("Alpha testing/bug tracker....Russel\n")
    print_slow("Alpha testing/bug tracker....Adair\n")
    print_slow("Alpha testing/bug tracker....Okker\n")
    print_slow("Alpha testing/bug tracker....SolarKoid\n")
    print_slow('Music manager: itsdrunkshadow\n')
    print_slow('Music manager: Adair\n')
    print_slow("Story manager....Elisea\n")
    print_slow("Special thanks to Elisea, none of this would have been possible without you and your insperational story.\n")
    print_slow("The End\n")
    input("Press ENTER to continue\n")
    os.system('cls')
    save()
    save_dict_potion()
    save_dict_gear()
    save_dict_Ranged()
    save_dict_Spells()
    save_dict_Weapons()
    save_dict_Mission()
    save_dict_areamap()
    prompt()


# class for prompt shortcuts

class Shortcut:
    def __init__(self):
        self.weapons = ['Rusty Sword', 'Hunter Bow', 'Shock Spell', 'Fire Spell', 'Water spell', 'Druid Curse']
        self.RedWeapons = ['Rusty Sword', 'Fire Spell']
        self.BlueWeapons = ['Shock Spell', 'Fire Spell', 'Water spell']
        self.GreenWeapons = ['Hunter Bow', 'Druid Curse']
        self.heal = ['Items', 'items', 'potion', 'Potion', 'Potions']
        self.MP = ['mana', 'magic', 'Mana', 'Magic', 'MP', 'mp']
        self.potions = ['Potions', 'potions', 'potion', 'Potion', 'MP', 'mp', 'Items', 'items', 'item',
                        'potion', 'Potion', 'Potions', 'mana', 'magic', 'Mana', 'Magic', 'MP',
                        'mp', 'heal', 'Item']
        self.navigation = ['move', 'go', 'travel', 'walk']
        self.inspection = ['inspect', 'Inspect']
        self.look = ['Look', 'look']
        self.talk = ['Talk', 'talk']
        self.take = ['take', 'Take']
        self.arrow = ['arrows', 'arrow']
        self.aquire = ['take', 'get', 'grab', 'receieve']
        self.help = ['help', 'Help', 'commands']
        self.quit = ['quit', 'Quit', 'EXIT', 'exit', 'leave', 'Leave', 'depart', 'Exit', 'close', 'Close', 'CLOSE']
        self.accept = ['Yes', 'yes', 'y', 'Y']
        self.decline = ['No', 'no', 'N', 'n']
        self.inventory = ['inventory', 'Inventory', 'inven', 'Inven', 'inv']
        self.wallet = ['Wallet', 'wallet', 'money', 'gold', 'cash', 'Wallet', 'Money', 'Gold']
        self.shop = ['shop', 'store', 'market', 'Shop', 'Store', 'Market']
        self.fight = ['Fight', 'fight', 'FIGHT']
        self.equip = ['equip', 'Equip', 'Eq', 'eq']
        self.unequip = ['unequip', 'Unequip', 'un', 'Un']
        self.equippable = ['Iron chest plate', 'Iron gauntlet', 'Iron greaves', 'Iron helmet', 'Elvin chest plate',
                           'Iron chest plate', 'Dragon chest plate', 'Chainmail Garb', 'Leather Chest armour']
        self.helmet = ['Iron helmet']
        self.armour = ['Iron chest plate']
        self.gauntlet = ['Iron gauntlet']
        self.greaves = ['Iron greaves']
        self.stats = ['stat', 'stats', 'Stat', 'Stats', 'STATS']
        # weapons
        self.Wuncommon_names = ['Sharp Dagger', 'Dagger of Haven', 'Rusty Sword', 'Knight Sword', 'Axe', 'Mace']
        self.WCommon_names = ['Dagger', 'Rusty Dagger', 'Dagger']
        self.WRare_names = ['Sword of Light', 'Sword of Justice', 'Mace of Malice', 'Axe of Commons']
        self.WUltraRare_names = ['Elvin Sword', 'Elvin Dagger', 'Dwarvin Axe', 'Elvin Axe', '']
        self.WLegendary_names = ['Legendary Dagger']
        self.Weapon_name_masterlist = ['Sharp Dagger', 'Dagger of Haven', 'Rusty Sword', 'Knight Sword', 'Axe', 'Mace',
                                       'Dagger', 'Rusty Dagger', 'Dagger', 'Sword of Light', 'Sword of Justice',
                                       'Mace of Malice', 'Axe of Commons', 'Elvin Sword', 'Elvin Dagger', 'Dwarvin Axe',
                                       'Elvin Axe', 'Legendary dagger']
        # Spells
        self.Suncommon_names = ['Adept Fire Spell', 'Adept Frost Spell', 'Adept Shock Spell', 'Adept Hydro Spell']
        self.SCommon_names = ['Fire Spell', 'Frost Spell', 'Shock Spell', 'Hydro Spell']
        self.SRare_names = ['Fire Plume', 'Frost Plume', 'Shock Plume', 'Hydro Plume']
        self.SUltraRare_names = ['Master Fire', 'Master Shock', 'Master Hydro', 'Master Frost']
        self.SLegendary_names = ['Dragon Fire', 'Dragon Frost', 'Dragon Shock', 'Dragon Hydro']
        self.Spell_name_masterlist = ['Fire Spell', 'Frost Spell', 'Shock Spell', 'Hydro Spell', 'Adept Fire Spell',
                                      'Adept Frost Spell', 'Adept Shock Spell', 'Adept Hydro Spell', 'Fire Plume',
                                      'Frost Plume', 'Shock Plume', 'Hydro Plume', 'Master Fire', 'Master Shock',
                                      'Master Hydro', 'Master Frost', 'Dragon Fire', 'Dragon Frost', 'Dragon Shock',
                                      'Dragon Hydro']
        # Ranged
        self.Runcommon_names = ['uncommon Bow']
        self.RCommon_names = ['common Bow']
        self.RRare_names = ['Rare Bow']
        self.RUltraRare_names = ['Ultra Rare Bow']
        self.RLegendary_names = ['Legendary Bow']
        self.Ranged_name_masterlist = ['uncommon Bow', 'common Bow', 'Rare Bow', 'Ultra Rare Bow', 'Legendary Bow']
        # Gear
        self.Guncommon_names_Greaves = ['uncommon Greaves']
        self.Guncommon_names_Gauntlets = ['uncommon Gauntlets']
        self.Guncommon_names_Armour = ['uncommon Armour']
        self.Guncommon_names_Helmet = ['uncommon Helmet']
        self.Guncommon_names_Shield = ['uncommon Shield']
        # common
        self.Gcommon_names_Greaves = ['common Greaves']
        self.Gcommon_names_Gauntlets = ['common Gauntlets']
        self.Gcommon_names_Armour = ['common Armour']
        self.Gcommon_names_Helmet = ['common Helmet']
        self.Gcommon_names_Shield = ['common Shield']
        # rare
        self.Grare_names_Greaves = ['rare Greaves']
        self.Grare_names_Gauntlets = ['rare Gauntlets']
        self.Grare_names_Armour = ['rare Armour']
        self.Grare_names_Helmet = ['rare Helmet']
        self.Grare_names_Shield = ['rare sheild']
        # ultra rare
        self.GUltrarare_names_Greaves = ['ultra rare Greaves']
        self.GUltrarare_names_Gauntlets = ['ultra rare Gauntlets']
        self.GUltrarare_names_Armour = ['ultra rare Armour']
        self.GUltrarare_names_Helmet = ['ultra rare Helmet']
        self.Gultrarare_names_Shield = ['ultra rare Shield']
        # legendary
        self.Glegendary_names_Greaves = ['Legendary Greaves']
        self.Glegendary_names_Gauntlets = ['Legendary Gauntlets']
        self.Glegendary_names_Armour = ['Legendary Armour']
        self.Glegendary_names_Helmet = ['Legendary Helmet']
        self.Glegendary_names_Shield = ['Legendary Shield']
        self.Gear_name_masterlist = ['Legendary Shield', 'ultra rare Shield', 'rare sheild', 'common Shield',
                                     'uncommon Shield', 'uncommon Greaves', 'uncommon Gauntlets', 'uncommon Armour',
                                     'uncommon Helmet', 'common Greaves', 'common Gauntlets', 'common Armour',
                                     'common Helmet', 'rare Greaves', 'rare Gauntlets', 'rare Armour', 'rare Helmet',
                                     'ultra rare Greaves', 'ultra rare Gauntlets', 'ultra rare Armour',
                                     'ultra rare Helmet', 'Legendary Greaves', 'Legendary Gauntlets',
                                     'Legendary Armour', 'Legendary Helmet']
        self.Gear_Uncommon_master_list = ['uncommon Shield', 'uncommon Greaves', 'uncommon Gauntlets',
                                          'uncommon Armour', 'uncommon Helmet']
        self.Gear_Common_master_list = ['common Shield', 'common Greaves', 'common Gauntlets', 'common Armour',
                                        'common Helmet']
        self.Gear_Rare_master_list = ['rare sheild', 'rare Greaves', 'rare Gauntlets', 'rare Armour', 'rare Helmet']
        self.Gear_UltraRare_master_list = ['ultra rare Shield', 'ultra rare Greaves', 'ultra rare Gauntlets',
                                           'ultra rare Armour', 'ultra rare Helmet']
        self.Gear_Legendary_master_list = ['Legendary Shield', 'Legendary Greaves', 'Legendary Gauntlets',
                                           'Legendary Armour', 'Legendary Helmet']
        # attributes
        self.Strength = ['strength', 'str']
        self.Dexterity = ['dexterity', 'dex']
        self.Constitution = ['constitution', 'con']
        self.Intelligence = ['intelligence', 'int']
        self.Wisdom = ['wisdom', 'wis']
        self.Charisma = ['charisma', 'char']
        self.attribute = ['attribute', 'att']
        self.save = ['save', 'Save', 'SAVE']
        self.drink = ['drink', 'DRINK', 'Drink', 'consume', 'CONSUME', 'Consume', 'potion', 'POTION', 'Potion', 'heal',
                      'mana', 'Mana']
        # shop Items and prices
        self.Wares = ['Arrow', 'Small Health Potion', 'Medium Health Potion', 'Large Health Potion',
                      'Small Mana Potion',
                      'Medium Mana Potion', 'Large Mana Potion', 'Antidote', 'Paralyse Heal']
        self.Wares_small = ['Small Health Potion', 'Small Mana Potion']
        self.Wares_med = ['Medium Health Potion', 'Medium Mana Potion']
        self.Wares_Large = ['Large Health Potion', 'Large Mana Potion']
        self.Wares_Heal = ['Antidote', 'Paralyse Heal']
        self.Wares_Arrows = ['Arrow']
        self.Prices = ['Φ10', 'Φ25', 'Φ50', 'Φ100', 'Φ25', 'Φ50', 'Φ100', 'Φ50', 'Φ50']
        self.Wares_Gear = ['']
        self.Wares_Weapons = ['']
        self.Wares_Spells = ['']
        self.Prices_Spells = ['10']
        self.Prices_Gear = ['10']
        self.Prices_Weapon = ['10']
        self.seperator = ['x']
        # Smith Shop
        self.Smith_Services = ['Repair 25% ', 'Repair 50%', 'Repair 100%','Enhance']
        self.Smith_Wares = ['Repair hammer']
        self.Smith_Prices = ['Φ30', 'Φ60', 'Φ90']
        # Weapon attacks
        self.Sword_attack = ['slash', 'thrust', 'spiral slash']
        self.Spell_attack = ['single cast', 'barrage cast', 'charge cast',]
        self.Ranged_attack = ['single shot', 'triple shot', 'power shot',]
        # Buying commands
        self.buy = ['buy', 'Buy', 'BUY']
        self.sell = ['sell', 'SELL', 'Sell']
        # options menu
        self.options = ['options', 'OPTIONS', 'Options', 'start', 'menu']
        self.journal = ['journal']
        self.store = ['store', 'deposit', 'storage', 'sto']
        self.inn = ['inn', 'heal', '']
        self.Heal_inn = ['Healing_inn11','Healing_inn_aden11']
        self.Kitchen_inn = ['Healing_inn3','Healing_inn_aden3']
        self.Storage_Locations = ['Healing_inn4','Healing_inn_aden4','BedRoom_House6']
        self.AlchemyTable = ['Healing_inn9','Healing_inn_aden9']
        self.Crate_locations = ['CityOfAden18','Shack','Kitchen_House17']
        self.CraftingTable = ['Healing_inn8','Healing_inn_aden8']

within = Shortcut()


class armour_add_subtract:
    def __init__(self):
        self.armour = 0

    def Add_armour(self, amount):
        self.armour += amount

    def Deplete_armour(self, amount):
        self.armour -= amount

    def Total_armour(self, amount):
        return self.armour >= amount


armour_value = armour_add_subtract()
#################
#               #
# Alchemy Dictionary#
#################
ANAME = 'Alchemy Name'
AINFO = 'Alchemy Info'
AHEAL = 'Alchemy Heal'
AMANA = 'Alchemy Mana'

Alchemy_Ingrediants = {
    'lions mane mushroom': {
        ANAME: 'Lions Mane Mushroom',
        AINFO: 'A mushroom with many health benefits, commonly used to restore magical powers',
        AHEAL: 0,
        AMANA: 2,

    },

    'bat wing': {
        ANAME: 'Bat wing',
        AINFO: 'The single wing of a bat that is used to create useful potions',
        AHEAL: 1,
        AMANA: 1,

    },

    'moon root': {
        ANAME: 'Moon Root',
        AINFO: 'Gets its name from the soft glow it emits, the root is used for its duel health and magical properties',
        AHEAL: 1,
        AMANA: 1,

    },

    'vampire dust': {
        ANAME: 'Vampire Dust',
        AINFO: 'The dust of a darkness worshipper, vampire dust is rare but sought after commodity for potion brewing.',
        AHEAL: 0,
        AMANA: 2,

    },

    'green bindweed': {
        ANAME: 'Green Bindweed',
        AINFO: 'A common weed found in the Dark Forest mostly used for its magical properties',
        AHEAL: 0,
        AMANA: 1,

    },

    'forest avens': {
        ANAME: 'Forest Avens',
        AINFO: 'A flower that grows on the forest floor has said to have healing properties',
        AHEAL: 1,
        AMANA: 0,

    },
    'fire moss': {
        ANAME: 'Fire Moss',
        AINFO: 'Due to its many shades of red, the moss has earned its name Fire Moss, and is very useful for magical potion brewing ',
        AHEAL: 0,
        AMANA: 1,

    },
    'cyclops fat': {
        ANAME: 'Cyclops Fat',
        AINFO: 'Fats from a cyclops. How it was obtained is questionable and unknown',
        AHEAL: 2,
        AMANA: 0,

    },
    'sphinxs ichor': {
        ANAME: 'Sphinxs Ichor',
        AINFO: 'A wild mushroom that resenbles the old deity',
        AHEAL: 1,
        AMANA: 1,

    },
    'qilin husk': {
        ANAME: 'Qilin Husk',
        AINFO: 'Often described as soul husk, qilin husk is the fossilized remains of an ancient plant',
        AHEAL: 3,
        AMANA: 0,

    },
    'eerie bloom': {
        ANAME: 'Eerie Bloom',
        AINFO: 'named for its bloom during the fall, this flower is rare and only seen in special conditions and thought to contain powers.',
        AHEAL: 1,
        AMANA: 0,

    },
    'ebon borage': {
        ANAME: 'Ebon Borage',
        AINFO: 'An old peice of bark from a very old tree thought to have gone extinct in the jurrasic period.',
        AHEAL: 0,
        AMANA: 5,

    },

}

#################
#               #
# Food Dictionary#
#################
FNAME = 'Food name'
FINFO = 'Food Info'
FHEAL = 'Food heal'
FMANA = 'Food Mana'


Foods = {
    'cooked trout': {
        FNAME: 'Cooked Trout',
        FINFO: 'popular cuisene that is ussualy enjoyed during the summer.',
        FHEAL: 10,
        FMANA: 0,

    },
    'cooked venison': {
        FNAME: 'Cooked Venison',
        FINFO: 'Mostly consumed by hunters, this is a quick meal and satisfys your hunger.',
        FHEAL: 10,
        FMANA: 0,

    },
    'kimchi stew': {
        FNAME: 'Kimchi Stew',
        FINFO: 'Hot warm soup of pickled cabbage and spices with garlic and HELLA SPICY SHIZ.',
        FHEAL: 10,
        FMANA: 0,

    },

}



Ingrediants = {
    'potato':{
        FNAME: 'Potato',
        FINFO: 'oridnary Potato',
        FHEAL:5,
        FMANA:0,

    },

    'carrot': {
        FNAME: 'Carrot',
        FINFO: 'A single carrot',
        FHEAL: 5,
        FMANA: 0,

    },
    'cabbage': {
        FNAME: 'Cabbage',
        FINFO: 'Head of cabbage',
        FHEAL: 5,
        FMANA: 0,

    },
    'lettuce': {
        FNAME: 'Lettuce',
        FINFO: 'Head of lettuce',
        FHEAL: 5,
        FMANA: 0,

    },
    'garlic': {
        FNAME: 'Garlic',
        FINFO: 'Clump of garlic',
        FHEAL: 5,
        FMANA: 0,

    },
    'trout': {
        FNAME: 'Trout',
        FINFO: 'Trout fish local to Aden',
        FHEAL: 5,
        FMANA: 0,

    },
    'crab': {
        FNAME: 'Crab',
        FINFO: 'Dark blue crab are unique and native to the Aden area',
        FHEAL: 5,
        FMANA: 0,

    },
    'venison': {
        FNAME: 'Venison',
        FINFO: 'Raw venison meat ready to be cooked.',
        FHEAL: 5,
        FMANA: 0,

    },

}














#################
#               #
# Gear Dictionary#
#################

NAME = 'Name'
RARITY = 'Rarity'
INFO = 'Info'
TYPE = 'Type'
EQUIPABLE = 'Equipable'
CHEST = "Cuirass"
GREAVES = "greaves"
GAUNTLET = "gauntlet"
HELMET = "helmet"
ARMOUR = 'armour'
SHIELD = 'shield'
ATTACK = 'attack'
WEAPON = 'weapon'
BLOCK = 'Block'
HP = 'hp for dictionaries'
HP = 'hp'
EFFECT = 'effect'
HEAL = 'Heal'
REPLENISH = 'replenish'
HPOTION = 'Health potion'
MPOTION = 'Mana Potion'
ANTIDOTE = 'Antidote'
PARALYSIS = 'Paralysis'
ENHANCED_TF = 'If able to be enhanced'
ARROW = 'Arrow'

Item = {
    'key': {
        NAME: 'House key',
        INFO: 'Small old 1800 style key, fits perfectly in the front door',
        TYPE: "Key",
        EQUIPABLE: False,
        CHEST: False,
        GREAVES: False,
        GAUNTLET: False,
        HELMET: False,
        ARMOUR: 0,
        SHIELD: False,
        BLOCK: 0,
        HP: 0,
        ARROW: False,
    },
    'chest key': {
        NAME: 'Chest Key',
        INFO: 'Key for the chest in the manor',
        TYPE: "Key",
        EQUIPABLE: False,
        CHEST: False,
        GREAVES: False,
        GAUNTLET: False,
        HELMET: False,
        ARMOUR: 0,
        SHIELD: False,
        BLOCK: 0,
        HP: 0,
        ARROW: False,


    },
    'photo negatives': {
        NAME: 'Photo Negatives',
        INFO: 'The negatives that Mrs Shephard created when she saw the strange figures in the forest. You can see a black smudge where the camera seems to have focused.',
        TYPE: "Negatives",
        EQUIPABLE: False,
        CHEST: False,
        GREAVES: False,
        GAUNTLET: False,
        HELMET: False,
        ARMOUR: 0,
        SHIELD: False,
        BLOCK: 0,
        HP: 0,
        ARROW: False,
    },
    'letter': {
        NAME: 'Letter',
        INFO: """
            Dear Freiherren Schwarzwald,
            I have swept the floors for the new comer today. Everything is tidy and ready for their arrival.\n
            However in the distance as I was puting out the trash for burning, I noticed a grey like form\n
            in the woods, which I had initially mistaken for a person. I attempted to take pictures of the odd form as I was already with camera, the pictures only revealed\n
            smudges. I thought the camera needed some repair so I decided to take it to the workshop to see what\n
            is wrong with it. I do Hope your travels go well.\n

            Yours truly, 
            Anne shephard
            1919






            """,
        TYPE: "Letter",
        EQUIPABLE: False,
        CHEST: False,
        GREAVES: False,
        GAUNTLET: False,
        HELMET: False,
        ARMOUR: 0,
        SHIELD: False,
        BLOCK: 0,
        HP: 0,
        ARROW: False,
    },
    'camera': {
        NAME: '1900 style camera',
        INFO: 'Camera has a leather strap, and a large exterior, seems to have been dropped recently as there is some damage to one of the corners.',
        TYPE: "Camera",
        EQUIPABLE: False,
        CHEST: False,
        GREAVES: False,
        GAUNTLET: False,
        HELMET: False,
        ARMOUR: 0,
        SHIELD: False,
        BLOCK: 0,
        HP: 0,
        ARROW: False,
    },

    'mysterious map g': {
        NAME: 'Mysterious Map',
        INFO: 'Not by night, but by day, I dwell in the forest, Im afraid of water and storms',
        TYPE: "Map",
        EQUIPABLE: False,
        CHEST: False,
        GREAVES: False,
        GAUNTLET: False,
        HELMET: False,
        ARMOUR: 0,
        SHIELD: False,
        BLOCK: 0,
        HP: 0,
        ARROW: False,
    },
    'parcel': {
        NAME: 'Parcel',
        INFO: 'A carefully folded parcel with a unique seal wax stamp in blue. belong to Abigail Winchester',
        TYPE: "parcel",
        EQUIPABLE: False,
        CHEST: False,
        GREAVES: False,
        GAUNTLET: False,
        HELMET: False,
        ARMOUR: 0,
        SHIELD: False,
        BLOCK: 0,
        HP: 0,
        ARROW: False,
    },
    'odd letter': {
        NAME: 'Odd Letter',
        INFO: """"Small hand written note written in a peculiar langauge, with a curious wax seal you do not recognize.""",
        TYPE: "Letter",
        EQUIPABLE: False,
        CHEST: False,
        GREAVES: False,
        GAUNTLET: False,
        HELMET: False,
        ARMOUR: 0,
        SHIELD: False,
        BLOCK: 0,
        HP: 0,
        ARROW: False,
    },
    'the strange and other worldly': {
        NAME: 'The strange and other worldly',
        INFO: """" Author: unknown
                   Publishing date: 1902
                   
        In the year of 1890, A young Doctor by the name of Patrick Ward first discovered an ancient Jiahu site
        that dates to around 6600 BC. The remarkable find was unfortunately not published in a scientific journal due to the lack of funds and support.. However at the request of
        Dr. Ward, the notes were published 12 years later after the find by his apprentice. During the innitial excavation a interesting artifact was recovered
        of what appears to be a ancient deity, or idol worship. The object contained no human identifiable marks, and was disregarded as
        a ritual item for that period. However after further examination it was found that the object dated to be much older than the site it was recovered from.
        
        
                   
                   
                   
                   
                   """,

        TYPE: "Book",
        EQUIPABLE: False,
        CHEST: False,
        GREAVES: False,
        GAUNTLET: False,
        HELMET: False,
        ARMOUR: 0,
        SHIELD: False,
        BLOCK: 0,
        HP: 0,
        ARROW: False,
    },

}

Gear = {
    'Iron Cuirass': {
        NAME: 'Iron Cuirass plate',
        RARITY: 'Rare',
        INFO: 'Fine sturdy iron with a tree insignia on the front',
        TYPE: "Cuirass",
        EQUIPABLE: True,
        CHEST: True,
        GREAVES: False,
        GAUNTLET: False,
        HELMET: False,
        ARMOUR: 10,
        SHIELD: False,
        BLOCK: 0,
        HP: 100,
        ARROW: False,
    },
    'Chainmail Cuirass': {
        NAME: 'Chainmail Cuirass',
        RARITY: 'Uncommon',
        INFO: 'Tiny loops protecting the wearer from blades',
        TYPE: "Cuirass Plate",
        EQUIPABLE: True,
        CHEST: True,
        GREAVES: False,
        GAUNTLET: False,
        HELMET: False,
        ARMOUR: 5,
        SHIELD: False,
        BLOCK: 0,
        HP: 100,
        ARROW: False,
    },
    'Leather Cuirass': {
        NAME: 'Leather Cuirass plate',
        RARITY: 'Common',
        INFO: 'Sturdy leather Cuirass armour',
        TYPE: "Cuirass",
        EQUIPABLE: True,
        CHEST: True,
        GREAVES: False,
        GAUNTLET: False,
        HELMET: False,
        ARMOUR: 3,
        SHIELD: False,
        BLOCK: 0,
        HP: 100,
        ARROW: False,
    },
    'Elvin Cuirass': {
        NAME: 'Elvin Cuirass plate',
        RARITY: 'Ultra Rare',
        INFO: 'Elvin design woven into every curve',
        TYPE: "Cuirass",
        EQUIPABLE: True,
        CHEST: True,
        GREAVES: False,
        GAUNTLET: False,
        HELMET: False,
        ARMOUR: 15,
        SHIELD: False,
        BLOCK: 0,
        HP: 100,
        ARROW: False,
    },
    'Dragon Cuirass': {
        NAME: 'Dragon Cuirass',
        RARITY: 'Legendary',
        INFO: 'Scaly armour and rune symbols embueing the armour',
        TYPE: "Cuirass",
        EQUIPABLE: True,
        CHEST: True,
        GREAVES: False,
        GAUNTLET: False,
        HELMET: False,
        ARMOUR: 20,
        SHIELD: False,
        BLOCK: 0,
        HP: 100,
        ARROW: False,
    },
    'Dragon Gauntlet': {
        NAME: 'Dragon gauntlet',
        RARITY: 'Legendary',
        INFO: 'Pointy black Gauntlets scaly, and terifying',
        TYPE: "Gauntlet",
        EQUIPABLE: True,
        CHEST: False,
        GREAVES: False,
        GAUNTLET: True,
        HELMET: False,
        ARMOUR: 10,
        SHIELD: False,
        BLOCK: 0,
        HP: 100,
        ARROW: False,
    },
    'Elvin Gauntlet': {
        NAME: 'Elvin gauntlet',
        RARITY: 'Ultra Rare',
        INFO: 'Elegent details on a very simple but articulate peice of craftmanship',
        TYPE: "Gauntlet",
        EQUIPABLE: True,
        CHEST: False,
        GREAVES: False,
        GAUNTLET: True,
        HELMET: False,
        ARMOUR: 7,
        SHIELD: False,
        BLOCK: 0,
        HP: 100,
        ARROW: False,

    },
    'Iron Gauntlet': {
        NAME: 'Iron gauntlet',
        RARITY: 'Rare',
        INFO: 'Combonation of leather and iron to protect the wearers hands',
        TYPE: "Gauntlet",
        EQUIPABLE: True,
        CHEST: False,
        GREAVES: False,
        GAUNTLET: True,
        HELMET: False,
        ARMOUR: 4,
        SHIELD: False,
        BLOCK: 0,
        HP: 100,
        ARROW: False,
    },
    'Chainmail Gauntlet': {
        NAME: 'Chainmail Gauntlet',
        RARITY: 'Common',
        INFO: 'Chainlink gloves usually worn over leather gloves',
        TYPE: "Gauntlet",
        EQUIPABLE: True,
        CHEST: False,
        GREAVES: False,
        GAUNTLET: True,
        HELMET: False,
        ARMOUR: 2,
        SHIELD: False,
        BLOCK: 0,
        HP: 100,
        ARROW: False,
    },
    'Leather Gloves': {
        NAME: 'Leather Gloves',
        RARITY: 'Common',
        INFO: 'Sturdy leather gloves that rpovides little physical protection',
        TYPE: "Gauntlet",
        EQUIPABLE: True,
        CHEST: False,
        GREAVES: False,
        GAUNTLET: True,
        HELMET: False,
        ARMOUR: 1,
        SHIELD: False,
        BLOCK: 0,
        HP: 100,
        ARROW: False,

    },
    'Dragon Helmet': {
        NAME: 'Dragon Helmet',
        RARITY: 'Legendary',
        INFO: 'Dragon helmet with horns of the dragon that fell to create it',
        TYPE: "Helmet",
        EQUIPABLE: True,
        CHEST: False,
        GREAVES: False,
        GAUNTLET: False,
        HELMET: True,
        ARMOUR: 16,
        SHIELD: False,
        BLOCK: 0,
        HP: 100,
        ARROW: False,
    },
    'Elvin Helmet': {
        NAME: 'Elvin Helmet',
        RARITY: 'Ultra Rare',
        INFO: 'Clean smooth golden design, a fit design for those who created it',
        TYPE: "Helmet",
        EQUIPABLE: True,
        CHEST: False,
        GREAVES: False,
        GAUNTLET: False,
        HELMET: True,
        ARMOUR: 12,
        SHIELD: False,
        BLOCK: 0,
        HP: 100,
        ARROW: False,
    },
    'Iron Helmet': {
        NAME: 'Iron Helmet',
        RARITY: 'Rare',
        INFO: 'a very sturdy practical design, covering the nose and head from damage',
        TYPE: "Helmet",
        EQUIPABLE: True,
        CHEST: False,
        GREAVES: False,
        GAUNTLET: False,
        HELMET: True,
        ARMOUR: 8,
        SHIELD: False,
        BLOCK: 0,
        HP: 100,
        ARROW: False,
    },
    'Chainmail Helmet': {
        NAME: 'Chainmail Helmet',
        RARITY: 'Uncommon',
        INFO: 'A veil of chainlink to prevent cuts from sharp blades',
        TYPE: "Helmet",
        EQUIPABLE: True,
        CHEST: False,
        GREAVES: False,
        GAUNTLET: False,
        HELMET: True,
        ARMOUR: 4,
        SHIELD: False,
        BLOCK: 0,
        HP: 100,
        ARROW: False,
    },
    'Leather Helmet': {
        NAME: 'Leather Helmet',
        RARITY: 'Common',
        INFO: 'Made from hide, this helmet provides low protection from damage but much warmth in the winter ',
        TYPE: "Helmet",
        EQUIPABLE: True,
        CHEST: False,
        GREAVES: False,
        GAUNTLET: False,
        HELMET: True,
        ARMOUR: 2,
        SHIELD: False,
        BLOCK: 0,
        HP: 100,
        ARROW: False,
    },
    'Dragon Greaves': {
        NAME: 'Dragon Greaves',
        RARITY: 'Legendary',
        INFO: 'Black and scaly, this armours magical properties can protect the wearer from lava or fire ',
        TYPE: "Greaves",
        EQUIPABLE: True,
        CHEST: False,
        GREAVES: True,
        GAUNTLET: False,
        HELMET: False,
        ARMOUR: 12,
        SHIELD: False,
        BLOCK: 0,
        HP: 100,
        ARROW: False,
    },
    'Elvin Greaves': {
        NAME: 'Elvin Greaves',
        RARITY: 'Ultra Rare',
        INFO: 'Very sturdy, and surpisngly light, these greaves were made for agility and protection',
        TYPE: "Greaves",
        EQUIPABLE: True,
        CHEST: False,
        GREAVES: True,
        GAUNTLET: False,
        HELMET: False,
        ARMOUR: 9,
        SHIELD: False,
        BLOCK: 0,
        HP: 100,
        ARROW: False,
    },
    'Iron Greaves': {
        NAME: 'Iron Greaves',
        RARITY: 'Rare',
        INFO: 'Stiff, but durable, these were made to tank tough foes',
        TYPE: "Greaves",
        EQUIPABLE: True,
        CHEST: False,
        GREAVES: True,
        GAUNTLET: False,
        HELMET: False,
        ARMOUR: 6,
        SHIELD: False,
        BLOCK: 0,
        HP: 100,
        ARROW: False,
    },
    'Chainmail Greaves': {
        NAME: 'Elvin Greaves',
        RARITY: 'Uncommon',
        INFO: 'While very light, they do not provide much in the way of protection. Better be careful.',
        TYPE: "Greaves",
        EQUIPABLE: True,
        CHEST: False,
        GREAVES: True,
        GAUNTLET: False,
        HELMET: False,
        ARMOUR: 3,
        SHIELD: False,
        BLOCK: 0,
        HP: 100,
        ARROW: False,
    },
    'Leather Greaves': {
        NAME: 'Leather Greaves',
        RARITY: 'Common',
        INFO: 'Worn by travelers to fight battles in the cold, they do not provide much protection except to prevent frostbite.',
        TYPE: "Greaves",
        EQUIPABLE: True,
        CHEST: False,
        GREAVES: True,
        GAUNTLET: False,
        HELMET: False,
        ARMOUR: 1,
        SHIELD: False,
        HP: 100,
        ARROW: False,
    },
    'Wooden Shield': {
        NAME: 'Wooden Shield',
        RARITY: 'Common',
        INFO: 'Sturdy Wooden Shield to protect against blows.',
        TYPE: "Shield",
        EQUIPABLE: True,
        CHEST: False,
        GREAVES: False,
        GAUNTLET: False,
        HELMET: False,
        ARMOUR: 1,
        SHIELD: True,
        HP: 100,
        ARROW: False,
    },

}


####################
#                  #
# Weapon Dictionary#
####################


Weapons = {

    'Rusty Sword': {
        NAME: 'Rusty Sword',
        RARITY: 'Common',
        INFO: 'Old reliable sword used long ago',
        TYPE: "Sword",
        EQUIPABLE: True,
        WEAPON: True,
        ATTACK: 6,
        HP: 1,
        ENHANCED_TF: False,
        ARROW: False,
    },
    'elven sword': {
        NAME: 'Elvin Sword',
        RARITY: 'Common',
        INFO: 'An Elvish Sword of Great Antiquity',
        TYPE: "Sword",
        EQUIPABLE: True,
        WEAPON: True,
        ATTACK: 7,
        HP: 100,
        ENHANCED_TF: False,
        ARROW: False,
    },
    'steel arrow': {
        NAME: 'Steel Arrow',
        RARITY: 'Common',
        INFO: 'Steel tipped arrow for moderate damage',
        TYPE: "Arrow",
        EQUIPABLE: True,
        WEAPON: False,
        ATTACK: 3,
        HP: 100,
        ENHANCED_TF: False,
        ARROW: True,
    },
    'iron arrow': {
        NAME: 'Iron Arrow',
        RARITY: 'Common',
        INFO: 'Old reliable sword used long ago',
        TYPE: "Arrow",
        EQUIPABLE: True,
        WEAPON: False,
        ATTACK: 3,
        HP: 100,
        ENHANCED_TF: False,
        ARROW: True,
    },
    'fire arrow': {
        NAME: 'Fire Arrow',
        RARITY: 'Common',
        INFO: 'Old reliable sword used long ago',
        TYPE: "Arrow",
        EQUIPABLE: True,
        WEAPON: False,
        ATTACK: 3,
        HP: 100,
        ENHANCED_TF: False,
        ARROW: True,
    },
    'explosive arrow': {
        NAME: 'Explosive Arrow',
        RARITY: 'Common',
        INFO: 'Old reliable sword used long ago',
        TYPE: "Arrow",
        EQUIPABLE: True,
        WEAPON: False,
        ATTACK: 3,
        HP: 100,
        ENHANCED_TF: False,
        ARROW: True,
    },
    'frost arrow': {
        NAME: 'Frost Arrow',
        RARITY: 'Common',
        INFO: 'Old reliable sword used long ago',
        TYPE: "Arrow",
        EQUIPABLE: True,
        WEAPON: False,
        ATTACK: 3,
        HP: 100,
        ENHANCED_TF: False,
        ARROW: True,
    },


}
###################
#                 #
# Spell Dictionary#
###################

Spells = {
    'Shock Spell': {
        NAME: 'Shock Spell',
        RARITY: 'Common',
        INFO: 'Ancient spell that harnesses lightening',
        TYPE: "Spell",
        EQUIPABLE: True,
        WEAPON: True,
        ATTACK: 6,
    },
    'Fire Spell': {
        NAME: 'Fire Spell',
        RARITY: 'Common',
        INFO: 'Ancient spell that harnesses Fire',
        TYPE: "Spell",
        EQUIPABLE: True,
        WEAPON: True,
        ATTACK: 6,
    },
    'Druid Spell': {
        NAME: 'Druid Spell',
        RARITY: 'Common',
        INFO: 'Ancient spell that harnesses Nature',
        TYPE: "Spell",
        EQUIPABLE: True,
        WEAPON: True,
        ATTACK: 6,
    },
}

###################
#                 #
# Ranged Weapons#
###################


Ranged = {
    'Hunter Bow': {
        NAME: 'Hunter Bow',
        RARITY: 'Rare',
        INFO: 'Ranged weapon Bow',
        TYPE: "Ranged",
        EQUIPABLE: True,
        WEAPON: True,
        ATTACK: 6,
        ENHANCED_TF: False,
    },
}
###################
#                 #
# Crafting Dictionary#
###################
CRAFT_NAME = 'Craft name'
CRAFT_RARITY = 'craft rarity'
CRAFT_INFO = 'craft info'
CRAFT_TYPE = 'craft type'
CRAFT_MATERIAL = 'Craft Material'
Crafting = {

    'wood': {
        CRAFT_NAME: 'Wood',
        CRAFT_RARITY: 'Common',
        CRAFT_INFO: 'A piece of wood used as material for crafting',
        CRAFT_TYPE: 'Wood',
        CRAFT_MATERIAL: True,

    },
    'feathers': {
        CRAFT_NAME: 'Feathers',
        CRAFT_RARITY: 'Common',
        CRAFT_INFO: 'Feathers used as material for crafting',
        CRAFT_TYPE: 'Feathers',
        CRAFT_MATERIAL: True,

    },

    'iron arrow head': {
        CRAFT_NAME: 'Iron arrow head',
        CRAFT_RARITY: 'Common',
        CRAFT_INFO: 'Arrow head material for crafting',
        CRAFT_TYPE: 'Arrow head',
        CRAFT_MATERIAL: True,

    },

    'steel arrow head': {
        CRAFT_NAME: 'Steel arrow head',
        CRAFT_RARITY: 'Uncommon',
        CRAFT_INFO: 'Arrow head material for crafting',
        CRAFT_TYPE: 'Arrow head',
        CRAFT_MATERIAL: True,

    },





}




#############################
#### Character pets     #####
#############################

PNAME = 'pets'
PINFO = 'info'
PTYPE = 'type'
MP_add = 'mp add'
HP_add = 'hp add'
MP_attack_add = 'mp attack add'
ATTACK_add = 'attack add'
PET = 'Companion'
EXP = 'Expereince for companion'
PLEVEL = 'Companion Level'

Pet = {
    'Imoogi': {
        PNAME: 'Imoogi',
        RARITY: 'Rare',
        PINFO: 'A hornless ocean dragon, sometimes equated with a sea serpent',
        PTYPE: "Companion",
        EQUIPABLE: True,
        EFFECT: 'MP',
        MP_add: 1,
        HP_add: 0,
        MP_attack_add: 0,
        ATTACK_add: 0,
        PET: True,
        EXP:0,
        PLEVEL:1,
    },
    'Gyo': {
        PNAME: 'Gyo',
        RARITY: 'Rare',
        PINFO: 'A mountain dragon. In fact, the Chinese character for this word is also used for the imoogi',
        PTYPE: "Companion",
        EQUIPABLE: True,
        EFFECT: "HP Boost" ,
        MP_add: 0,
        HP_add: 1,
        MP_attack_add: 0,
        ATTACK_add: 0,
        PET: True,
        EXP: 0,
        PLEVEL: 1,
    },
    'Bolla': {
        PNAME: 'Bolla',
        RARITY: 'Rare',
        PINFO: 'is a type of serpentic dragon with a long, coiled, serpentine body, four legs and small wings in ancient Albanian folklore',
        PTYPE: "Companion",
        EQUIPABLE: True,
        EFFECT: "Attack Boost",
        MP_add: 0,
        HP_add: 0,
        MP_attack_add: 0,
        ATTACK_add: 1,
        PET: True,
        EXP: 0,
        PLEVEL: 1,
    },
    'Balaur': {
        PNAME: 'Balaur',
        RARITY: 'Rare',
        PINFO: 'Balaur are very large and with fins ',
        PTYPE: "Companion",
        EQUIPABLE: True,
        EFFECT: "Magic Damage Boost" ,
        MP_add: 0,
        HP_add: 0,
        MP_attack_add: 1,
        ATTACK_add: 0,
        PET: True,
        EXP: 0,
        PLEVEL: 1,

    },
}

#############################
#### Potions            #####
#############################


Potion = {
    'Small Health Potion': {
        NAME: 'Small Health Potion',
        INFO: 'Small glass potion created to replenish strength',
        TYPE: "Health",
        EQUIPABLE: False,
        EFFECT: 'Heals Health by 5',
        HEAL: 5,
        REPLENISH: 0,
        HPOTION: True,
        MPOTION: False,
        ANTIDOTE: False,
        PARALYSIS: False

    },
    'Medium Health Potion': {
        NAME: 'Medium Health Potion',
        INFO: 'Medium glass potion created to replenish strength',
        TYPE: "Health",
        EQUIPABLE: False,
        EFFECT: 'Heals Health by 10',
        HEAL: 10,
        REPLENISH: 0,
        HPOTION: True,
        MPOTION: False,
        ANTIDOTE: False,
        PARALYSIS: False
    },
    'Large Health Potion': {
        NAME: 'Large Health Potion',
        INFO: 'Large glass potion created to replenish strength',
        TYPE: "Health",
        EQUIPABLE: False,
        EFFECT: 'Heals Health by 15',
        HEAL: 15,
        REPLENISH: 0,
        HPOTION: True,
        MPOTION: False,
        ANTIDOTE: False,
        PARALYSIS: False
    },
    'Small Mana Potion': {
        NAME: 'Small Mana Potion',
        INFO: 'Small glass potion created to replenish mana',
        TYPE: "Mana",
        EQUIPABLE: False,
        EFFECT: 'Replenish  by 5',
        HEAL: 0,
        REPLENISH: 5,
        HPOTION: False,
        MPOTION: True,
        ANTIDOTE: False,
        PARALYSIS: False
    },
    'Medium Mana Potion': {
        NAME: 'Medium Mana Potion',
        INFO: 'Medium glass potion created to replenish mana',
        TYPE: "Mana",
        EQUIPABLE: False,
        EFFECT: 'Replenish  by 10',
        HEAL: 0,
        REPLENISH: 10,
        HPOTION: False,
        MPOTION: True,
        ANTIDOTE: False,
        PARALYSIS: False
    },
    'Large Mana Potion': {
        NAME: 'Large Mana Potion',
        INFO: 'Large glass potion created to replenish mana',
        TYPE: "Mana",
        EQUIPABLE: False,
        EFFECT: 'Replenish  by 15',
        HEAL: 0,
        REPLENISH: 15,
        HPOTION: False,
        MPOTION: True,
        ANTIDOTE: False,
        PARALYSIS: False
    },
    'Antidote': {
        NAME: 'Antidote',
        INFO: 'Small vile made up of natural remedies that can cure poisen',
        TYPE: "Antidote",
        EQUIPABLE: False,
        EFFECT: 'Poisen Cure',
        HEAL: 0,
        REPLENISH: 0,
        HPOTION: False,
        MPOTION: False,
        ANTIDOTE: True,
        PARALYSIS: False
    },
    'Paralyse Heal': {
        NAME: 'Paralyse Heal',
        INFO: 'Cures temporary paralysis from toxic venom',
        TYPE: "Paralysis Heal",
        EQUIPABLE: False,
        EFFECT: 'Cures paralysis',
        HEAL: 0,
        REPLENISH: 0,
        HPOTION: False,
        MPOTION: False,
        ANTIDOTE: False,
        PARALYSIS: True
    },
}


###############
# #Damage Weapon#
###############

def Damage_weapon():
    arm1 = ''.join(myPlayer.equipped_Weapon)
    if len(myPlayer.equipped_Weapon) is not 0:
        if Weapons[arm1][WEAPON] is True:
            if  Weapons[arm1][HP] > 0:
                Weapons[arm1][HP] -= 1
            else:
                myPlayer.equipped_Weapon.remove(arm1)
                myPlayer.inventory.append(arm1)


###############
# #Damage Gear#
###############
def Damage_gear():
    arm1 = ''.join(myPlayer.equipped_Armour)
    arm2 = ''.join(myPlayer.equipped_Greaves)
    arm3 = ''.join(myPlayer.equipped_Gauntlet)
    arm4 = ''.join(myPlayer.equipped_Helmet)
    arm5 = ''.join(myPlayer.equipped_Shield)

    if len(myPlayer.equipped_Armour) is not 0:
        if Gear[arm1][ARMOUR] is True:
            Gear[arm1][HP] -= 1
    if len(myPlayer.equipped_Greaves) is not 0:
        if Gear[arm2][GREAVES] is True:
            Gear[arm2][HP] -= 1
    if len(myPlayer.equipped_Gauntlet) is not 0:
        if Gear[arm3][GAUNTLET] is True:
            Gear[arm3][HP] -= 1
    if len(myPlayer.equipped_Helmet) is not 0:
        if Gear[arm4][HELMET] is True:
            Gear[arm4][HP] -= 1
    if len(myPlayer.equipped_Shield) is not 0:
        if Gear[arm5][SHIELD] is True:
            Gear[arm5][HP] -= 1


# displays the gears health
def gear_health_show_Shield():
    arm1 = ''.join(myPlayer.equipped_Shield)
    if len(myPlayer.equipped_Shield) is not 0:
        if Gear[arm1][HP] > 0:
            heart_hp1 = fractions.Fraction(1, 10) * 100
            heart_hp2 = fractions.Fraction(2, 10) * 100
            heart_hp3 = fractions.Fraction(3, 10) * 100
            heart_hp4 = fractions.Fraction(4, 10) * 100
            heart_hp5 = fractions.Fraction(5, 10) * 100
            heart_hp6 = fractions.Fraction(6, 10) * 100
            heart_hp7 = fractions.Fraction(7, 10) * 100
            heart_hp8 = fractions.Fraction(8, 10) * 100
            heart_hp9 = fractions.Fraction(9, 10) * 100
            heart_hp10 = fractions.Fraction(10, 10) * 100
            if Gear[arm1][HP] <= heart_hp1:

                prPurple("Health: -" + str(Gear[arm1][HP]))

            elif Gear[arm1][HP] <= heart_hp2:

                prPurple("Health: ♥" + str(Gear[arm1][HP]))

            elif Gear[arm1][HP] <= heart_hp3:

                prPurple("Health: ♥-" + str(Gear[arm1][HP]))

            elif Gear[arm1][HP] <= heart_hp4:

                prYellow("Health: ♥♥" + str(Gear[arm1][HP]))

            elif Gear[arm1][HP] <= heart_hp5:

                prYellow("Health: ♥♥-" + str(Gear[arm1][HP]))

            elif Gear[arm1][HP] <= heart_hp6:

                prOrange("Health: ♥♥♥" + str(Gear[arm1][HP]))

            elif Gear[arm1][HP] <= heart_hp7:

                prOrange("Health: ♥♥♥-" + str(Gear[arm1][HP]))

            elif Gear[arm1][HP] <= heart_hp8:

                prRed("Health: ♥♥♥♥" + str(Gear[arm1][HP]))

            elif Gear[arm1][HP] <= heart_hp9:

                prRed("Health: ♥♥♥♥-" + str(Gear[arm1][HP]))

            elif Gear[arm1][HP] <= heart_hp10:

                prRed("Health: ♥♥♥♥♥" + str(Gear[arm1][HP]))
            else:
                print('')
        else:
            print('')
    else:
        print("")


def gear_health_show_Armour():
    arm1 = ''.join(myPlayer.equipped_Armour)
    if len(myPlayer.equipped_Armour) is not 0:
        if Gear[arm1][HP] > 0:
            heart_hp1 = fractions.Fraction(1, 10) * 100
            heart_hp2 = fractions.Fraction(2, 10) * 100
            heart_hp3 = fractions.Fraction(3, 10) * 100
            heart_hp4 = fractions.Fraction(4, 10) * 100
            heart_hp5 = fractions.Fraction(5, 10) * 100
            heart_hp6 = fractions.Fraction(6, 10) * 100
            heart_hp7 = fractions.Fraction(7, 10) * 100
            heart_hp8 = fractions.Fraction(8, 10) * 100
            heart_hp9 = fractions.Fraction(9, 10) * 100
            heart_hp10 = fractions.Fraction(10, 10) * 100
            if Gear[arm1][HP] <= heart_hp1:

                prPurple("Health: -" + str(Gear[arm1][HP]))

            elif Gear[arm1][HP] <= heart_hp2:

                prPurple("Health: ♥" + str(Gear[arm1][HP]))

            elif Gear[arm1][HP] <= heart_hp3:

                prPurple("Health: ♥-" + str(Gear[arm1][HP]))

            elif Gear[arm1][HP] <= heart_hp4:

                prYellow("Health: ♥♥" + str(Gear[arm1][HP]))

            elif Gear[arm1][HP] <= heart_hp5:

                prYellow("Health: ♥♥-" + str(Gear[arm1][HP]))

            elif Gear[arm1][HP] <= heart_hp6:

                prOrange("Health: ♥♥♥" + str(Gear[arm1][HP]))

            elif Gear[arm1][HP] <= heart_hp7:

                prOrange("Health: ♥♥♥-" + str(Gear[arm1][HP]))

            elif Gear[arm1][HP] <= heart_hp8:

                prRed("Health: ♥♥♥♥" + str(Gear[arm1][HP]))

            elif Gear[arm1][HP] <= heart_hp9:

                prRed("Health: ♥♥♥♥-" + str(Gear[arm1][HP]))

            elif Gear[arm1][HP] <= heart_hp10:

                prRed("Health: ♥♥♥♥♥" + str(Gear[arm1][HP]))
            else:
                print('')
        else:
            print('')
    else:
        print("")


def gear_health_show_Greaves():
    arm2 = ''.join(myPlayer.equipped_Greaves)
    if len(myPlayer.equipped_Greaves) is not 0:
        if Gear[arm2][HP] > 0:
            heart_hp1 = fractions.Fraction(1, 10) * 100
            heart_hp2 = fractions.Fraction(2, 10) * 100
            heart_hp3 = fractions.Fraction(3, 10) * 100
            heart_hp4 = fractions.Fraction(4, 10) * 100
            heart_hp5 = fractions.Fraction(5, 10) * 100
            heart_hp6 = fractions.Fraction(6, 10) * 100
            heart_hp7 = fractions.Fraction(7, 10) * 100
            heart_hp8 = fractions.Fraction(8, 10) * 100
            heart_hp9 = fractions.Fraction(9, 10) * 100
            heart_hp10 = fractions.Fraction(10, 10) * 100
            if Gear[arm2][HP] <= heart_hp1:

                prPurple("Health: -" + str(Gear[arm2][HP]))

            elif Gear[arm2][HP] <= heart_hp2:

                prPurple("Health: ♥" + str(Gear[arm2][HP]))

            elif Gear[arm2][HP] <= heart_hp3:

                prPurple("Health: ♥-" + str(Gear[arm2][HP]))

            elif Gear[arm2][HP] <= heart_hp4:

                prYellow("Health: ♥♥" + str(Gear[arm2][HP]))

            elif Gear[arm2][HP] <= heart_hp5:

                prYellow("Health: ♥♥-" + str(Gear[arm2][HP]))

            elif Gear[arm2][HP] <= heart_hp6:

                prOrange("Health: ♥♥♥" + str(Gear[arm2][HP]))

            elif Gear[arm2][HP] <= heart_hp7:

                prOrange("Health: ♥♥♥-" + str(Gear[arm2][HP]))

            elif Gear[arm2][HP] <= heart_hp8:

                prRed("Health: ♥♥♥♥" + str(Gear[arm2][HP]))

            elif Gear[arm2][HP] <= heart_hp9:

                prRed("Health: ♥♥♥♥-" + str(Gear[arm2][HP]))

            elif Gear[arm2][HP] <= heart_hp10:

                prRed("Health: ♥♥♥♥♥" + str(Gear[arm2][HP]))
            else:
                print('')
    else:
        print('')


def gear_health_show_Helmet():
    arm3 = ''.join(myPlayer.equipped_Helmet)
    if len(myPlayer.equipped_Helmet) is not 0:
        if Gear[arm3][HP] > 0:
            heart_hp1 = fractions.Fraction(1, 10) * 100
            heart_hp2 = fractions.Fraction(2, 10) * 100
            heart_hp3 = fractions.Fraction(3, 10) * 100
            heart_hp4 = fractions.Fraction(4, 10) * 100
            heart_hp5 = fractions.Fraction(5, 10) * 100
            heart_hp6 = fractions.Fraction(6, 10) * 100
            heart_hp7 = fractions.Fraction(7, 10) * 100
            heart_hp8 = fractions.Fraction(8, 10) * 100
            heart_hp9 = fractions.Fraction(9, 10) * 100
            heart_hp10 = fractions.Fraction(10, 10) * 100
            if Gear[arm3][HP] <= heart_hp1:

                prPurple("Health: -" + str(Gear[arm3][HP]))

            elif Gear[arm3][HP] <= heart_hp2:

                prPurple("Health: ♥" + str(Gear[arm3][HP]))

            elif Gear[arm3][HP] <= heart_hp3:

                prPurple("Health: ♥-" + str(Gear[arm3][HP]))

            elif Gear[arm3][HP] <= heart_hp4:

                prYellow("Health: ♥♥" + str(Gear[arm3][HP]))

            elif Gear[arm3][HP] <= heart_hp5:

                prYellow("Health: ♥♥-" + str(Gear[arm3][HP]))

            elif Gear[arm3][HP] <= heart_hp6:

                prOrange("Health: ♥♥♥" + str(Gear[arm3][HP]))

            elif Gear[arm3][HP] <= heart_hp7:

                prOrange("Health: ♥♥♥-" + str(Gear[arm3][HP]))

            elif Gear[arm3][HP] <= heart_hp8:

                prRed("Health: ♥♥♥♥" + str(Gear[arm3][HP]))

            elif Gear[arm3][HP] <= heart_hp9:

                prRed("Health: ♥♥♥♥-" + str(Gear[arm3][HP]))

            elif Gear[arm3][HP] <= heart_hp10:

                prRed("Health: ♥♥♥♥♥" + str(Gear[arm3][HP]))
            else:
                print('')
    else:
        print("")


def gear_health_show_Gauntlet():
    arm4 = ''.join(myPlayer.equipped_Gauntlet)
    if len(myPlayer.equipped_Gauntlet) is not 0:
        if Gear[arm4][HP] > 0:
            heart_hp1 = fractions.Fraction(1, 10) * 100
            heart_hp2 = fractions.Fraction(2, 10) * 100
            heart_hp3 = fractions.Fraction(3, 10) * 100
            heart_hp4 = fractions.Fraction(4, 10) * 100
            heart_hp5 = fractions.Fraction(5, 10) * 100
            heart_hp6 = fractions.Fraction(6, 10) * 100
            heart_hp7 = fractions.Fraction(7, 10) * 100
            heart_hp8 = fractions.Fraction(8, 10) * 100
            heart_hp9 = fractions.Fraction(9, 10) * 100
            heart_hp10 = fractions.Fraction(10, 10) * 100
            if Gear[arm4][HP] <= heart_hp1:

                prPurple("Health: -" + str(Gear[arm4][HP]))

            elif Gear[arm4][HP] <= heart_hp2:

                prPurple("Health: ♥" + str(Gear[arm4][HP]))

            elif Gear[arm4][HP] <= heart_hp3:

                prPurple("Health: ♥-" + str(Gear[arm4][HP]))

            elif Gear[arm4][HP] <= heart_hp4:

                prYellow("Health: ♥♥" + str(Gear[arm4][HP]))

            elif Gear[arm4][HP] <= heart_hp5:

                prYellow("Health: ♥♥-" + str(Gear[arm4][HP]))

            elif Gear[arm4][HP] <= heart_hp6:

                prOrange("Health: ♥♥♥" + str(Gear[arm4][HP]))

            elif Gear[arm4][HP] <= heart_hp7:

                prOrange("Health: ♥♥♥-" + str(Gear[arm4][HP]))

            elif Gear[arm4][HP] <= heart_hp8:

                prRed("Health: ♥♥♥♥" + str(Gear[arm4][HP]))

            elif Gear[arm4][HP] <= heart_hp9:

                prRed("Health: ♥♥♥♥-" + str(Gear[arm4][HP]))

            elif Gear[arm4][HP] <= heart_hp10:

                prRed("Health: ♥♥♥♥♥" + str(Gear[arm4][HP]))
            else:
                print('')
    else:
        print("")


def gear_health_show_Weapon():
    arm5 = ''.join(myPlayer.equipped_Weapon)
    if len(myPlayer.equipped_Weapon) is not 0:
        if Weapons[arm5][HP] > 0:
            heart_hp1 = fractions.Fraction(1, 10) * 100
            heart_hp2 = fractions.Fraction(2, 10) * 100
            heart_hp3 = fractions.Fraction(3, 10) * 100
            heart_hp4 = fractions.Fraction(4, 10) * 100
            heart_hp5 = fractions.Fraction(5, 10) * 100
            heart_hp6 = fractions.Fraction(6, 10) * 100
            heart_hp7 = fractions.Fraction(7, 10) * 100
            heart_hp8 = fractions.Fraction(8, 10) * 100
            heart_hp9 = fractions.Fraction(9, 10) * 100
            heart_hp10 = fractions.Fraction(10, 10) * 100
            if Weapons[arm5][HP] <= heart_hp1:

                prPurple("Health: -" + str(Weapons[arm5][HP]))

            elif Weapons[arm5][HP] <= heart_hp2:

                prPurple("Health: ♥" + str(Weapons[arm5][HP]))

            elif Weapons[arm5][HP] <= heart_hp3:

                prPurple("Health: ♥-" + str(Weapons[arm5][HP]))

            elif Weapons[arm5][HP] <= heart_hp4:

                prYellow("Health: ♥♥" + str(Weapons[arm5][HP]))

            elif Weapons[arm5][HP] <= heart_hp5:

                prYellow("Health: ♥♥-" + str(Weapons[arm5][HP]))

            elif Weapons[arm5][HP] <= heart_hp6:

                prOrange("Health: ♥♥♥" + str(Weapons[arm5][HP]))

            elif Weapons[arm5][HP] <= heart_hp7:

                prOrange("Health: ♥♥♥-" + str(Weapons[arm5][HP]))

            elif Weapons[arm5][HP] <= heart_hp8:

                prRed("Health: ♥♥♥♥" + str(Weapons[arm5][HP]))

            elif Weapons[arm5][HP] <= heart_hp9:

                prRed("Health: ♥♥♥♥-" + str(Weapons[arm5][HP]))

            elif Weapons[arm5][HP] <= heart_hp10:

                prRed("Health: ♥♥♥♥♥" + str(Weapons[arm5][HP]))
            else:
                print('')
    else:
        print("")


class Inn:
    def Healing_inn(self):
        os.system('cls')
        if myPlayer.location in within.Heal_inn:
            print_medeum('Welcome to the Healing Inn\n')
            talk = ''
            while talk.lower() not in within.quit:
                os.system('cls')
                print("┌───────────────────────────────┐")
                print('│          Healing Inn          │')
                print('│            Commands           │')
                print('│           Heal|Quit           │')
                print('│           Φ100|               │')
                print("└───────────────────────────────┘")
                talk = input('> ')
                if talk.lower() == 'heal':
                    if my_wallet.balance >= 100:
                        my_wallet.withdraw(100)
                        myPlayer.hp = myPlayer.max_hp
                        myPlayer.mp = myPlayer.max_mp
                        print_medeum('Healing....Done!\n')
                        input('Press ENTER to continue')

                    else:
                        print_medeum('You do not have enough gold!\n')
                        input('Press ENTER to continue')



CheckPoint = Inn()


###########################
####Mob defeated##########
##########################
def Boss_defeated():
    if Boss_mob.hp <= 0:
        if Boss_mob.type == 'Faceless Entity':
            areamap['dungeon_boss_room21'][BOSS_TF] = False
            areamap['dungeon_boss_room21'][WEST] = False
            Boss_mob.hp = random.randint(1, 3) + 4 * 2
            list = ['1', '2', '3']
            chance = random.choice(list)
            print("┌───────────────────────────────┐")
            print('│         Battle Results        │')
            Boss_level_up_scaling()
            Boss_level_up_scaling_companion()
            print('│Total xp: ' + str(myPlayer.xp) + " xp\n│")
            print("└───────────────────────────────┘")
            input("Press ENTER to continue")
            areamap['dungeon_bottom_right_tunnel4'][SOUTH]= False
            Can_spawn.trigger = False
            level_gain()
            level_gain_companion()
            if chance == '1':
                my_wallet.deposit(20)
                print_medeum('You won 20 gold!\n')
                input('Press ENTER to continue')
                Credit()


            elif chance == '2':
                my_wallet.deposit(15)
                print_medeum('You won 15 gold!\n')
                input('Press ENTER to continue')
                Credit()


            elif chance == '3':
                my_wallet.deposit(10)
                print_medeum('You won 10 gold!\n')
                input('Press ENTER to continue')
                Credit()



def mob_defeated():
    if Mob.hp <= 0:
        Mob.hp = random.randint(1, 3) + 4 * 2
        list = ['1', '2', '3']
        chance = random.choice(list)
        print("┌───────────────────────────────┐")
        print('│         Battle Results        │')
        level_up_scaling()
        level_up_scaling_companion()
        print('│Total xp: ' + str(myPlayer.xp) + " xp\n│")
        print("└───────────────────────────────┘")
        input("Press ENTER to continue")
        Can_spawn.trigger = False
        level_gain()
        level_gain_companion()
        if chance == '1':
            my_wallet.deposit(20)
            print_medeum('You won 20 gold!\n')
            input('Press ENTER to continue')
            prompt()


        elif chance == '2':
            my_wallet.deposit(15)
            print_medeum('You won 15 gold!\n')
            input('Press ENTER to continue')
            prompt()


        elif chance == '3':
            my_wallet.deposit(10)
            print_medeum('You won 10 gold!\n')
            input('Press ENTER to continue')
            prompt()


def Achievment():
    print("┌───────────────────────────────┐")
    print('│            Reward             │')
    level_up_scaling()
    print('│Total xp: ' + str(myPlayer.xp) + " xp\n│")
    print("└───────────────────────────────┘")
    input("Press ENTER to continue")

##################
###Mission step 4#
##################
def Completed_mission():
    print("┌───────────────────────────────┐")
    print('│         Mission Reward        │')
    Mission_complete_reward()
    print('│Total xp: ' + str(myPlayer.xp) + " xp\n│")
    print("└───────────────────────────────┘")
    input("Press ENTER to continue")


#######################
####Base Storage#######
#######################

class base_storage:
    def __init__(self):
        self.Storage = []


Player_base = base_storage()


def Player_deposit():

    if myPlayer.location in within.Storage_Locations:
        os.system('cls')
        print("┌────────────────────────────────────────────────────────┐")
        print('│                        Commands                        │')
        print("│         TYPE:    Withdraw|Deposit|Quit                 │")
        print("└────────────────────────────────────────────────────────┘")
        print_medeum('*Opening your Storage...*\n')
        prGreen("┌────────────────────────┐")
        prGreen('\n'.join(myPlayer.inventory))
        prGreen("└────────────────────────┘")
        prBlue("┌────────────────────────┐")
        prBlue('\n'
               ''
               ''.join(Player_base.Storage))
        prBlue("└────────────────────────┘")
        storage = input('> ')
        if storage.lower() == 'deposit':
            deposit = input('Deposit: ')
            if deposit in myPlayer.inventory:
                Player_base.Storage.append(deposit)
                myPlayer.inventory.remove(deposit)
        elif storage.lower() == 'withdraw':
            withdraw = input('Withdraw: ')
            if withdraw in Player_base.Storage:
                append_check(withdraw)
                Player_base.Storage.remove(withdraw)
        while storage not in within.quit:
            os.system('cls')
            prGreen("┌────────────────────────┐")
            prGreen('\n'.join(myPlayer.inventory))
            prGreen("└────────────────────────┘")
            prBlue("┌────────────────────────┐")
            prBlue('\n'.join(Player_base.Storage))
            prBlue("└────────────────────────┘")
            storage = input('> ')
            if storage.lower() == 'deposit':
                deposit = input('Deposit: ')
                if deposit in myPlayer.inventory:
                    Player_base.Storage.append(deposit)
                    myPlayer.inventory.remove(deposit)
            elif storage.lower() == 'withdraw':
                withdraw = input('Withdraw: ')
                if withdraw in Player_base.Storage:
                    append_check(withdraw)
                    Player_base.Storage.remove(withdraw)
            else:
                print('Item not found')


#################################
###Inventory Engine goes here####
#################################
def Inventory_engine_2():
    unequip_gear_low_health()
    os.system('cls')
    print("┌────────────────────────────────────────────────────────┐")
    print('│                        Commands                        │')
    print("│         TYPE:   Equip|Unequip|Quit|Help                │")
    print("│         THEN:          Item Name                       │")
    print("└────────────────────────────────────────────────────────┘")
    print("│Armour Rating: " + str(armour_value.armour) + "│")
    print("┌───────────────┐")
    prGreen("   Inventory:\n" + '\n'.join(myPlayer.inventory))
    prGreen("   Quiver:\n" + '\n'.join(myPlayer.quiver))
    print("└───────────────┘")
    print("┌───────────────┐")
    gear_health_show_Helmet()
    print("Helmet: " + str(''.join(myPlayer.equipped_Helmet) + ''))
    print("└───────────────┘")
    print("┌───────────────┐")
    gear_health_show_Armour()
    print("Armour: " + str(''.join(myPlayer.equipped_Armour) + ""))
    print("└───────────────┘")
    print("┌───────────────┐")
    gear_health_show_Gauntlet()
    print("Gauntlet: " + str(''.join(myPlayer.equipped_Gauntlet) + ""))
    print("└───────────────┘")
    print("┌───────────────┐")
    gear_health_show_Greaves()
    print("Greaves: " + str(''.join(myPlayer.equipped_Greaves) + ""))
    print("└───────────────┘")
    print("┌───────────────┐")
    gear_health_show_Shield()
    print("Shield: " + str(''.join(myPlayer.equipped_Shield) + ''))
    print("└───────────────┘")
    print("┌───────────────┐")
    print("Spell: " + str(''.join(myPlayer.equipped_spell) + ""))
    print("└───────────────┘")
    print("┌───────────────┐")
    gear_health_show_Weapon()
    print("Weapon: " + str(''.join(myPlayer.equipped_Weapon) + ""))
    print("└───────────────┘")
    print("┌───────────────┐")
    print("Ranged: " + str(''.join(myPlayer.equipped_Ranged) + ""))
    print("└───────────────┘")
    print("┌───────────────┐")
    print("Arrow: " + str(''.join(myPlayer.equipped_Arrow) + ""))
    print("└───────────────┘")
    print("┌───────────────┐")
    print("Pet: " + str(''.join(myPlayer.equipped_Pet) + ""))
    print("└───────────────┘")
    print("┌────────────────────────────────────────────────────────┐")
    print("│                    Enter in a Item                     │")
    print("└────────────────────────────────────────────────────────┘")
    talk = input("> ")
    #### Equip Weapon ###
    if talk in within.equip:
        ask = input("Equip: ")
        if ask in myPlayer.inventory:
            if ask in Gear:
                if Gear[ask][EQUIPABLE] is True:
                    if Gear[ask][HP] > 0:
                        if Gear[ask][CHEST] is True:
                            if len(myPlayer.equipped_Armour) is 0:
                                myPlayer.equipped_Armour.append(ask)
                                myPlayer.inventory.remove(ask)
                                armour_value.Add_armour(Gear[ask][ARMOUR])
                        elif Gear[ask][HELMET] is True:
                            if len(myPlayer.equipped_Helmet) is 0:
                                myPlayer.equipped_Helmet.append(ask)
                                myPlayer.inventory.remove(ask)
                                armour_value.Add_armour(Gear[ask][ARMOUR])
                        elif Gear[ask][GAUNTLET] is True:
                            if len(myPlayer.equipped_Gauntlet) is 0:
                                myPlayer.equipped_Gauntlet.append(ask)
                                myPlayer.inventory.remove(ask)
                                armour_value.Add_armour(Gear[ask][ARMOUR])
                        elif Gear[ask][GREAVES] is True:
                            if len(myPlayer.equipped_Greaves) is 0:
                                myPlayer.equipped_Greaves.append(ask)
                                myPlayer.inventory.remove(ask)
                                armour_value.Add_armour(Gear[ask][ARMOUR])
                        #################Shield
                        elif Gear[ask][SHIELD] is True:
                            if len(myPlayer.equipped_Shield) is 0:
                                myPlayer.equipped_Shield.append(ask)
                                myPlayer.inventory.remove(ask)
                                armour_value.Add_armour(Gear[ask][ARMOUR])
                    else:
                        print('Gears health is too low, repair and try again')
                        input('Press ENTER to continue')
            elif ask in Weapons:
                if Weapons[ask][EQUIPABLE] is True:
                    if Weapons[ask][HP] > 0:
                        if Weapons[ask][WEAPON] is True:
                            if len(myPlayer.equipped_Weapon) is 0:
                                myPlayer.equipped_Weapon.append(ask)
                                myPlayer.inventory.remove(ask)
            elif ask in Spells:
                if Spells[ask][EQUIPABLE] is True:
                    if Spells[ask][WEAPON] is True:
                        if len(myPlayer.equipped_spell) is 0:
                            myPlayer.equipped_spell.append(ask)
                            myPlayer.inventory.remove(ask)
            elif ask in Ranged:
                if Ranged[ask][EQUIPABLE] is True:
                    if Ranged[ask][WEAPON] is True:
                        if len(myPlayer.equipped_Ranged) is 0:
                            myPlayer.equipped_Ranged.append(ask)
                            myPlayer.inventory.remove(ask)
            elif ask in Pet:
                if Pet[ask][EQUIPABLE] is True:
                    if Pet[ask][PET] is True:
                        if len(myPlayer.equipped_Pet) is 0:
                            myPlayer.equipped_Pet.append(ask)
                            myPlayer.inventory.remove(ask)
                            myPlayer.max_hp += Pet[ask][HP_add]
                            myPlayer.max_mp += Pet[ask][MP_add]
                            myPlayer.attack += Pet[ask][ATTACK_add]
                            myPlayer.Magic_attack += Pet[ask][MP_attack_add]
                    else:
                        print("your inventory is too full")
                else:
                    print("This item might not be spelled right")
            else:
                print("Cannot equip this item")


        elif ask in myPlayer.quiver:
            if ask in Weapons:
                if Weapons[ask][EQUIPABLE] is True:
                    if Weapons[ask][ARROW] is True:
                        if len(myPlayer.equipped_Arrow) is 0:
                            myPlayer.equipped_Arrow.append(ask)
        else:
            print("item cannot be equipped")
    elif talk in within.unequip:
        ask = input("Unequip: ")
        if ask in myPlayer.equipped_Armour:
            if Gear[ask][EQUIPABLE] is True:
                if Gear[ask][CHEST] is True:
                    myPlayer.equipped_Armour.remove(ask)
                    myPlayer.inventory.append(ask)
                    armour_value.Deplete_armour(Gear[ask][ARMOUR])
        elif ask in myPlayer.equipped_Helmet:
            if Gear[ask][EQUIPABLE] is True:
                if Gear[ask][HELMET] is True:
                    myPlayer.equipped_Helmet.remove(ask)
                    myPlayer.inventory.append(ask)
                    armour_value.Deplete_armour(Gear[ask][ARMOUR])
        elif ask in myPlayer.equipped_Gauntlet:
            if Gear[ask][EQUIPABLE] is True:
                if Gear[ask][GAUNTLET] is True:
                    myPlayer.equipped_Gauntlet.remove(ask)
                    myPlayer.inventory.append(ask)
                    armour_value.Deplete_armour(Gear[ask][ARMOUR])
        elif ask in myPlayer.equipped_Greaves:
            if Gear[ask][EQUIPABLE] is True:
                if Gear[ask][GREAVES] is True:
                    myPlayer.equipped_Greaves.remove(ask)
                    myPlayer.inventory.append(ask)
                    armour_value.Deplete_armour(Gear[ask][ARMOUR])
        elif ask in myPlayer.equipped_Shield:
            if Gear[ask][EQUIPABLE] is True:
                if Gear[ask][SHIELD] is True:
                    myPlayer.equipped_Shield.remove(ask)
                    myPlayer.inventory.append(ask)
                    armour_value.Deplete_armour(Gear[ask][ARMOUR])
        elif ask in myPlayer.equipped_Weapon:
            if Weapons[ask][EQUIPABLE] is True:
                if Weapons[ask][WEAPON] is True:
                    myPlayer.equipped_Weapon.remove(ask)
                    myPlayer.inventory.append(ask)
        elif ask in myPlayer.equipped_spell:
            if Spells[ask][EQUIPABLE] is True:
                if Spells[ask][WEAPON] is True:
                    myPlayer.equipped_spell.remove(ask)
                    myPlayer.inventory.append(ask)
        elif ask in myPlayer.equipped_Ranged:
            if Ranged[ask][EQUIPABLE] is True:
                if Ranged[ask][WEAPON] is True:
                    myPlayer.equipped_Ranged.remove(ask)
                    myPlayer.inventory.append(ask)
        elif ask in myPlayer.equipped_Pet:
            if Pet[ask][EQUIPABLE] is True:
                if Pet[ask][PET] is True:
                    myPlayer.equipped_Pet.remove(ask)
                    myPlayer.inventory.append(ask)
                    myPlayer.max_hp -= Pet[ask][HP_add]
                    myPlayer.max_mp -= Pet[ask][MP_add]
                    myPlayer.attack -= Pet[ask][ATTACK_add]
                    myPlayer.Magic_attack -= Pet[ask][MP_attack_add]
        elif ask in myPlayer.equipped_Arrow:
            if Weapons[ask][EQUIPABLE] is True:
                if Weapons[ask][ARROW] is True:
                    myPlayer.equipped_Arrow.remove(ask)
                else:
                    print("this item might not be spelled right")
            else:
                print("You cannot equip this item")
        else:
            print("Item is not currently equipped")
            input("Press ENTER to continue")
    elif talk.lower() in within.help:
        help()
    while talk.lower() not in within.quit:
        unequip_gear_low_health()
        os.system('cls')
        print("┌────────────────────────────────────────────────────────┐")
        print('│                        Commands                        │')
        print("│         TYPE:   Equip|Unequip|Quit|Help                │")
        print("│         THEN:          Item Name                       │")
        print("└────────────────────────────────────────────────────────┘")
        print("│Armour Rating: " + str(armour_value.armour) + "│")
        print("┌───────────────┐")
        prGreen("   Inventory:\n" + '\n'.join(myPlayer.inventory))
        prGreen("   Quiver:\n" + '\n'.join(myPlayer.quiver))
        print("└───────────────┘")
        print("┌───────────────┐")
        gear_health_show_Helmet()
        print("Helmet: " + str(''.join(myPlayer.equipped_Helmet) + ''))
        print("└───────────────┘")
        print("┌───────────────┐")
        gear_health_show_Armour()
        print("Armour: " + str(''.join(myPlayer.equipped_Armour) + ""))
        print("└───────────────┘")
        print("┌───────────────┐")
        gear_health_show_Gauntlet()
        print("Gauntlet: " + str(''.join(myPlayer.equipped_Gauntlet) + ""))
        print("└───────────────┘")
        print("┌───────────────┐")
        gear_health_show_Greaves()
        print("Greaves: " + str(''.join(myPlayer.equipped_Greaves) + ""))
        print("└───────────────┘")
        print("┌───────────────┐")
        gear_health_show_Shield()
        print("Shield: " + str(''.join(myPlayer.equipped_Shield) + ''))
        print("└───────────────┘")
        print("┌───────────────┐")
        print("Spell: " + str(''.join(myPlayer.equipped_spell) + ""))
        print("└───────────────┘")
        print("┌───────────────┐")
        gear_health_show_Weapon()
        print("Weapon: " + str(''.join(myPlayer.equipped_Weapon) + ""))
        print("└───────────────┘")
        print("┌───────────────┐")
        print("Ranged: " + str(''.join(myPlayer.equipped_Ranged) + ""))
        print("└───────────────┘")
        print("┌───────────────┐")
        print("Arrow: " + str(''.join(myPlayer.equipped_Arrow) + ""))
        print("└───────────────┘")
        print("┌───────────────┐")
        print("Pet: " + str(''.join(myPlayer.equipped_Pet) + ""))
        print("└───────────────┘")
        print("┌────────────────────────────────────────────────────────┐")
        print("│                    Enter in a Item                     │")
        print("└────────────────────────────────────────────────────────┘")
        talk = input("> ")
        #### Equip Weapon ###
        if talk in within.equip:
            ask = input("Equip: ")
            if ask in myPlayer.inventory:
                if ask in Gear:
                    if Gear[ask][EQUIPABLE] is True:
                        if Gear[ask][HP] > 0:
                            if Gear[ask][CHEST] is True:
                                if len(myPlayer.equipped_Armour) is 0:
                                    myPlayer.equipped_Armour.append(ask)
                                    myPlayer.inventory.remove(ask)
                                    armour_value.Add_armour(Gear[ask][ARMOUR])
                            elif Gear[ask][HELMET] is True:
                                if len(myPlayer.equipped_Helmet) is 0:
                                    myPlayer.equipped_Helmet.append(ask)
                                    myPlayer.inventory.remove(ask)
                                    armour_value.Add_armour(Gear[ask][ARMOUR])
                            elif Gear[ask][GAUNTLET] is True:
                                if len(myPlayer.equipped_Gauntlet) is 0:
                                    myPlayer.equipped_Gauntlet.append(ask)
                                    myPlayer.inventory.remove(ask)
                                    armour_value.Add_armour(Gear[ask][ARMOUR])
                            elif Gear[ask][GREAVES] is True:
                                if len(myPlayer.equipped_Greaves) is 0:
                                    myPlayer.equipped_Greaves.append(ask)
                                    myPlayer.inventory.remove(ask)
                                    armour_value.Add_armour(Gear[ask][ARMOUR])
                            #################Shield
                            elif Gear[ask][SHIELD] is True:
                                if len(myPlayer.equipped_Shield) is 0:
                                    myPlayer.equipped_Shield.append(ask)
                                    myPlayer.inventory.remove(ask)
                                    armour_value.Add_armour(Gear[ask][ARMOUR])
                        else:
                            print('Gears health is too low, repair and try again')
                            input('Press ENTER to continue')
                elif ask in Weapons:
                    if Weapons[ask][EQUIPABLE] is True:
                        if Weapons[ask][HP] > 0:
                            if Weapons[ask][WEAPON] is True:
                                if len(myPlayer.equipped_Weapon) is 0:
                                    myPlayer.equipped_Weapon.append(ask)
                                    myPlayer.inventory.remove(ask)
                elif ask in Spells:
                    if Spells[ask][EQUIPABLE] is True:
                        if Spells[ask][WEAPON] is True:
                            if len(myPlayer.equipped_spell) is 0:
                                myPlayer.equipped_spell.append(ask)
                                myPlayer.inventory.remove(ask)
                elif ask in Ranged:
                    if Ranged[ask][EQUIPABLE] is True:
                        if Ranged[ask][WEAPON] is True:
                            if len(myPlayer.equipped_Ranged) is 0:
                                myPlayer.equipped_Ranged.append(ask)
                                myPlayer.inventory.remove(ask)
                elif ask in Pet:
                    if Pet[ask][EQUIPABLE] is True:
                        if Pet[ask][PET] is True:
                            if len(myPlayer.equipped_Pet) is 0:
                                myPlayer.equipped_Pet.append(ask)
                                myPlayer.inventory.remove(ask)
                                myPlayer.max_hp += Pet[ask][HP_add]
                                myPlayer.max_mp += Pet[ask][MP_add]
                                myPlayer.attack += Pet[ask][ATTACK_add]
                                myPlayer.Magic_attack += Pet[ask][MP_attack_add]
                        else:
                            print("your inventory is too full")
                    else:
                        print("This item might not be spelled right")

            elif ask in myPlayer.quiver:
                if ask in Weapons:
                    if Weapons[ask][EQUIPABLE] is True:
                        if Weapons[ask][ARROW] is True:
                            if len(myPlayer.equipped_Arrow) is 0:
                                myPlayer.equipped_Arrow.append(ask)
                else:
                    print("Cannot equip this item")
            else:
                print("item cannot be equipped")
        elif talk in within.unequip:
            ask = input("Unequip: ")
            if ask in myPlayer.equipped_Armour:
                if Gear[ask][EQUIPABLE] is True:
                    if Gear[ask][CHEST] is True:
                        myPlayer.equipped_Armour.remove(ask)
                        myPlayer.inventory.append(ask)
                        armour_value.Deplete_armour(Gear[ask][ARMOUR])
            elif ask in myPlayer.equipped_Helmet:
                if Gear[ask][EQUIPABLE] is True:
                    if Gear[ask][HELMET] is True:
                        myPlayer.equipped_Helmet.remove(ask)
                        myPlayer.inventory.append(ask)
                        armour_value.Deplete_armour(Gear[ask][ARMOUR])
            elif ask in myPlayer.equipped_Gauntlet:
                if Gear[ask][EQUIPABLE] is True:
                    if Gear[ask][GAUNTLET] is True:
                        myPlayer.equipped_Gauntlet.remove(ask)
                        myPlayer.inventory.append(ask)
                        armour_value.Deplete_armour(Gear[ask][ARMOUR])
            elif ask in myPlayer.equipped_Greaves:
                if Gear[ask][EQUIPABLE] is True:
                    if Gear[ask][GREAVES] is True:
                        myPlayer.equipped_Greaves.remove(ask)
                        myPlayer.inventory.append(ask)
                        armour_value.Deplete_armour(Gear[ask][ARMOUR])
            elif ask in myPlayer.equipped_Shield:
                if Gear[ask][EQUIPABLE] is True:
                    if Gear[ask][SHIELD] is True:
                        myPlayer.equipped_Shield.remove(ask)
                        myPlayer.inventory.append(ask)
                        armour_value.Deplete_armour(Gear[ask][ARMOUR])
            elif ask in myPlayer.equipped_Weapon:
                if Weapons[ask][EQUIPABLE] is True:
                    if Weapons[ask][WEAPON] is True:
                        myPlayer.equipped_Weapon.remove(ask)
                        myPlayer.inventory.append(ask)
            elif ask in myPlayer.equipped_spell:
                if Spells[ask][EQUIPABLE] is True:
                    if Spells[ask][WEAPON] is True:
                        myPlayer.equipped_spell.remove(ask)
                        myPlayer.inventory.append(ask)
            elif ask in myPlayer.equipped_Ranged:
                if Ranged[ask][EQUIPABLE] is True:
                    if Ranged[ask][WEAPON] is True:
                        myPlayer.equipped_Ranged.remove(ask)
                        myPlayer.inventory.append(ask)
            elif ask in myPlayer.equipped_Pet:
                if Pet[ask][EQUIPABLE] is True:
                    if Pet[ask][PET] is True:
                        myPlayer.equipped_Pet.remove(ask)
                        myPlayer.inventory.append(ask)
                        myPlayer.max_hp -= Pet[ask][HP_add]
                        myPlayer.max_mp -= Pet[ask][MP_add]
                        myPlayer.attack -= Pet[ask][ATTACK_add]
                        myPlayer.Magic_attack -= Pet[ask][MP_attack_add]
            elif ask in myPlayer.equipped_Arrow:
                if Weapons[ask][EQUIPABLE] is True:
                    if Weapons[ask][ARROW] is True:
                        myPlayer.equipped_Arrow.remove(ask)
                    else:
                        print("this item might not be spelled right")
                else:
                    print("You cannot equip this item")
            else:
                print("Item is not currently equipped")
                input("Press ENTER to continue")
        elif talk.lower() in within.help:
            help()


##########################
# prompts loading the game#
##########################
class Loading_value:
    def __init__(self):
        self.Load_game = True


value = Loading_value()

class WeatherCounter:
    def __init__(self):
        self.total = 0

Weather_counter = WeatherCounter()

class StepCounter:
    def __init__(self):
        self.total = 0


Spawn_Counter = StepCounter()




def Boss_counter():
    PlayerLocation = ''.join(myPlayer.location)
    if areamap[PlayerLocation][BOSS_TF] is True:

        Boss_encounter()

def mob_counter():
    PlayerLocation = ''.join(myPlayer.location)


    if areamap[PlayerLocation][MOB] is True:
        PlayerLocation = ''.join(myPlayer.location)
        Spawn_Counter.total -= 1
        if Spawn_Counter.total <= 0:
            Spawn_Counter.total = random.randint(1, 10)
            Random_encounter()




###########Options menu################
def options_menu():
    os.system('cls')
    print("┌──────────────────────────────────────────────────┐")
    print("│                  Options Menu                    │")
    print('└──────────────────────────────────────────────────┘')
    print("│Help | Inventory | Equip | Attribute |Stats | Item│")
    print("│                 Journal | Books | Quit           │")
    print('└──────────────────────────────────────────────────┘')
    action = input('> ')
    if action.lower() in within.help:
        help()
    elif action.lower() in within.inventory:
        Show_Inventory()
    elif action.lower() in within.equip:
        Inventory_engine_2()
    elif action.lower() in within.attribute:
        attribute_engine()
    elif action.lower() in within.stats:
        Player_stats()
    elif action.lower() in within.potions:
        Items()
    elif action.lower() in within.journal:
        Journal()
    elif action.lower() == 'books':
        book_reading()
    while action.lower() != 'quit':
        os.system('cls')
        print("┌──────────────────────────────────────────────────┐")
        print("│                  Options Menu                    │")
        print('└──────────────────────────────────────────────────┘')
        print("│Help | Inventory | Equip | Attribute |Stats | Item│")
        print("│                 Journal | Books | Quit           │")
        print('└──────────────────────────────────────────────────┘')
        action = input('> ')
        if action.lower() in within.help:
            help()
        elif action.lower() in within.inventory:
            Show_Inventory()
        elif action.lower() in within.equip:
            Inventory_engine_2()
        elif action.lower() in within.attribute:
            attribute_engine()
        elif action.lower() in within.stats:
            Player_stats()
        elif action.lower() in within.potions:
            Items()
        elif action.lower() in within.journal:
            Journal()
        elif action.lower() == 'books':
            book_reading()


##### This is what the player inputs ####

def prompt():
    missions_toggle()
    Current_mission()



    assign_saves()
    
    os.system('cls')
    Weather_counter_step()
    Night_time()
    Day_time()
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    Print_map()
    Health()
    Mana_pool()

    print("┌──────────────────────────────────────────────────────────┐")
    print('│' + myPlayer.name + "'s Level: " + str(myPlayer.level) + '                                               ')
    print('│' + areamap[myPlayer.location][ZONENAME] + '                                                  ')
    print('│' + areamap[myPlayer.location][DESCRIPTION] + '')
    print("└──────────────────────────────────────────────────────────┘")

    Weather_counter_step()
    Weather_printer()
    if weather_behavior.day == True:
        print("┌───────────┐")
        print(" Time: day")
        print('└───────────┘')
    elif weather_behavior.night == True:
        print("┌───────────┐")
        print(" Time: Night")
        print('└───────────┘')
    action = input("><> ")
    #######################Quit START######################
    if action.lower() in within.quit:
        print_slow('Are you sure you want to quit?\n')
        YesorNo = input("Yes or no?: ")
        if YesorNo in within.accept:
            os.system('cls')
            title_screen()
        else:
            os.system('cls')
    #######################Quit END######################
    elif action.lower() =='craft':
        Crafting_Table()
    elif action.lower() == 'open':
        Crate_location()
    elif action.lower() =='alchemy':
        Alchemy_Table()
    elif action.lower() == 'kitchen':
        Kitchen_function()
    #######################Player base storage Start ##################
    elif action.lower() in within.store:
        Player_deposit()

    #######################Player Base storage end ###################
    ##########################Player Checkpoint Inn###################
    elif action.lower() in within.inn:
        CheckPoint.Healing_inn()
    ##########################Player Checkpoint Inn###################
    #######################Navigation END######################

    elif action in ['up', 'north', 'w']:
        if areamap[myPlayer.location][NORTH] is False:
            Boss_counter()
            mob_counter()
            destination = areamap[myPlayer.location][UP]
            movement_handler(destination)

            Status_effect_poisen()
            Can_spawn.trigger = True
        else:
            print_medeum('Door is locked...\n')
            input('Press ENTER to continue')
    elif action in ['down', 'south', 's']:
        if areamap[myPlayer.location][SOUTH] is False:
            Boss_counter()
            mob_counter()
            destination = areamap[myPlayer.location][DOWN]
            movement_handler(destination)

            Status_effect_poisen()
            Can_spawn.trigger = True
        else:
            print_medeum('Door is locked...\n')
            input('Press ENTER to continue')
    elif action in ['right', 'east', 'd']:
        if areamap[myPlayer.location][EAST] is False:
            Boss_counter()
            mob_counter()
            destination = areamap[myPlayer.location][RIGHT]
            movement_handler(destination)

            Status_effect_poisen()
            Can_spawn.trigger = True
        else:
            print_medeum('Door is locked...\n')
            input('Press ENTER to continue')



            Can_spawn.trigger = True
    elif action in ['left', 'west', 'a']:
        if areamap[myPlayer.location][WEST] is False:
            Boss_counter()
            mob_counter()
            destination = areamap[myPlayer.location][LEFT]
            movement_handler(destination)

            Status_effect_poisen()
            Can_spawn.trigger = True
        else:
            print_medeum('Door is locked...\n')
            input('Press ENTER to continue')
    #######################Navigation END######################
    #######################Services Start######################
    elif action.lower() == 'smith':
        if myPlayer.location == 'CityOfAden22':
            Smith_shop()
        else:
            print("Not in the smith shop\n")
    elif action.lower() in within.attribute:
        attribute_engine()
    elif action.lower() in within.save:
        if myPlayer.location in within.Heal_inn:
            save()
            save_dict_potion()
            save_dict_Ranged()
            save_dict_gear()
            save_dict_Spells()
            save_dict_Weapons()
            save_dict_Mission()
            save_dict_areamap()
        else:
            print('oops! Not in a Inn!')
            input('Press ENTER to continue')
    elif action.lower() in within.stats:
        Player_stats()
    elif action.lower() in within.equip:
        Inventory_engine_2()
    elif action.lower() in within.potions:
        Items()
    elif action.lower() in within.options:
        options_menu()

    #######################Services END######################
    #####################Start Take Items################################
    elif action.lower() in within.aquire:
        PlayerLocation = ''.join(myPlayer.location)
        get = input('Take Item: ')
        if areamap[PlayerLocation][ITEM_EXIST] is True:

            if areamap[PlayerLocation][ITEM] not in myPlayer.inventory:

                if get.lower() == areamap[PlayerLocation][ITEM]:
                    print_medeum('You take the ' + str(areamap[PlayerLocation][ITEM]) + '.\n')
                    input("Press ENTER to continue")
                    myPlayer.inventory.append(areamap[PlayerLocation][ITEM])
                    areamap[PlayerLocation][ITEM_EXIST] = False



                else:
                    print('cannot pick up ' + get + '.')
                    input("Press ENTER to continue")
        else:
            print('Nothing to take here')
            input("Press ENTER to continue")
    #####################End Take Items##########################
    elif action.lower() == 'journal':
        Journal()
    # elif action.lower() in within.navigation:
    #     player_move(action.lower())
    elif action.lower() in within.help:
        help()
        ################### Interact with NPC #################
    elif action.lower() in within.talk:
        if myPlayer.location == 'CityOfAden23':
            print_medeum('You see Abigail Winchester here, do you want to speak with them?\n')
            talk = input('> ')
            if talk in within.accept:
                Character.AbigailWinchester()

        elif myPlayer.location == 'CityOfAdenLower6':
            print_medeum('You see someone here, do you want to speak with them?\n')
            talk = input('> ')
            if talk.lower() in within.accept:
                Character.ByStander2()
        elif myPlayer.location == 'CityOfAdenLower12':
            print_medeum('You see someone here, do you want to speak with them?\n')
            talk = input('> ')
            if talk.lower() in within.accept:
                Character.ByStander3()
        elif myPlayer.location == 'CityOfAdenLower28':
            print_medeum('You see someone here, do you want to speak with them?\n')
            talk = input('> ')
            if talk.lower() in within.accept:
                Character.ByStander4()
        elif myPlayer.location == 'CityOfAdenLower29':
            print_medeum('You see someone here, do you want to speak with them?\n')
            talk = input('> ')
            if talk.lower() in within.accept:
                Character.ByStander5()
        elif myPlayer.location == 'CityOfAdenLower30':
            print_medeum('You see someone here, do you want to speak with them?\n')
            talk = input('> ')
            if talk.lower() in within.accept:
                Character.ByStander6()
        elif myPlayer.location == 'CityOfAdenLower31':
            print_medeum('You see someone here, do you want to speak with them?\n')
            talk = input('> ')
            if talk.lower() in within.accept:
                Character.ByStander7()
        elif myPlayer.location == 'Guest Research':
            print_medeum('You see Klaus Muller, do you want to speak with them?\n')
            talk = input('> ')
            if talk.lower() in within.accept:
                Character.KlausMuller()
        elif myPlayer.location == 'Street':
            print_medeum('You see Anne Shephard, do you want to speak with them?\n')
            talk = input('> ')
            if talk.lower() in within.accept:
                Character.AnneShephard()

    ######Interaction in the environment#####
    elif action.lower() in within.look:
        Random_pet_encounter()
        PlayerLocation = ''.join(myPlayer.location)
        if PlayerLocation in areamap:
            if areamap[PlayerLocation][OBJECT] is True and areamap[PlayerLocation][ITEM_EXIST] is True:
                print("Multiple objects are here\n")
                input("Press ENTER to continue")
            if areamap[PlayerLocation][OBJECT] is True:
                Crate_location()


            if areamap[PlayerLocation][ITEM_EXIST] is True:
                os.system('cls')
                print_medeum('You see ' + str(areamap[PlayerLocation][ITEM]) + ' in this location.\n')
                input("Press ENTER to continue")
                os.system('cls')
            if areamap[PlayerLocation][NPC_EXIST] is True:
                os.system('cls')
                print_medeum('You see ' + str(areamap[PlayerLocation][NPC_NAME]) + ' in this location.\n')
                input("Press ENTER to continue")
                os.system('cls')
            if areamap[PlayerLocation][ITEM_EXIST] is False :
                print(
                    "You do not see anything of significance in " + areamap[myPlayer.location][ZONENAME] + '.\n')
                time.sleep(1.0)
            if areamap[PlayerLocation][LOCKED_CHEST] is True:
                Locked_chest()




            if areamap[PlayerLocation][NPC_EXIST] is False:
                print(
                    "You do not see anyone in " + areamap[myPlayer.location][ZONENAME] + '.\n')
                time.sleep(1.0)
            if areamap[PlayerLocation][SOLVED] is True:
                os.system('cls')
                Game_puzzle.puzzle1()
                Game_puzzle.puzzle2()
                Game_puzzle.puzzle3()

    ####End Interaction####
    #### Begin Inspection of objects#####
    elif action.lower() in within.inspection:
        PlayerLocation = ''.join(myPlayer.location)
        if areamap[PlayerLocation][OBJECT] is True:
            print_medeum('You see  '+ areamap[PlayerLocation][ITEM]+'.')
            print('')
        else:
            print_medeum(
                "You do not see anything of significance in " + areamap[myPlayer.location][ZONENAME] + '.\n')
            input("Press ENTER to continue")
            os.system('cls')
    #### End Of Inspection ####
    #### Other Commands ####
    elif action.lower() in within.inventory:
        Show_Inventory()

    elif action.lower() in within.wallet:
        print(my_wallet.balance)
    elif action.lower() in ['shop', 'store', 'market']:
        if myPlayer.location == 'CityOfAden21':
            Puzzle_Shop()

        else:
            print_medeum("Need to go to the shop to buy things\n")
            os.system('cls')
    #### End of Other Commands ####

    while myPlayer.hp != 0:
        missions_toggle()
        Current_mission()

        assign_saves()
        os.system('cls')
        Weather_counter_step()
        Night_time()
        Day_time()
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        Print_map()
        Health()
        Mana_pool()

        print("┌──────────────────────────────────────────────────────────┐")
        print('│' + myPlayer.name + "'s Level: " + str(
            myPlayer.level) + '                                               ')
        print('│' + areamap[myPlayer.location][ZONENAME] + '                                                  ')
        print('│' + areamap[myPlayer.location][DESCRIPTION] + '')
        print("└──────────────────────────────────────────────────────────┘")

        Weather_counter_step()
        Weather_printer()
        if weather_behavior.day == True:
            print("┌───────────┐")
            print(" Time: day")
            print('└───────────┘')
        elif weather_behavior.night == True:
            print("┌───────────┐")
            print(" Time: Night")
            print('└───────────┘')
        action = input("><> ")
        #######################Quit START######################
        if action.lower() in within.quit:
            print_slow('Are you sure you want to quit?\n')
            YesorNo = input("Yes or no?: ")
            if YesorNo in within.accept:
                os.system('cls')
                title_screen()
            else:
                os.system('cls')
        #######################Quit END######################
        elif action.lower() == 'craft':
            Crafting_Table()
        elif action.lower() == 'open':
            Crate_location()
        elif action.lower() == 'alchemy':
            Alchemy_Table()
        elif action.lower() == 'kitchen':
            Kitchen_function()
        #######################Player base storage Start ##################
        elif action.lower() in within.store:
            Player_deposit()

        #######################Player Base storage end ###################
        ##########################Player Checkpoint Inn###################
        elif action.lower() in within.inn:
            CheckPoint.Healing_inn()
        ##########################Player Checkpoint Inn###################
            #######################Navigation END######################

        elif action in ['up', 'north', 'w']:
            if areamap[myPlayer.location][NORTH] is False:
                Boss_counter()
                mob_counter()
                destination = areamap[myPlayer.location][UP]
                movement_handler(destination)

                Status_effect_poisen()
                Can_spawn.trigger = True
            else:
                print_medeum('Door is locked...\n')
                input('Press ENTER to continue')
        elif action in ['down', 'south', 's']:
            if areamap[myPlayer.location][SOUTH] is False:
                Boss_counter()
                mob_counter()
                destination = areamap[myPlayer.location][DOWN]
                movement_handler(destination)

                Status_effect_poisen()
                Can_spawn.trigger = True
            else:
                print_medeum('Door is locked...\n')
                input('Press ENTER to continue')
        elif action in ['right', 'east', 'd']:
            if areamap[myPlayer.location][EAST] is False:
                Boss_counter()
                mob_counter()
                destination = areamap[myPlayer.location][RIGHT]
                movement_handler(destination)

                Status_effect_poisen()
                Can_spawn.trigger = True
            else:
                print_medeum('Door is locked...\n')
                input('Press ENTER to continue')

                Can_spawn.trigger = True
        elif action in ['left', 'west', 'a']:
            if areamap[myPlayer.location][WEST] is False:
                Boss_counter()
                mob_counter()
                destination = areamap[myPlayer.location][LEFT]
                movement_handler(destination)

                Status_effect_poisen()
                Can_spawn.trigger = True
            else:
                print_medeum('Door is locked...\n')
                input('Press ENTER to continue')
        #######################Navigation END######################
        #######################Services Start######################
        elif action.lower() == 'smith':
            if myPlayer.location == 'CityOfAden22':
                Smith_shop()
            else:
                print("Not in the smith")
        elif action.lower() in within.attribute:
            attribute_engine()
        elif action.lower() in within.save:
            if myPlayer.location in within.Heal_inn:
                save()
                save_dict_potion()
                save_dict_Ranged()
                save_dict_gear()
                save_dict_Spells()
                save_dict_Weapons()
                save_dict_Mission()
                save_dict_areamap()
            else:
                print('oops! Not in a INN!')
                input('Press ENTER to continue')
        elif action.lower() in within.stats:
            Player_stats()
        elif action.lower() in within.equip:
            Inventory_engine_2()
        elif action.lower() in within.potions:
            Items()
        elif action.lower() in within.options:
            options_menu()

        #######################Services END######################
        #####################Start Take Items################################
        elif action.lower() in within.aquire:
            PlayerLocation = ''.join(myPlayer.location)
            get = input('Take Item: ')
            if areamap[PlayerLocation][ITEM_EXIST] is True:

                if areamap[PlayerLocation][ITEM] not in myPlayer.inventory:

                    if get.lower() == areamap[PlayerLocation][ITEM]:
                        print_medeum('You take the ' + str(areamap[PlayerLocation][ITEM]) + '.\n')
                        input("Press ENTER to continue")
                        myPlayer.inventory.append(areamap[PlayerLocation][ITEM])
                        areamap[PlayerLocation][ITEM_EXIST] = False



                    else:
                        print('cannot pick up ' + get + '.')
                        input('Press ENTER to continue')
            else:
                print('Nothing to take here')
        #####################End Take Items##########################
        elif action.lower() == 'journal':
            Journal()
        # elif action.lower() in within.navigation:
        #     player_move(action.lower())
        elif action.lower() in within.help:
            help()
        ################### Interact with NPC #################
        elif action.lower() in within.talk:
            if myPlayer.location == 'CityOfAden23':
                print_medeum('You see Abigail Winchester here, do you want to speak with them?\n')
                talk = input('> ')
                if talk in within.accept:
                    Character.AbigailWinchester()

            elif myPlayer.location == 'CityOfAdenLower6':
                print_medeum('You see someone here, do you want to speak with them?')
                talk = input('> ')
                if talk in within.accept:
                    Character.ByStander2()
            elif myPlayer.location == 'CityOfAdenLower12':
                print_medeum('You see someone here, do you want to speak with them?')
                talk = input('> ')
                if talk in within.accept:
                    Character.ByStander3()
            elif myPlayer.location == 'CityOfAdenLower28':
                print_medeum('You see someone here, do you want to speak with them?')
                talk = input('> ')
                if talk in within.accept:
                    Character.ByStander4()
            elif myPlayer.location == 'CityOfAdenLower29':
                print_medeum('You see someone here, do you want to speak with them?')
                talk = input('> ')
                if talk in within.accept:
                    Character.ByStander5()
            elif myPlayer.location == 'CityOfAdenLower30':
                print_medeum('You see someone here, do you want to speak with them?')
                talk = input('> ')
                if talk in within.accept:
                    Character.ByStander6()
            elif myPlayer.location == 'CityOfAdenLower31':
                print_medeum('You see someone here, do you want to speak with them?')
                talk = input('> ')
                if talk in within.accept:
                    Character.ByStander7()
            elif myPlayer.location == 'Guest Research':
                print_medeum('You see Klaus Muller, do you want to speak with them?\n')
                talk = input('> ')
                if talk in within.accept:
                    Character.KlausMuller()
            elif myPlayer.location == 'Street':
                print_medeum('You see Anne Shephard here, do you want to speak with them?\n')
                talk = input('> ')
                if talk.lower() in within.accept:
                    Character.AnneShephard()



        ######Interaction in the environment#####
        elif action.lower() in within.look:
            Random_pet_encounter()
            PlayerLocation = ''.join(myPlayer.location)
            if PlayerLocation in areamap:
                if areamap[PlayerLocation][OBJECT] is True and areamap[PlayerLocation][ITEM_EXIST] is True:
                    print("Multiple objects are here\n")
                    input("Press ENTER to continue")
                if areamap[PlayerLocation][OBJECT] is True:
                    Crate_location()
                if areamap[PlayerLocation][ITEM_EXIST] is True:
                    os.system('cls')
                    print_medeum('You see  ' + str(areamap[PlayerLocation][ITEM]) + ' in this location.\n')
                    input("Press ENTER to continue")
                    os.system('cls')
                if areamap[PlayerLocation][NPC_EXIST] is True:
                    os.system('cls')
                    print_medeum('You see  ' + str(areamap[PlayerLocation][NPC_NAME]) + ' in this location.\n')
                    input("Press ENTER to continue")
                    os.system('cls')
                if areamap[PlayerLocation][ITEM_EXIST] is False:
                    print(
                        "You do not see anything of significance in " + areamap[myPlayer.location][
                            ZONENAME] + '.\n')
                    time.sleep(1.0)


                if areamap[PlayerLocation][NPC_EXIST] is False:
                    print(
                        "You do not see anyone in " + areamap[myPlayer.location][ZONENAME] + '.\n')
                    time.sleep(1.0)
                if areamap[PlayerLocation][LOCKED_CHEST] is True:
                    Locked_chest()

                if areamap[PlayerLocation][SOLVED] is True:
                    os.system('cls')
                    Game_puzzle.puzzle1()
                    Game_puzzle.puzzle2()
                    Game_puzzle.puzzle3()
        ####End Interaction####
        #### Begin Inspection of objects#####
        elif action.lower() in within.inspection:
            PlayerLocation = ''.join(myPlayer.location)
            if PlayerLocation in areamap:
                if areamap[PlayerLocation][SOLVED] is False:
                    print(areamap[PlayerLocation][ZONENAME] + ' doesnt seem to hold ny secrets')
                else:
                    print_medeum(
                        "You do not see anything of significance in " + areamap[myPlayer.location][ZONENAME] + '.\n')
                    input("Press ENTER to continue")
                    os.system('cls')
        #### End Of Inspection ####
        #### Other Commands ####
        elif action.lower() in within.inventory:
            Show_Inventory()

        elif action.lower() in within.wallet:
            print(my_wallet.balance)
        elif action.lower() in ['shop', 'store', 'market']:
            if myPlayer.location == 'CityOfAden21':
                Puzzle_Shop()
            else:
                print_medeum("Need to go to the shop to buy things\n")
                os.system('cls')
        #### End of Other Commands ####
    if myPlayer.hp <= 0:
        game_over()


def player_move(myAction):
    print("where would you like to move to?\n")
    print('UP, DOWN, LEFT, RIGHT\n')
    dest = input("> ")

    if dest in ['up', 'north', 'w']:
        destination = areamap[myPlayer.location][UP]
        movement_handler(destination)
        Status_effect_poisen()
    elif dest in ['down', 'south', 's']:
        destination = areamap[myPlayer.location][DOWN]
        movement_handler(destination)
        Status_effect_poisen()
    elif dest in ['right', 'east', 'd']:
        Status_effect_poisen()
        if myPlayer.location == 'Street' and myPlayer.key is True:
            os.system('cls')
            print_slow("You unlock the door and open it slowly to reveal...\n")
            input("Press ENTER to continue\n")
            destination = areamap[myPlayer.location][RIGHT]
            movement_handler(destination)
            os.system('cls')
            Credit()


        elif myPlayer.location == 'Space' and myPlayer.key is False:
            print_medeum("...")

            print_medeum("odd...The door is locked from the inside, I wonder where the key is?\n")
            input('Continue...')
            os.system('cls')
        else:
            destination = areamap[myPlayer.location][RIGHT]
            movement_handler(destination)
    elif dest in ['left', 'west', 'a']:
        Status_effect_poisen()
        destination = areamap[myPlayer.location][LEFT]
        movement_handler(destination)
    while dest != 'stop':
        ask = "where would you like to move to?\n"
        print('W, A, S, D or stop')
        dest = input(ask)

        if dest in ['up', 'north', 'w']:
            destination = areamap[myPlayer.location][UP]
            movement_handler(destination)
            Status_effect_poisen()
        elif dest in ['down', 'south', 's']:
            destination = areamap[myPlayer.location][DOWN]
            movement_handler(destination)
            Status_effect_poisen()
        elif dest in ['right', 'east', 'd']:
            Status_effect_poisen()
            if myPlayer.location == 'Street' and myPlayer.key is True:
                os.system('cls')
                print_slow("You unlock the door and open it slowly to reveal...\n")
                input("Press ENTER to continue\n")
                destination = areamap[myPlayer.location][RIGHT]
                movement_handler(destination)
                os.system('cls')
                Credit()


            elif myPlayer.location == 'Space' and myPlayer.key is False:
                print_slow("...")

                print_slow("odd...The door is locked from the inside, I wonder where the key is?\n")
                input('Continue...')
                os.system('cls')
            else:
                destination = areamap[myPlayer.location][RIGHT]
                movement_handler(destination)
        elif dest in ['left', 'west', 'a']:
            Status_effect_poisen()
            destination = areamap[myPlayer.location][LEFT]
            movement_handler(destination)


def movement_handler(destination):
    # print("\n" + " you have moved to the destination " + areamap[destination][ZONENAME] + ".")
    myPlayer.location = destination
    # print_location()


#### PUZZLES ####
def player_examine():
    if areamap[myPlayer.location][SOLVED]:
        print("you have already exhausted this zone")
    else:
        print("you can trigger puzzle here")


### Random function ###
class RandomNumber:
    def __init__(self):
        x = 1
        for value in range(x):
            self.Random = random.randint(1, 3)
            self.RandomUni = random.uniform(1, 3)


Rand = RandomNumber()


#### Ammunition for the Pistol ####
class Arrows:
    def __init__(self):
        self.arrow = 5

    def Add_arrow(self, amount):
        self.arrow += amount

    def Deplete_arrow(self, amount):
        self.arrow -= amount

    def Total_arrow(self, amount):
        return self.arrow >= amount


weapon_loaded = Arrows()


##############################
####combat miss random gen####
##############################
def RandomMiss():
    try:
        Miss = random.randint(myPlayer.luck, 20)
        return Miss
    except:
        return 20


# random level for mob
def random_level_generator():
    PlayerLocation = myPlayer.location
    high_number = areamap[PlayerLocation][MOB_DIFFICULTY] + 4
    low_number = areamap[PlayerLocation][MOB_DIFFICULTY] + 1
    Mob_level = random.randint(low_number, high_number)
    return Mob_level
### Boss Class ####

class Boss:
    type = "..."
    hp = -1
    maxhp = -1
    attack = -1
    def __init__(self):
        PlayerLocation = ''.join(myPlayer.location)
        self.type = ""
        self.maxhp = random_level_generator() + 1
        self.hp = int(self.maxhp * 2)
        self.attack = random.randint(areamap[PlayerLocation][MOB_DIFFICULTY],random_level_generator()) - armour_value.armour
        self.escape_chance = 2
        self.level = random_level_generator()
        self.ability = ""
    def Heal(self, amount):
        self.hp += amount

    def damage_mob(self, amount):
        self.hp -= amount

    def Health(self, amount):
        return self.hp >= amount
Boss_mob = Boss()


#### Mob Class ####

class BadGuy:
    type = "..."
    hp = -1
    maxhp = -1
    attack = -1

    def __init__(self):
        PlayerLocation = ''.join(myPlayer.location)






        if myPlayer.level <= 5:
            self.type = ""
            self.maxhp = random_level_generator() + 2
            self.hp = int(self.maxhp * 2)
            self.attack = random.randint(areamap[PlayerLocation][MOB_DIFFICULTY], random_level_generator()) - armour_value.armour
            self.escape_chance = 70
            self.level = random_level_generator()
            self.ability = ""
        elif myPlayer.level <= 10:
            self.type = ""
            self.maxhp = random_level_generator() + 4
            self.hp = int(self.maxhp * 2)
            self.attack = random.randint(areamap[PlayerLocation][MOB_DIFFICULTY], random_level_generator()) - armour_value.armour
            self.escape_chance = 70
            self.level = random_level_generator()
            self.ability = ""
        elif myPlayer.level <= 15:
            self.type = ""
            self.maxhp = random_level_generator() + 4
            self.hp = int(self.maxhp * 2)
            self.attack = random.randint(areamap[PlayerLocation][MOB_DIFFICULTY], random_level_generator()) - armour_value.armour
            self.escape_chance = 70
            self.level = random_level_generator()
            self.ability = ""
        elif myPlayer.level <= 20:
            self.type = ""
            self.maxhp = random_level_generator() + 4
            self.hp = int(self.maxhp * 2)
            self.attack = random.randint(areamap[PlayerLocation][MOB_DIFFICULTY], random_level_generator()) - armour_value.armour
            self.escape_chance = 70
            self.level = random_level_generator()
            self.ability = ""
        elif myPlayer.level <= 40:
            self.type = ""
            self.maxhp = random_level_generator() + 4
            self.hp = int(self.maxhp * 2)
            self.attack = random.randint(areamap[PlayerLocation][MOB_DIFFICULTY], random_level_generator()) - armour_value.armour
            self.escape_chance = 70
            self.level = random_level_generator()
            self.ability = ""
        elif myPlayer.level <= 60:
            self.type = ""
            self.maxhp = random_level_generator() + 4
            self.hp = int(self.maxhp * 2)
            self.attack = random.randint(areamap[PlayerLocation][MOB_DIFFICULTY], random_level_generator()) - armour_value.armour
            self.escape_chance = 70
            self.level = random_level_generator()
            self.ability = ""
        elif myPlayer.level <= 80:
            self.type = ""
            self.maxhp = random_level_generator() + 4
            self.hp = int(self.maxhp * 2)
            self.attack = random.randint(areamap[PlayerLocation][MOB_DIFFICULTY], random_level_generator()) - armour_value.armour
            self.escape_chance = 70
            self.level = random_level_generator()
            self.ability = ""
        elif myPlayer.level <= 100:
            self.type = ""
            self.maxhp = random_level_generator() + 4
            self.hp = int(self.maxhp * 2)
            self.attack = random.randint(areamap[PlayerLocation][MOB_DIFFICULTY], random_level_generator()) - armour_value.armour
            self.escape_chance = 70
            self.level = random_level_generator()
            self.ability = ""

    def Heal(self, amount):
        self.hp += amount

    def damage_mob(self, amount):
        self.hp -= amount

    def Health(self, amount):
        return self.hp >= amount


Mob = BadGuy()


def game_over():
    print('You have died!')
    Status_effectTF.Poisen = False
    input("Press ENTER to continue")
    myPlayer.hp = myPlayer.max_hp / 2
    myPlayer.location = 'BedRoom_House6'
    prompt()
def Boss_random_attack():
    High_attack = Boss_mob.attack
    Low_attack = Boss_mob.attack - 5
    Boss_attack = random.randint(Low_attack,High_attack)
    return Boss_attack


def Mob_random_attack():
    Mob_attack = random.randint(6,15)
    return Mob_attack

def Boss_refresh():

    if myPlayer.location == 'dungeon_boss_room21':
        Boss_mob.type = "Faceless Entity"
        Boss_mob.maxhp = 50
        Boss_mob.hp = int(Boss_mob.maxhp * 2)
        Boss_mob.attack = 15 - armour_value.armour
        Boss_mob.level = 25
    if myPlayer.location == 'dungeon_bottom_right_tunnel_miniboss7':
        Boss_mob.type ='Unemployment'
        Boss_mob.maxhp = 70
        Boss_mob.hp = int(Boss_mob.maxhp * 2)
        Boss_mob.attack = 15 - armour_value.armour
        Boss_mob.level = 25


def Mob_refresh():
    random_level_generator()
    if myPlayer.level <= 5:
        ######### LOWER THAN LEVEL 5
        list = ['1', '2', '3', '4', '5', ]
        random_mob = random.choice(list)
        if random_mob == '1':
            Mob.type = "Funnel Entity"
            Mob.maxhp = random_level_generator() + 2
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 2 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '2':
            Mob.type = "Wisp Entity"
            Mob.maxhp = random_level_generator() + 2
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 2 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '3':
            Mob.type = "Orb Entity"
            Mob.maxhp = random_level_generator() + 2
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 2 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '4':
            Mob.type = "Bauta Spirit"
            Mob.maxhp = random_level_generator() + 2
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 2 - armour_value.armour
            Mob.level = random_level_generator()
            Mob.ability = 'Paralyze'
        elif random_mob == '5':
            Mob.type = "Lost Spirit"
            Mob.maxhp = random_level_generator() + 2
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 2 - armour_value.armour
            Mob.level = random_level_generator()
            Mob.ability = 'Poisen'

    ##########LOWER THAN LEVEL 10
    if myPlayer.level <= 10:
        list = ['1', '2', '3', '4', '5', ]
        random_mob = random.choice(list)
        if random_mob == '1':
            Mob.type = "Funnel Entity"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '2':
            Mob.type = "Wisp Entity"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '3':
            Mob.type = "Orb Entity"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '4':
            Mob.type = "Bauta Spirit"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '5':
            Mob.type = "Lost Spirit"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()

    ############LOWER THAN LEVEL 15
    if myPlayer.level <= 15:
        list = ['1', '2', '3', '4', '5', ]
        random_mob = random.choice(list)
        if random_mob == '1':
            Mob.type = "Volto Wisp"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '2':
            Mob.type = "Volto Entity"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '3':
            Mob.type = "Pantalone Wraith"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '4':
            Mob.type = "Majora Banchee"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '5':
            Mob.type = "Haunted Spriggan"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
    if myPlayer.level <= 20:
        ########LOWER THAN LEVEL 20
        list = ['1', '2', '3', '4', '5', ]
        random_mob = random.choice(list)
        if random_mob == '1':
            Mob.type = "Dire banchee"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '2':
            Mob.type = "Arlecchino Wraith"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '3':
            Mob.type = "Dire Wolf"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '4':
            Mob.type = "Zanni Entity"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '5':
            Mob.type = "Kuchisake Entity"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
    if myPlayer.level <= 40:
        # LOWER THAN LEVEL 40
        list = ['1', '2', '3', '4', '5', ]
        random_mob = random.choice(list)
        if random_mob == '1':
            Mob.type = "Maori Wisp"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '2':
            Mob.type = "Persona Undead"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '3':
            Mob.type = "Ferocious Banchee"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '4':
            Mob.type = "Greater Spirit"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '5':
            Mob.type = ""
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
    if myPlayer.level <= 60:
        # LOWER THAN LEVEL 60
        list = ['1', '2', '3', '4', '5', ]
        random_mob = random.choice(list)

        if random_mob == '1':
            Mob.type = "Wisp"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '2':
            Mob.type = "Undead"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '3':
            Mob.type = "Dire Wolf"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '4':
            Mob.type = "Bear"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '5':
            Mob.type = "Spriggan"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
    if myPlayer.level <= 80:
        # LOWER THAN LEVEL 80
        list = ['1', '2', '3', '4', '5', ]
        random_mob = random.choice(list)
        if random_mob == '1':
            Mob.type = "Wisp"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '2':
            Mob.type = "Undead"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '3':
            Mob.type = "Dire Wolf"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '4':
            Mob.type = "Bear"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '5':
            Mob.type = "Spriggan"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
    if myPlayer.level <= 100:
        # LOWER THAN LEVEL 100
        list = ['1', '2', '3', '4', '5', ]
        random_mob = random.choice(list)
        if random_mob == '1':
            Mob.type = "Wisp"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '2':
            Mob.type = "Undead"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '3':
            Mob.type = "Dire Wolf"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '4':
            Mob.type = "Bear"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()
        elif random_mob == '5':
            Mob.type = "Spriggan"
            Mob.maxhp = random_level_generator() + 4
            Mob.hp = int(Mob.maxhp * 2)
            Mob.attack = random_level_generator() + 4 - armour_value.armour
            Mob.level = random_level_generator()


def XP_Formula():
    points = 0
    diff = int(myPlayer.level + 300 * math.pow(2, float(myPlayer.level) / 7))
    points += diff
    return points / 4

def level_up_scaling_companion():
    Pet_eq = ''.join(myPlayer.equipped_Pet)
    if len(myPlayer.equipped_Pet) != 0:
        os.system('cls')
        points = 0
        diff = int(Pet[Pet_eq][PLEVEL] + 300 * math.pow(2, float(Mob.level) / 7))
        points += diff
        Pet[Pet_eq][EXP]+=(int(points / 4))
        #print("you gained..." + str(int(points / 4)) + ' XP!\n')

def Boss_level_up_scaling_companion():
    Pet_eq = ''.join(myPlayer.equipped_Pet)
    if len(myPlayer.equipped_Pet) != 0:
        os.system('cls')
        points = 0
        diff = int(Pet[Pet_eq][PLEVEL] + 300 * math.pow(2, float(Boss_mob.level) / 7))
        points += diff
        Pet[Pet_eq][EXP]+=(int(points / 4))
        #print("you gained..." + str(int(points / 4)) + ' XP!\n')

def level_up_scaling():
    os.system('cls')
    points = 0
    diff = int(myPlayer.level + 300 * math.pow(2, float(Mob.level) / 7))
    points += diff
    myPlayer.XP_UP(int(points / 4))
    print("you gained..." + str(int(points / 4)) + ' XP!\n')
    Random_weapon_generator()


def Boss_level_up_scaling():
    os.system('cls')
    points = 0
    diff = int(myPlayer.level + 300 * math.pow(2, float(Boss_mob.level) / 7))
    points += diff
    myPlayer.XP_UP(int(points / 4))
    print("you gained..." + str(int(points / 4)) + ' XP!\n')
    Random_weapon_generator()


def Mission_complete_reward():
    os.system('cls')
    points = 0
    diff = int(myPlayer.level + 300 * math.pow(2, float(myPlayer.level) / 7))
    points += diff
    myPlayer.XP_UP(int(points / 4))
    print("you gained..." + str(int(points / 4)) + ' XP!\n')
    Random_weapon_generator()


################################
###Status effect on player #####
################################
class StatusEffect:
    def __init__(self):
        self.Poisen = False
        self.Paralyzed = False


Status_effectTF = StatusEffect()


# Random generator
def random_dice_roll():
    return random.randint(1, 50)


# Mob missing potential is a random chance 1-100 and the chances are lowered by the players agility
def Status_effect_chance():
    return random.randint(1, 100)


def Status_effect_poisen():
    if Status_effectTF.Poisen == True:
        if 'Poisened' not in myPlayer.status_effects:
            myPlayer.status_effects.append("Poisened")
        elif 'Poisened' in myPlayer.status_effects:
            myPlayer.hp -= 1
    elif Status_effectTF.Poisen == False:
        if "Poisened" in myPlayer.status_effects:
            myPlayer.status_effects.remove("Poisened")


def Status_effect_Paralyzed():
    if Status_effectTF.Paralyzed == True:
        paralyzed_chance = random.randint(1, 10)
        if random_dice_roll() < paralyzed_chance:
            print_medeum("you use your " + weapon_choice + " and do " + str(
                Weapons[weapon_choice][ATTACK] + myPlayer.attack) + " Damage!\n")
            Mob.damage_mob(Weapons[weapon_choice][ATTACK] + myPlayer.attack)
            print(Mob.type + " HP: " + str(Mob.hp) + ".")
        else:
            print_medeum('You are paralyzed!')


################################
####End status effect on player###
#################################
def Mob_attacking():
    Miss_chance = 1 + myPlayer.Agility
    if random_dice_roll() < Miss_chance:
        print_medeum(Mob.type + ' has missed!\n')
    elif random_dice_roll() > Miss_chance:
        if Mob.attack > 0:

            print_medeum("the " + Mob.type + " attacks with " + str(Mob.attack) + " Damage!\n")
            myPlayer.Damage_player(Mob.attack)
            Damage_gear()
            input("Press ENTER to continue\n")
            os.system('cls')
            if myPlayer.hp <= 0:
                game_over()
            elif Mob.ability == 'Poisen':
                poisen_chance = random.randint(1, 50)
                if poisen_chance < 10:
                    Status_effectTF.Poisen = True
            elif Mob.ability == 'Paralyze':
                paralyze_chance = random.randint(1, 50)
                if paralyze_chance < 10:
                    Status_effectTF.Poisen = True


        else:
            print_medeum(Mob.type+ " attack was ineffective!\n")
            Damage_gear()
            input("Press ENTER to continue")
def Boss_attacking():
    Boss_random_attack()
    Boss_attack = Boss_random_attack()

    Miss_chance = 1 + myPlayer.Agility
    if random_dice_roll() < Miss_chance:
        print_medeum(Boss_mob.type + ' has missed!\n')
    elif random_dice_roll() > Miss_chance:
        if Boss_mob.attack > 0:

            print_medeum("the " + Boss_mob.type + " attacks with " + str(Boss_attack) + " Damage!\n")
            myPlayer.Damage_player(Boss_attack)
            Damage_gear()
            input("Press ENTER to continue\n")
            os.system('cls')
            if myPlayer.hp <= 0:
                game_over()
            elif Boss_mob.ability == 'Poisen':
                poisen_chance = random.randint(1, 50)
                if poisen_chance < 10:
                    Status_effectTF.Poisen = True
            elif Boss_mob.ability == 'Paralyze':
                paralyze_chance = random.randint(1, 50)
                if paralyze_chance < 10:
                    Status_effectTF.Poisen = True


        else:
            print_medeum(Boss_mob.type+ " attack was ineffective!\n")
            Damage_gear()
            input("Press ENTER to continue")


def print_status_effect():
    if Status_effectTF.Poisen == True:
        print("Status: Poisend")
    elif Status_effectTF.Paralyzed == True:
        print("Status: Paralyzed")
    else:
        print("Status: Normal")
def Boss_Missed():

    if Boss_mob.attack > 0:
        print_medeum("the " + Boss_mob.type + " attacks with " + str(Boss_mob.attack) + " Damage!\n")
        myPlayer.Damage_player(Boss_mob.attack)
        input("Press ENTER to continue\n")
        os.system('cls')
        if myPlayer.hp < 0:
            game_over()
    else:
        print_medeum(Boss_mob.type+ " did 0 damage!\n")
        input("Press ENTER to continue")

def Missed():
    if Mob.attack > 0:
        print_medeum("the " + Mob.type + " attacks with " + str(Mob.attack) + " Damage!\n")
        myPlayer.Damage_player(Mob.attack)
        input("Press ENTER to continue\n")
        os.system('cls')
        if myPlayer.hp < 0:
            game_over()
    else:
        print_medeum(Mob.type+ " did 0 damage!\n")
        input("Press ENTER to continue")


def Player_stats():
    os.system('cls')
    print("┌───────────────────────────────┐")
    prRed("Health: " + str(myPlayer.hp) + '/' + str(myPlayer.max_hp) + '\n')
    prRed("Status: " + str(''.join(myPlayer.status_effects)))
    prRed("Class: " + str(myPlayer.job))
    print("└───────────────────────────────┘")
    print("┌───────────────────────────────┐")
    prBlue("Magic: " + str(myPlayer.mp) + '/' + str(myPlayer.max_mp) + '\n')
    prBlue('Magic Attack: ' + str(myPlayer.Magic_attack) + '\n')
    prBlue('Attack: ' + str(myPlayer.attack) + '\n')
    print("└───────────────────────────────┘")
    print("┌───────────────────────────────┐")
    prGreen("Arrows: " + str(weapon_loaded.arrow
                             ) + '\n')
    prGreen("Experience: " + str(myPlayer.xp) + '\n')
    print("└───────────────────────────────┘")
    prYellow("Gold: " + str(my_wallet.balance) + '\n')
    prPurple("Armour: " + str(armour_value.armour) + '\n')
    print("┌───────────────────────────────┐")
    prGreen("Inventory: \n" + ' <><> \n'.join(myPlayer.inventory) + '\n')
    print("└───────────────────────────────┘")
    print("Equipped: \n")
    print("┌───────────────────────────────┐")
    prPurple("Head Gear: " + str(myPlayer.equipped_Helmet) + '.')
    prPurple("Gauntlets: " + str(myPlayer.equipped_Gauntlet) + '.')
    prPurple("Chest plate: " + str(myPlayer.equipped_Armour) + '.')
    prPurple("Greaves: " + str(myPlayer.equipped_Greaves) + '.')
    prPurple("Shield: " + str(myPlayer.equipped_Shield) + '.')
    print("└───────────────────────────────┘")
    print("┌───────────────────────────────┐")
    print("Weapon: " + str(myPlayer.equipped_Weapon) + '.\n')
    print("Spells: " + str(myPlayer.equipped_spell) + '.\n')
    print("Ranged: " + str(myPlayer.equipped_Ranged) + '.\n')
    print("Pet: " + str(myPlayer.equipped_Pet) + '.\n')
    print("└───────────────────────────────┘")
    input("Press ENTER to continue")
    os.system('cls')


def Block_chance():
    block_high = Total_attribute_points.Strength + 1
    block_chance = random.randint(0, block_high)
    return block_chance


def Critical_hit_sword():
    critical_attack = random.randint(0, myPlayer.attack + 1)
    return critical_attack


def Critical_hit_Ranged():
    critical_attack = random.randint(0, myPlayer.Acrobatics + 1)
    return critical_attack


def Critical_hit_Spell():
    critical_attack = random.randint(0, myPlayer.Magic_attack + 1)
    return critical_attack


def Player_alive():
    if myPlayer.hp <= 0:
        game_over()


###############c3p0#######





class OrbCombat:
    ####################Combat######################################
    def Combat_engine(self):

        ###################################################### First LOOP ############################
        while Mob.hp > 0:
            random_level_generator()
            Player_alive()
            unequip_gear_low_health()
            Status_effect_poisen()
            Status_effect_Paralyzed()
            random_dice_roll()
            RandomMiss()
            Critical_hit_sword()
            quiver_arrow = ''.join(myPlayer.quiver)
            eq_arrow = ''.join(myPlayer.equipped_Arrow)
            os.system('cls')
            print(" ─────────────────────O")
            prGreen('│       Player         │')
            print("│" + myPlayer.name + "'s Health:" + str(myPlayer.hp) + "")
            print("│" + myPlayer.name + "'s Mana:" + str(myPlayer.mp) + "")
            print("│" + myPlayer.name + "'s Arrows:" + str(myPlayer.quiver.count(str(eq_arrow))) + "")
            print("└──────────────────────┤")
            print_status_effect()
            print("└──────────────────────┤")
            prRed('│       Opponent       │')
            print("│ Level: " + str(Mob.level))
            print("│ Name: " + Mob.type)
            print('│ HP: ' + str(Mob.hp))
            print("└──────────────────────┘")
            print("┌───────────────────────────────┐")
            print('│            Commands           │')
            print("│     Fight|Run|Items|equip     │")
            print("└───────────────────────────────┘")
            prompt = input("> ")
            if prompt.lower() in within.fight:
                print("Which weapon do you want to fight with?\n")
                print("┌──────┐")
                print('│Weapon:' + str(''.join(myPlayer.equipped_Weapon)))
                print("└──────┘")
                print("┌──────┐")
                print('│Ranged:' + str(''.join(myPlayer.equipped_Ranged)))
                print("└──────┘")
                print("┌──────┐")
                print('│Arrow:' + str(''.join(myPlayer.equipped_Arrow)))
                print("└──────┘")
                print("┌──────┐")
                print('│Spell :' + str(''.join(myPlayer.equipped_spell)))
                print("└──────┘")
                weapon_choice = input("> ")
                #################################### Sword/weapon loop ##########################################
                if weapon_choice in Weapons:
                    if weapon_choice in myPlayer.equipped_Weapon:
                        os.system('cls')
                        RandomMiss()
                        quiver_arrow = ''.join(myPlayer.quiver)
                        eq_arrow = ''.join(myPlayer.equipped_Arrow)
                        print("outside of while loop 2")
                        print("┌───────────────────────────────┐")
                        print('│            Commands           │')
                        print("│             change            │")
                        print("└───────────────────────────────┘")
                        print(" ─────────────────────O")
                        prGreen('│       Player         │')
                        print("│" + myPlayer.name + "'s Health:" + str(myPlayer.hp) + "")
                        print("│" + myPlayer.name + "'s Mana:" + str(myPlayer.mp) + "")
                        print("│" + myPlayer.name + "'s Arrows:" + str(myPlayer.quiver.count(str(eq_arrow))) + "")
                        print("└──────────────────────┤")
                        print_status_effect()
                        print("└──────────────────────┤")
                        prRed('│       Opponent       │')
                        print("│ Level: " + str(Mob.level))
                        print("│ Name: " + Mob.type)
                        print('│ HP: ' + str(Mob.hp))
                        print("└──────────────────────┘")

                        print("Select a type of attack\n")
                        print("┌──────┐")
                        print('│Thrust:')
                        print("└──────┘")
                        print("┌──────┐")
                        print('│Slash :')
                        print("└──────┘")
                        print("┌──────┐")
                        print('│Spiral Slash:')
                        print("└──────┘")
                        move_choice = input("> ")
                        if move_choice in within.Sword_attack:
                            if move_choice.lower() == 'thrust':
                                if RandomMiss() < 10:
                                    crit_dmg = Critical_hit_sword()
                                    print_medeum("you thrust your " + weapon_choice + " forward and do " + str(
                                        Weapons[weapon_choice][
                                            ATTACK] + myPlayer.attack + crit_dmg) + " damage!\n")
                                    print_medeum(' you do a extra ' + str(crit_dmg) + ' damage!')
                                    Damage_weapon()

                                    Mob.damage_mob(
                                        Weapons[weapon_choice][ATTACK] + myPlayer.attack + crit_dmg)

                                    print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                    if Mob.hp > 0:
                                        if Mob.attack > 0:
                                            Mob_attacking()

                                        else:
                                            print_medeum(Mob.type+ " did 0 damage!\n")
                                            input('Press ENTER')
                                    else:
                                        print_medeum('The' + Mob.type + ' has been defeated!\n')
                                        winsound.PlaySound("C:\ victory.wav", winsound.SND_ASYNC)
                                        mob_defeated()
                                        break

                                else:
                                    print("you missed!")
                                    Missed()
                            elif move_choice.lower() == 'slash':
                                if RandomMiss() < 15:
                                    crit_dmg = Critical_hit_sword()
                                    print_medeum("you slash your " + weapon_choice + " and do " + str(
                                        Weapons[weapon_choice][ATTACK] + myPlayer.attack + crit_dmg) + " damage!\n")
                                    Mob.damage_mob(
                                        Weapons[weapon_choice][ATTACK] + myPlayer.attack + crit_dmg)
                                    print(' you do a extra ' + str(crit_dmg) + ' damage!')
                                    print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                    Damage_weapon()
                                    if Mob.hp > 0:
                                        if Mob.attack > 0:
                                            Mob_attacking()
                                        else:
                                            print_medeum(Mob.type+ " did 0 damage!\n")
                                            input('Press ENTER')
                                    else:
                                        print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                        winsound.PlaySound("C:\ victory.wav", winsound.SND_ASYNC)
                                        mob_defeated()
                                        break

                                else:
                                    print("you missed!")
                                    Missed()
                            elif move_choice.lower() == 'spiral slash':
                                if RandomMiss() < 8:
                                    crit_dmg = Critical_hit_sword() +3
                                    print_medeum("you spin and slash your " + weapon_choice + " and do " + str(
                                        Weapons[weapon_choice][
                                            ATTACK] + myPlayer.attack + crit_dmg) + " damage!\n")
                                    print(' you do a extra ' + str(crit_dmg) + ' damage!')
                                    Mob.damage_mob(Weapons[weapon_choice][ATTACK] + myPlayer.attack+crit_dmg)
                                    print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                    Damage_weapon()
                                    if Mob.hp > 0:
                                        if Mob.attack > 0:
                                            Mob_attacking()
                                        else:
                                            print_medeum(Mob.type+ " did 0 damage!\n")
                                            input('Press ENTER')
                                    else:
                                        print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                        winsound.PlaySound("C:\ victory.wav", winsound.SND_ASYNC)
                                        mob_defeated()
                                        break

                                else:
                                    print("you missed!")
                                    Missed()



                            while move_choice.lower() != 'change' and Mob.hp > 0:
                                Player_alive()
                                unequip_gear_low_health()
                                os.system('cls')
                                RandomMiss()
                                quiver_arrow = ''.join(myPlayer.quiver)
                                eq_arrow = ''.join(myPlayer.equipped_Arrow)
                                print("outside of while loop 2")
                                print("┌───────────────────────────────┐")
                                print('│            Commands           │')
                                print("│             change            │")
                                print("└───────────────────────────────┘")
                                print(" ─────────────────────O")
                                prGreen('│       Player         │')
                                print("│" + myPlayer.name + "'s Health:" + str(myPlayer.hp) + "")
                                print("│" + myPlayer.name + "'s Mana:" + str(myPlayer.mp) + "")
                                print("│" + myPlayer.name + "'s Arrows:" + str(myPlayer.quiver.count(str(eq_arrow))) + "")
                                print("└──────────────────────┤")
                                print_status_effect()
                                print("└──────────────────────┤")
                                prRed('│       Opponent       │')
                                print("│ Level: " + str(Mob.level))
                                print("│ Name: " + Mob.type)
                                print('│ HP: ' + str(Mob.hp))
                                print("└──────────────────────┘")

                                print("Select a type of attack\n")
                                print("┌──────┐")
                                print('│Thrust:')
                                print("└──────┘")
                                print("┌──────┐")
                                print('│Slash :')
                                print("└──────┘")
                                print("┌──────┐")
                                print('│Spiral Slash:')
                                print("└──────┘")
                                move_choice = input("> ")
                                if move_choice in within.Sword_attack:
                                    if move_choice.lower() == 'thrust':
                                        if RandomMiss() < 10:
                                            crit_dmg = Critical_hit_sword()
                                            print_medeum("you thrust your " + weapon_choice + " forward and do " + str(
                                                Weapons[weapon_choice][
                                                    ATTACK] + myPlayer.attack + crit_dmg) + " damage!\n")
                                            print_medeum(' you do a extra ' + str(crit_dmg) + ' damage!')
                                            Damage_weapon()

                                            Mob.damage_mob(
                                                Weapons[weapon_choice][ATTACK] + myPlayer.attack + crit_dmg)

                                            print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                            if Mob.hp > 0:
                                                if Mob.attack > 0:
                                                    Mob_attacking()
                                                else:
                                                    print_medeum(Mob.type + " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\ victory.wav", winsound.SND_ASYNC)
                                                mob_defeated()
                                                break

                                        else:
                                            print("you missed!")
                                            Missed()
                                    elif move_choice.lower() == 'slash':
                                        if RandomMiss() < 15:
                                            crit_dmg = Critical_hit_sword()
                                            print_medeum("you slash your " + weapon_choice + " and do " + str(
                                                Weapons[weapon_choice][
                                                    ATTACK] + myPlayer.attack + crit_dmg) + " damage!\n")
                                            Mob.damage_mob(
                                                Weapons[weapon_choice][ATTACK] + myPlayer.attack + crit_dmg)
                                            print(' you do a extra ' + str(crit_dmg) + ' damage!')
                                            print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                            Damage_weapon()
                                            if Mob.hp > 0:
                                                if Mob.attack > 0:
                                                    Mob_attacking()
                                                else:
                                                    print_medeum(Mob.type + " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\ victory.wav", winsound.SND_ASYNC)
                                                mob_defeated()
                                                break

                                        else:
                                            print("you missed!")
                                            Missed()
                                    elif move_choice.lower() == 'spiral slash':
                                        if RandomMiss() < 8:
                                            crit_dmg = Critical_hit_sword()+3
                                            print_medeum("you spin and slash your " + weapon_choice + " and do " + str(
                                                Weapons[weapon_choice][
                                                    ATTACK] + myPlayer.attack + crit_dmg) + " damage!\n")
                                            print(' you do a extra ' + str(crit_dmg) + ' damage!')
                                            Mob.damage_mob(Weapons[weapon_choice][ATTACK] + myPlayer.attack + crit_dmg)
                                            print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                            Damage_weapon()
                                            if Mob.hp > 0:
                                                if Mob.attack > 0:
                                                    Mob_attacking()
                                                else:
                                                    print_medeum(Mob.type + " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\ victory.wav", winsound.SND_ASYNC)
                                                mob_defeated()
                                                break

                                        else:
                                            print("you missed!")
                                            Missed()

                                else:
                                    print("that is not a valid move choice!")

                #################################### RANGED loop ##########################################
                elif weapon_choice in Ranged:
                    unequip_gear_low_health()
                    RandomMiss()
                    Critical_hit_Ranged()
                    os.system('cls')
                    quiver_arrow = ''.join(myPlayer.quiver)
                    eq_arrow = ''.join(myPlayer.equipped_Arrow)
                    print("┌───────────────────────────────┐")
                    print('│            Commands           │')
                    print("│             change            │")
                    print("└───────────────────────────────┘")
                    print(" ─────────────────────O")
                    prGreen('│       Player         │')
                    print("│" + myPlayer.name + "'s Health:" + str(myPlayer.hp) + "")
                    print("│" + myPlayer.name + "'s Mana:" + str(myPlayer.mp) + "")
                    print("│" + myPlayer.name + "'s Arrows:" + str(myPlayer.quiver.count(str(eq_arrow))) + "")
                    print("└──────────────────────┤")
                    print_status_effect()
                    print("└──────────────────────┤")
                    prRed('│       Opponent       │')
                    print("│ Level: " + str(Mob.level))
                    print("│ Name: " + Mob.type)
                    print('│ HP: ' + str(Mob.hp))
                    print("└──────────────────────┘")

                    print("Select a type of attack\n")
                    print("┌──────┐")
                    print('│Single Shot:')
                    print("└──────┘")
                    print("┌──────┐")
                    print('│Triple Shot :')
                    print("└──────┘")
                    print("┌──────┐")
                    print('│Power Shot:')
                    print("└──────┘")
                    move_choice = input("> ")
                    if move_choice in within.Ranged_attack:
                        # FIRST ATTACK
                        if move_choice.lower() == 'single shot':
                            if myPlayer.quiver.count(eq_arrow) > 0:

                                myPlayer.quiver.remove(eq_arrow)
                                myPlayer.equipped_Arrow.remove(eq_arrow)
                                myPlayer.equipped_Arrow.append(eq_arrow)

                                if RandomMiss() < 15:
                                    crit_dmg = Critical_hit_Ranged()
                                    # player damages mob here
                                    print_medeum("you use your " + weapon_choice + " and do " + str(
                                        Ranged[weapon_choice][ATTACK] + myPlayer.Acrobatics + crit_dmg) + " Damage!\n")
                                    Mob.damage_mob(Ranged[weapon_choice][ATTACK] + myPlayer.Acrobatics + crit_dmg)
                                    weapon_loaded.Deplete_arrow(1)
                                    print(' you do a extra ' + str(crit_dmg) + ' damage!')
                                    print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                    if Mob.hp > 0:
                                        if Mob.attack > 0:
                                            #mob attack player here
                                            Mob_attacking()
                                        else:
                                            print_medeum(Mob.type+ " did 0 damage!\n")
                                            input('Press ENTER')
                                    else:
                                        print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                        mob_defeated()
                                        break
                                else:
                                    print("you missed!")
                                    weapon_loaded.Deplete_arrow(1)
                                    #hits you for missing here
                                    Missed()
                            elif myPlayer.quiver.count(eq_arrow) == 0 and myPlayer.equipped_Arrow.count(eq_arrow) > 0:
                                myPlayer.equipped_Arrow.remove(eq_arrow)
                                if RandomMiss() < 15:
                                    crit_dmg = Critical_hit_Ranged()
                                    # player damages mob here
                                    print_medeum("you use your " + weapon_choice + " and do " + str(
                                        Ranged[weapon_choice][ATTACK] + myPlayer.Acrobatics + crit_dmg) + " Damage!\n")
                                    Mob.damage_mob(Ranged[weapon_choice][ATTACK] + myPlayer.Acrobatics + crit_dmg)
                                    weapon_loaded.Deplete_arrow(1)
                                    print(' you do a extra ' + str(crit_dmg) + ' damage!')
                                    print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                    if Mob.hp > 0:
                                        if Mob.attack > 0:
                                            #mob attack player here
                                            Mob_attacking()
                                        else:
                                            print_medeum(Mob.type+ " did 0 damage!\n")
                                            input('Press ENTER')
                                    else:
                                        print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                        mob_defeated()
                                        break
                                else:
                                    print("you missed!")
                                    weapon_loaded.Deplete_arrow(1)
                                    #hits you for missing here
                                    Missed()
                            else:
                                print("out of arrows!")
                        # SECOND ATTACK
                        elif move_choice.lower() == 'triple shot':
                            if myPlayer.quiver.count(eq_arrow) >= 3:
                                myPlayer.quiver.remove(eq_arrow)
                                myPlayer.quiver.remove(eq_arrow)
                                myPlayer.quiver.remove(eq_arrow)

                                tripple_shot_chance = random.randint(1, 100)
                                if tripple_shot_chance == 3:
                                    print_medeum(
                                        "you use your " + weapon_choice + " and fire three shots and do " + str(
                                            Ranged[weapon_choice][
                                                ATTACK] * 3 + myPlayer.Acrobatics) + " Damage!\n")
                                    Mob.damage_mob(Ranged[weapon_choice][ATTACK] * 3 + myPlayer.Acrobatics)

                                    print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                    if Mob.hp > 0:
                                        if Mob.attack > 0:
                                            Mob_attacking()
                                        else:
                                            print_medeum(Mob.type+ " did 0 damage!\n")
                                            input('Press ENTER')
                                    else:
                                        print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                        mob_defeated()
                                        break
                                elif tripple_shot_chance >= 50:
                                    print_medeum(
                                        "you use your " + weapon_choice + " and fire three shots and two land doing " + str(
                                            Ranged[weapon_choice][
                                                ATTACK] * 2 + myPlayer.Acrobatics) + " Damage!\n")
                                    Mob.damage_mob(Ranged[weapon_choice][ATTACK] * 2 + myPlayer.Acrobatics)

                                    print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                    if Mob.hp > 0:
                                        if Mob.attack > 0:
                                            Mob_attacking()
                                        else:
                                            print_medeum(Mob.type+ " did 0 damage!\n")
                                            input('Press ENTER')
                                    else:
                                        print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                        mob_defeated()
                                        break
                                elif tripple_shot_chance >= 20:
                                    print_medeum(
                                        "you use your " + weapon_choice + " and fire three shots and one lands doing " + str(
                                            Ranged[weapon_choice][ATTACK] + myPlayer.Acrobatics) + " Damage!\n")
                                    Mob.damage_mob(Ranged[weapon_choice][ATTACK] + myPlayer.Acrobatics)

                                    print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                    if Mob.hp > 0:
                                        if Mob.attack > 0:
                                            Mob_attacking()
                                        else:
                                            print_medeum(Mob.type+ " did 0 damage!\n")
                                            input('Press ENTER')
                                    else:
                                        print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                        mob_defeated()
                                        break
                                else:
                                    print("you missed all three!")

                                    Missed()
                            else:
                                print("out of arrows!")
                        # THIRD ATTACK
                        elif move_choice.lower() == 'power shot':
                            if myPlayer.quiver.count(eq_arrow) > 0:
                                myPlayer.quiver.remove(eq_arrow)
                                myPlayer.equipped_Arrow.remove(eq_arrow)
                                myPlayer.equipped_Arrow.append(eq_arrow)
                                if RandomMiss() < 10:
                                    crit_dmg = Critical_hit_Ranged()
                                    print_medeum("you use your " + weapon_choice + " and do " + str(
                                        Ranged[weapon_choice][
                                            ATTACK] + myPlayer.Acrobatics + crit_dmg) + " Damage!\n")
                                    Mob.damage_mob(Ranged[weapon_choice][
                                                       ATTACK] + myPlayer.Acrobatics + crit_dmg)
                                    print(' you do a extra ' + str(crit_dmg) + ' damage!')

                                    print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                    if Mob.hp > 0:
                                        if Mob.attack > 0:
                                            Mob_attacking()
                                        else:
                                            print_medeum(Mob.type+ " did 0 damage!\n")
                                            input('Press ENTER')
                                    else:
                                        print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                        mob_defeated()
                                        break
                                else:
                                    print("you missed!")
                                    Missed()
                            elif myPlayer.quiver.count(eq_arrow) == 0 and myPlayer.equipped_Arrow.count(eq_arrow) > 0:
                                myPlayer.equipped_Arrow.remove(eq_arrow)
                                if RandomMiss() < 10:
                                    crit_dmg = Critical_hit_Ranged()
                                    print_medeum("you use your " + weapon_choice + " and do " + str(
                                        Ranged[weapon_choice][
                                            ATTACK] + myPlayer.Acrobatics + crit_dmg) + " Damage!\n")
                                    Mob.damage_mob(Ranged[weapon_choice][
                                                       ATTACK] + myPlayer.Acrobatics + crit_dmg)
                                    print(' you do a extra ' + str(crit_dmg) + ' damage!')

                                    print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                    if Mob.hp > 0:
                                        if Mob.attack > 0:
                                            Mob_attacking()
                                        else:
                                            print_medeum(Mob.type+ " did 0 damage!\n")
                                            input('Press ENTER')
                                    else:
                                        print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                        mob_defeated()
                                        break
                                else:
                                    print("you missed!")
                                    Missed()
                            else:
                                print("out of arrows!")



                        while move_choice.lower() != 'change' and Mob.hp > 0:
                            unequip_gear_low_health()
                            RandomMiss()
                            Critical_hit_Ranged()
                            os.system('cls')
                            quiver_arrow = ''.join(myPlayer.quiver)
                            eq_arrow = ''.join(myPlayer.equipped_Arrow)
                            print("┌───────────────────────────────┐")
                            print('│            Commands           │')
                            print("│             change            │")
                            print("└───────────────────────────────┘")
                            print(" ─────────────────────O")
                            prGreen('│       Player         │')
                            print("│" + myPlayer.name + "'s Health:" + str(myPlayer.hp) + "")
                            print("│" + myPlayer.name + "'s Mana:" + str(myPlayer.mp) + "")
                            print("│" + myPlayer.name + "'s Arrows:" + str(myPlayer.quiver.count(str(eq_arrow))) + "")
                            print("└──────────────────────┤")
                            print_status_effect()
                            print("└──────────────────────┤")
                            prRed('│       Opponent       │')
                            print("│ Level: " + str(Mob.level))
                            print("│ Name: " + Mob.type)
                            print('│ HP: ' + str(Mob.hp))
                            print("└──────────────────────┘")

                            print("Select a type of attack\n")
                            print("┌──────┐")
                            print('│Single Shot:')
                            print("└──────┘")
                            print("┌──────┐")
                            print('│Triple Shot :')
                            print("└──────┘")
                            print("┌──────┐")
                            print('│Power Shot:')
                            print("└──────┘")
                            move_choice = input("> ")
                            if move_choice in within.Ranged_attack:
                                # FIRST ATTACK
                                if move_choice.lower() == 'single shot':
                                    if myPlayer.quiver.count(eq_arrow) > 0:

                                        myPlayer.quiver.remove(eq_arrow)
                                        myPlayer.equipped_Arrow.remove(eq_arrow)
                                        myPlayer.equipped_Arrow.append(eq_arrow)

                                        if RandomMiss() < 15:
                                            crit_dmg = Critical_hit_Ranged()
                                            # player damages mob here
                                            print_medeum("you use your " + weapon_choice + " and do " + str(
                                                Ranged[weapon_choice][
                                                    ATTACK] + myPlayer.Acrobatics + crit_dmg) + " Damage!\n")
                                            Mob.damage_mob(
                                                Ranged[weapon_choice][ATTACK] + myPlayer.Acrobatics + crit_dmg)
                                            weapon_loaded.Deplete_arrow(1)
                                            print(' you do a extra ' + str(crit_dmg) + ' damage!')
                                            print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                            if Mob.hp > 0:
                                                if Mob.attack > 0:
                                                    # mob attack player here
                                                    Mob_attacking()
                                                else:
                                                    print_medeum(Mob.type + " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                mob_defeated()
                                                break
                                        else:
                                            print("you missed!")
                                            weapon_loaded.Deplete_arrow(1)
                                            # hits you for missing here
                                            Missed()
                                    elif myPlayer.quiver.count(eq_arrow) == 0 and myPlayer.equipped_Arrow.count(
                                            eq_arrow) > 0:
                                        myPlayer.equipped_Arrow.remove(eq_arrow)
                                        if RandomMiss() < 15:
                                            crit_dmg = Critical_hit_Ranged()
                                            # player damages mob here
                                            print_medeum("you use your " + weapon_choice + " and do " + str(
                                                Ranged[weapon_choice][
                                                    ATTACK] + myPlayer.Acrobatics + crit_dmg) + " Damage!\n")
                                            Mob.damage_mob(
                                                Ranged[weapon_choice][ATTACK] + myPlayer.Acrobatics + crit_dmg)
                                            weapon_loaded.Deplete_arrow(1)
                                            print(' you do a extra ' + str(crit_dmg) + ' damage!')
                                            print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                            if Mob.hp > 0:
                                                if Mob.attack > 0:
                                                    # mob attack player here
                                                    Mob_attacking()
                                                else:
                                                    print_medeum(Mob.type + " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                mob_defeated()
                                                break
                                        else:
                                            print("you missed!")
                                            weapon_loaded.Deplete_arrow(1)
                                            # hits you for missing here
                                            Missed()
                                    else:
                                        print("out of arrows!")
                                # SECOND ATTACK
                                elif move_choice.lower() == 'triple shot':
                                    if myPlayer.quiver.count(eq_arrow) >= 3:
                                        myPlayer.quiver.remove(eq_arrow)
                                        myPlayer.quiver.remove(eq_arrow)
                                        myPlayer.quiver.remove(eq_arrow)

                                        tripple_shot_chance = random.randint(1, 100)
                                        if tripple_shot_chance == 3:
                                            print_medeum(
                                                "you use your " + weapon_choice + " and fire three shots and do " + str(
                                                    Ranged[weapon_choice][
                                                        ATTACK] * 3 + myPlayer.Acrobatics) + " Damage!\n")
                                            Mob.damage_mob(Ranged[weapon_choice][ATTACK] * 3 + myPlayer.Acrobatics)

                                            print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                            if Mob.hp > 0:
                                                if Mob.attack > 0:
                                                    Mob_attacking()
                                                else:
                                                    print_medeum(Mob.type + " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                mob_defeated()
                                                break
                                        elif tripple_shot_chance >= 50:
                                            print_medeum(
                                                "you use your " + weapon_choice + " and fire three shots and two land doing " + str(
                                                    Ranged[weapon_choice][
                                                        ATTACK] * 2 + myPlayer.Acrobatics) + " Damage!\n")
                                            Mob.damage_mob(Ranged[weapon_choice][ATTACK] * 2 + myPlayer.Acrobatics)

                                            print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                            if Mob.hp > 0:
                                                if Mob.attack > 0:
                                                    Mob_attacking()
                                                else:
                                                    print_medeum(Mob.type + " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                mob_defeated()
                                                break
                                        elif tripple_shot_chance >= 20:
                                            print_medeum(
                                                "you use your " + weapon_choice + " and fire three shots and one lands doing " + str(
                                                    Ranged[weapon_choice][ATTACK] + myPlayer.Acrobatics) + " Damage!\n")
                                            Mob.damage_mob(Ranged[weapon_choice][ATTACK] + myPlayer.Acrobatics)

                                            print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                            if Mob.hp > 0:
                                                if Mob.attack > 0:
                                                    Mob_attacking()
                                                else:
                                                    print_medeum(Mob.type + " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                mob_defeated()
                                                break
                                        else:
                                            print("you missed all three!")

                                            Missed()
                                    else:
                                        print("out of arrows!")
                                # THIRD ATTACK
                                elif move_choice.lower() == 'power shot':
                                    if myPlayer.quiver.count(eq_arrow) > 0:
                                        myPlayer.quiver.remove(eq_arrow)
                                        myPlayer.equipped_Arrow.remove(eq_arrow)
                                        myPlayer.equipped_Arrow.append(eq_arrow)
                                        if RandomMiss() < 10:
                                            crit_dmg = Critical_hit_Ranged()
                                            print_medeum("you use your " + weapon_choice + " and do " + str(
                                                Ranged[weapon_choice][
                                                    ATTACK] + myPlayer.Acrobatics + crit_dmg) + " Damage!\n")
                                            Mob.damage_mob(Ranged[weapon_choice][
                                                               ATTACK] + myPlayer.Acrobatics + crit_dmg)
                                            print(' you do a extra ' + str(crit_dmg) + ' damage!')

                                            print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                            if Mob.hp > 0:
                                                if Mob.attack > 0:
                                                    Mob_attacking()
                                                else:
                                                    print_medeum(Mob.type + " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                mob_defeated()
                                                break
                                        else:
                                            print("you missed!")
                                            Missed()
                                    elif myPlayer.quiver.count(eq_arrow) == 0 and myPlayer.equipped_Arrow.count(
                                            eq_arrow) > 0:
                                        myPlayer.equipped_Arrow.remove(eq_arrow)
                                        if RandomMiss() < 10:
                                            crit_dmg = Critical_hit_Ranged()
                                            print_medeum("you use your " + weapon_choice + " and do " + str(
                                                Ranged[weapon_choice][
                                                    ATTACK] + myPlayer.Acrobatics + crit_dmg) + " Damage!\n")
                                            Mob.damage_mob(Ranged[weapon_choice][
                                                               ATTACK] + myPlayer.Acrobatics + crit_dmg)
                                            print(' you do a extra ' + str(crit_dmg) + ' damage!')

                                            print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                            if Mob.hp > 0:
                                                if Mob.attack > 0:
                                                    Mob_attacking()
                                                else:
                                                    print_medeum(Mob.type + " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                mob_defeated()
                                                break
                                        else:
                                            print("you missed!")
                                            Missed()
                                    else:
                                        print("out of arrows!")

                            else:
                                print("That is not a valid move choice!")
                #################################### Spells loop ##########################################
                elif weapon_choice in Spells:
                    if weapon_choice in myPlayer.equipped_spell:
                        RandomMiss()
                        Critical_hit_Spell()
                        os.system('cls')
                        RandomMiss()
                        quiver_arrow = ''.join(myPlayer.quiver)
                        eq_arrow = ''.join(myPlayer.equipped_Arrow)


                        print("┌───────────────────────────────┐")
                        print('│            Commands           │')
                        print("│             change            │")
                        print("└───────────────────────────────┘")
                        print(" ─────────────────────O")
                        prGreen('│       Player         │')
                        print("│" + myPlayer.name + "'s Health:" + str(myPlayer.hp) + "")
                        print("│" + myPlayer.name + "'s Mana:" + str(myPlayer.mp) + "")
                        print("│" + myPlayer.name + "'s Arrows:" + str(myPlayer.quiver.count(str(eq_arrow))) + "")
                        print("└──────────────────────┤")
                        print_status_effect()
                        print("└──────────────────────┤")
                        prRed('│       Opponent       │')
                        print("│ Level: " + str(Mob.level))
                        print("│ Name: " + Mob.type)
                        print('│ HP: ' + str(Mob.hp))
                        print("└──────────────────────┘")

                        print("Select a type of attack\n")
                        print("┌──────┐")
                        print('│Single cast:')
                        print("└──────┘")
                        print("┌──────┐")
                        print('│Barrage cast :')
                        print("└──────┘")
                        print("┌──────┐")
                        print('│Charge cast:')
                        print("└──────┘")
                        move_choice = input("> ")
                        if move_choice in within.Spell_attack:
                            if move_choice.lower() == 'single cast':
                                if RandomMiss() < 15:
                                    if myPlayer.mp > 0:
                                        print_medeum("you single cast " + weapon_choice + " and do " + str(
                                            Spells[weapon_choice][ATTACK] + myPlayer.Magic_attack) + " Damage!\n")
                                        Mob.damage_mob(Spells[weapon_choice][ATTACK] + myPlayer.Magic_attack)
                                        myPlayer.Reduce_mp(1)
                                        print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                        if Mob.hp > 0:
                                            if Mob.attack > 0:
                                                Mob_attacking()
                                            else:
                                                print_medeum(Mob.type+ " did 0 damage!\n")
                                                input('Press ENTER')
                                        else:
                                            print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                            winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                            mob_defeated()
                                            break
                                    else:
                                        print_medeum("You are out of Mana!")

                                else:
                                    print("you missed!")
                                    Missed()
                            #####################Barrage cast Start##############################
                            elif move_choice.lower() == 'barrage cast':
                                if myPlayer.mp >= 3:
                                    if RandomMiss() < 8:
                                        tripple_shot_chance = random.randint(1, 100)
                                        if tripple_shot_chance >= 90:
                                            print_medeum(
                                                "you cast " + weapon_choice + " and launch three shots and do " + str(
                                                    Spells[weapon_choice][
                                                        ATTACK] * 3 + myPlayer.Magic_attack) + " Damage!\n")
                                            Mob.damage_mob(
                                                Spells[weapon_choice][ATTACK] * 3 + myPlayer.Magic_attack)
                                            myPlayer.Reduce_mp(3)
                                            print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                            if Mob.hp > 0:
                                                if Mob.attack > 0:
                                                    Mob_attacking()
                                                else:
                                                    print_medeum(Mob.type+ " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                mob_defeated()
                                                break
                                        ##########second attack
                                        elif tripple_shot_chance >= 50:
                                            print_medeum(
                                                "you cast " + weapon_choice + " and launch three shots and 2 land " + str(
                                                    Spells[weapon_choice][
                                                        ATTACK] * 2 + myPlayer.Magic_attack) + " Damage!\n")
                                            Mob.damage_mob(
                                                Spells[weapon_choice][ATTACK] * 2 + myPlayer.Magic_attack)
                                            myPlayer.Reduce_mp(3)
                                            print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                            if Mob.hp > 0:
                                                if Mob.attack > 0:
                                                    Mob_attacking()
                                                else:
                                                    print_medeum(Mob.type+ " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                mob_defeated()
                                                break
                                        ##########third  attack
                                        elif tripple_shot_chance >= 20:
                                            print_medeum(
                                                "you cast " + weapon_choice + " and launch three shots and 1 lands " + str(
                                                    Spells[weapon_choice][
                                                        ATTACK] * 1 + myPlayer.Magic_attack) + " Damage!\n")
                                            Mob.damage_mob(
                                                Spells[weapon_choice][ATTACK] * 1 + myPlayer.Magic_attack)
                                            myPlayer.Reduce_mp(3)
                                            print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                            if Mob.hp > 0:
                                                if Mob.attack > 0:
                                                    Mob_attacking()
                                                else:
                                                    print_medeum(Mob.type+ " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                mob_defeated()
                                                break
                                    else:
                                        print("you missed!\n")
                                        myPlayer.Reduce_mp(3)
                                        Missed()
                                else:
                                    print("Not enough mana!\n")
                            ###############################################Barrage cast End##############################
                            elif move_choice.lower() == 'charge cast':
                                if RandomMiss() < 10:
                                    if myPlayer.mp > 0:
                                        critical_attack = random.randint(0, myPlayer.Magic_attack * 2)
                                        print_medeum("you over charge your " + weapon_choice + " and do " + str(
                                            Spells[weapon_choice][
                                                ATTACK] + myPlayer.Magic_attack + critical_attack) + " Damage!\n")
                                        Mob.damage_mob(
                                            Spells[weapon_choice][ATTACK] + myPlayer.Magic_attack + critical_attack)
                                        myPlayer.Reduce_mp(1)
                                        print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                    if Mob.hp > 0:
                                        if Mob.attack > 0:
                                            Mob_attacking()
                                        else:
                                            print_medeum(Mob.type+ " did 0 damage!\n")
                                            input('Press ENTER')
                                    else:
                                        print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                        mob_defeated()
                                        break
                                else:
                                    print("you missed!")
                                    myPlayer.Reduce_mp(1)
                                    Missed()


                            while move_choice.lower() != 'change' and Mob.hp > 0:

                                unequip_gear_low_health()
                                RandomMiss()
                                Critical_hit_Spell()
                                os.system('cls')
                                RandomMiss()
                                quiver_arrow = ''.join(myPlayer.quiver)
                                eq_arrow = ''.join(myPlayer.equipped_Arrow)
                                print("┌───────────────────────────────┐")
                                print('│            Commands           │')
                                print("│             change            │")
                                print("└───────────────────────────────┘")
                                print(" ─────────────────────O")
                                prGreen('│       Player         │')
                                print("│" + myPlayer.name + "'s Health:" + str(myPlayer.hp) + "")
                                print("│" + myPlayer.name + "'s Mana:" + str(myPlayer.mp) + "")
                                print("│" + myPlayer.name + "'s Arrows:" + str(myPlayer.quiver.count(str(eq_arrow))) + "")
                                print("└──────────────────────┤")
                                print_status_effect()
                                print("└──────────────────────┤")
                                prRed('│       Opponent       │')
                                print("│ Level: " + str(Mob.level))
                                print("│ Name: " + Mob.type)
                                print('│ HP: ' + str(Mob.hp))
                                print("└──────────────────────┘")

                                print("Select a type of attack\n")
                                print("┌──────┐")
                                print('│Single cast:')
                                print("└──────┘")
                                print("┌──────┐")
                                print('│Barrage cast :')
                                print("└──────┘")
                                print("┌──────┐")
                                print('│Charge cast:')
                                print("└──────┘")
                                move_choice = input("> ")
                                if move_choice in within.Spell_attack:
                                    if move_choice.lower() == 'single cast':
                                        if RandomMiss() < 15:
                                            if myPlayer.mp > 0:
                                                print_medeum("you single cast " + weapon_choice + " and do " + str(
                                                    Spells[weapon_choice][
                                                        ATTACK] + myPlayer.Magic_attack) + " Damage!\n")
                                                Mob.damage_mob(Spells[weapon_choice][ATTACK] + myPlayer.Magic_attack)
                                                myPlayer.Reduce_mp(1)
                                                print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                            if Mob.hp > 0:
                                                if Mob.attack > 0:
                                                    Mob_attacking()
                                                else:
                                                    print_medeum(Mob.type+ " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                mob_defeated()
                                                break
                                        else:
                                            print("you missed!")
                                            myPlayer.Reduce_mp(1)
                                            Missed()
                                    #####################Barrage cast Start##############################
                                    elif move_choice.lower() == 'barrage cast':
                                        if myPlayer.mp >= 3:
                                            if RandomMiss() < 8:
                                                tripple_shot_chance = random.randint(1, 100)
                                                if tripple_shot_chance >= 90:
                                                    print_medeum(
                                                        "you cast " + weapon_choice + " and launch three shots and do " + str(
                                                            Spells[weapon_choice][
                                                                ATTACK] * 3 + myPlayer.Magic_attack) + " Damage!\n")
                                                    Mob.damage_mob(
                                                        Spells[weapon_choice][ATTACK] * 3 + myPlayer.Magic_attack)
                                                    myPlayer.Reduce_mp(3)
                                                    print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                                    if Mob.hp > 0:
                                                        if Mob.attack > 0:
                                                            Mob_attacking()
                                                        else:
                                                            print_medeum(Mob.type+ " did 0 damage!\n")
                                                            input('Press ENTER')
                                                    else:
                                                        print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                                        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                        mob_defeated()
                                                        break
                                                ##########second attack
                                                elif tripple_shot_chance >= 50:
                                                    print_medeum(
                                                        "you cast " + weapon_choice + " and launch three shots and 2 land " + str(
                                                            Spells[weapon_choice][
                                                                ATTACK] * 2 + myPlayer.Magic_attack) + " Damage!\n")
                                                    Mob.damage_mob(
                                                        Spells[weapon_choice][ATTACK] * 2 + myPlayer.Magic_attack)
                                                    myPlayer.Reduce_mp(3)
                                                    print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                                    if Mob.hp > 0:
                                                        if Mob.attack > 0:
                                                            Mob_attacking()
                                                        else:
                                                            print_medeum(Mob.type+ " did 0 damage!\n")
                                                            input('Press ENTER')
                                                    else:
                                                        print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                                        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                        mob_defeated()
                                                        break
                                                ##########third  attack
                                                elif tripple_shot_chance >= 20:
                                                    print_medeum(
                                                        "you cast " + weapon_choice + " and launch three shots and 1 lands " + str(
                                                            Spells[weapon_choice][
                                                                ATTACK] * 1 + myPlayer.Magic_attack) + " Damage!\n")
                                                    Mob.damage_mob(
                                                        Spells[weapon_choice][ATTACK] * 1 + myPlayer.Magic_attack)
                                                    myPlayer.Reduce_mp(3)
                                                    print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                                    if Mob.hp > 0:
                                                        if Mob.attack > 0:
                                                            Mob_attacking()
                                                        else:
                                                            print_medeum(Mob.type+ " did 0 damage!\n")
                                                            input('Press ENTER')
                                                    else:
                                                        print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                                        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                        mob_defeated()
                                                        break
                                            else:
                                                print("you missed!\n")
                                                myPlayer.Reduce_mp(1)
                                                Missed()
                                        else:
                                            print("Not enough mana!\n")
                                    ###############################################Barrage cast End##############################
                                    elif move_choice.lower() == 'charge cast':
                                        if RandomMiss() < 10:
                                            if myPlayer.mp > 0:
                                                critical_attack = random.randint(0, myPlayer.Magic_attack * 2)
                                                print_medeum("you over charge your " + weapon_choice + " and do " + str(
                                                    Spells[weapon_choice][
                                                        ATTACK] + myPlayer.Magic_attack + critical_attack) + " Damage!\n")
                                                Mob.damage_mob(Spells[weapon_choice][
                                                                   ATTACK] + myPlayer.Magic_attack + critical_attack)
                                                myPlayer.Reduce_mp(1)
                                                print(Mob.type + " HP: " + str(Mob.hp) + ".")
                                            if Mob.hp > 0:
                                                if Mob.attack > 0:
                                                    Mob_attacking()
                                                else:
                                                    print_medeum(Mob.type+ " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum('The ' + Mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                mob_defeated()
                                                break
                                        else:
                                            print("you missed!")
                                            myPlayer.Reduce_mp(1)
                                            Missed()


                ####################################Battle Over second loop ##########################################
                else:
                    print_medeum("you dont have a " + weapon_choice + "!\n")
            elif prompt.lower() in within.potions:
                Items()
            elif prompt.lower() == "run":
                run_chance = random.randint(1, Mob.escape_chance)
                if run_chance > 20:
                    print_medeum("You got away!\n")
                    winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                    input('Press ENTER to continue')
                    os.system('cls')
                    main_game_loop()
                else:
                    print_medeum("You couldnt get away!\n")
                    Mob_attacking()
                    os.system('cls')
                    if myPlayer.hp <= 0:
                        game_over()
            elif prompt.lower() in within.equip:
                Inventory_engine_2()
        if Mob.hp <= 0:
            mob_defeated()
    def Boss_combat_engine(self):
        while Mob.hp > 0:
            Boss_random_attack()
            Player_alive()
            unequip_gear_low_health()
            Status_effect_poisen()
            Status_effect_Paralyzed()
            random_dice_roll()
            RandomMiss()
            Critical_hit_sword()
            quiver_arrow = ''.join(myPlayer.quiver)
            eq_arrow = ''.join(myPlayer.equipped_Arrow)
            os.system('cls')
            print(" ─────────────────────O")
            prGreen('│       Player         │')
            print("│" + myPlayer.name + "'s Health:" + str(myPlayer.hp) + "")
            print("│" + myPlayer.name + "'s Mana:" + str(myPlayer.mp) + "")
            print("│" + myPlayer.name + "'s Arrows:" + str(myPlayer.quiver.count(str(eq_arrow))) + "")
            print("└──────────────────────┤")
            print_status_effect()
            print("└──────────────────────┤")
            prRed('│       Opponent       │')
            print("│ Level: " + str(Boss_mob.level))
            print("│ Name: " + Boss_mob.type)
            print('│ HP: ' + str(Boss_mob.hp))
            print("└──────────────────────┘")
            print("┌───────────────────────────────┐")
            print('│            Commands           │')
            print("│     Fight|Run|Items|equip     │")
            print("└───────────────────────────────┘")
            prompt = input("> ")
            if prompt.lower() in within.fight:
                print("Which weapon do you want to fight with?\n")
                print("┌──────┐")
                print('│Weapon:' + str(''.join(myPlayer.equipped_Weapon)))
                print("└──────┘")
                print("┌──────┐")
                print('│Ranged:' + str(''.join(myPlayer.equipped_Ranged)))
                print("└──────┘")
                print("┌──────┐")
                print('│Arrow:' + str(''.join(myPlayer.equipped_Arrow)))
                print("└──────┘")
                print("┌──────┐")
                print('│Spell :' + str(''.join(myPlayer.equipped_spell)))
                print("└──────┘")
                weapon_choice = input("> ")
                #################################### Sword/weapon loop ##########################################
                if weapon_choice in Weapons:
                    if weapon_choice in myPlayer.equipped_Weapon:
                        os.system('cls')
                        RandomMiss()
                        quiver_arrow = ''.join(myPlayer.quiver)
                        eq_arrow = ''.join(myPlayer.equipped_Arrow)
                        print("outside of while loop 2")
                        print("┌───────────────────────────────┐")
                        print('│            Commands           │')
                        print("│             change            │")
                        print("└───────────────────────────────┘")
                        print(" ─────────────────────O")
                        prGreen('│       Player         │')
                        print("│" + myPlayer.name + "'s Health:" + str(myPlayer.hp) + "")
                        print("│" + myPlayer.name + "'s Mana:" + str(myPlayer.mp) + "")
                        print("│" + myPlayer.name + "'s Arrows:" + str(myPlayer.quiver.count(str(eq_arrow))) + "")
                        print("└──────────────────────┤")
                        print_status_effect()
                        print("└──────────────────────┤")
                        prRed('│       Opponent       │')
                        print("│ Level: " + str(Boss_mob.level))
                        print("│ Name: " + Boss_mob.type)
                        print('│ HP: ' + str(Boss_mob.hp))
                        print("└──────────────────────┘")

                        print("Select a type of attack\n")
                        print("┌──────┐")
                        print('│Thrust:')
                        print("└──────┘")
                        print("┌──────┐")
                        print('│Slash :')
                        print("└──────┘")
                        print("┌──────┐")
                        print('│Spiral Slash:')
                        print("└──────┘")
                        move_choice = input("> ")
                        if move_choice in within.Sword_attack:
                            if move_choice.lower() == 'thrust':
                                if RandomMiss() < 10:
                                    crit_dmg = Critical_hit_sword()
                                    print_medeum("you thrust your " + weapon_choice + " forward and do " + str(
                                        Weapons[weapon_choice][
                                            ATTACK] + myPlayer.attack + crit_dmg) + " damage!\n")
                                    print_medeum(' you do a extra ' + str(crit_dmg) + ' damage!')
                                    Damage_weapon()

                                    Boss_mob.damage_mob(
                                        Weapons[weapon_choice][ATTACK] + myPlayer.attack + crit_dmg)

                                    print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                    if Boss_mob.hp > 0:
                                        if Boss_mob.attack > 0:
                                            Boss_attacking()
                                        else:
                                            print_medeum(Boss_mob.type+ " did 0 damage!\n")
                                            input('Press ENTER')
                                    else:
                                        print_medeum(Boss_mob.type + ' has been defeated!\n')
                                        winsound.PlaySound("C:\ victory.wav", winsound.SND_ASYNC)
                                        Boss_defeated()
                                        break

                                else:
                                    print("you missed!")
                                    Boss_Missed()
                            elif move_choice.lower() == 'slash':
                                if RandomMiss() < 15:
                                    crit_dmg = Critical_hit_sword()
                                    print_medeum("you slash your " + weapon_choice + " and do " + str(
                                        Weapons[weapon_choice][ATTACK] + myPlayer.attack + crit_dmg) + " damage!\n")
                                    Boss_mob.damage_mob(
                                        Weapons[weapon_choice][ATTACK] + myPlayer.attack + crit_dmg)
                                    print(' you do a extra ' + str(crit_dmg) + ' damage!')
                                    print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                    Damage_weapon()
                                    if Boss_mob.hp > 0:
                                        if Boss_mob.attack > 0:
                                            Boss_attacking()
                                        else:
                                            print_medeum(Boss_mob.type+ " did 0 damage!\n")
                                            input('Press ENTER')
                                    else:
                                        print_medeum(Boss_mob.type + ' has been defeated!\n')
                                        winsound.PlaySound("C:\ victory.wav", winsound.SND_ASYNC)
                                        Boss_defeated()
                                        break

                                else:
                                    print("you missed!")
                                    Missed()
                            elif move_choice.lower() == 'spiral slash':
                                if RandomMiss() < 8:
                                    crit_dmg = Critical_hit_sword() +3
                                    print_medeum("you spin and slash your " + weapon_choice + " and do " + str(
                                        Weapons[weapon_choice][
                                            ATTACK] + myPlayer.attack + crit_dmg) + " damage!\n")
                                    print(' you do a extra ' + str(crit_dmg) + ' damage!')
                                    Boss_mob.damage_mob(Weapons[weapon_choice][ATTACK] + myPlayer.attack+crit_dmg)
                                    print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                    Damage_weapon()
                                    if Boss_mob.hp > 0:
                                        if Boss_mob.attack > 0:
                                            Boss_attacking()
                                        else:
                                            print_medeum(Boss_mob.type+ " did 0 damage!\n")
                                            input('Press ENTER')
                                    else:
                                        print_medeum(Boss_mob.type + ' has been defeated!\n')
                                        winsound.PlaySound("C:\ victory.wav", winsound.SND_ASYNC)
                                        Boss_defeated()
                                        break

                                else:
                                    print("you missed!")
                                    Boss_Missed()



                            while move_choice.lower() != 'change' and Boss_mob.hp > 0:
                                Player_alive()
                                unequip_gear_low_health()
                                os.system('cls')
                                RandomMiss()
                                quiver_arrow = ''.join(myPlayer.quiver)
                                eq_arrow = ''.join(myPlayer.equipped_Arrow)
                                print("outside of while loop 2")
                                print("┌───────────────────────────────┐")
                                print('│            Commands           │')
                                print("│             change            │")
                                print("└───────────────────────────────┘")
                                print(" ─────────────────────O")
                                prGreen('│       Player         │')
                                print("│" + myPlayer.name + "'s Health:" + str(myPlayer.hp) + "")
                                print("│" + myPlayer.name + "'s Mana:" + str(myPlayer.mp) + "")
                                print("│" + myPlayer.name + "'s Arrows:" + str(myPlayer.quiver.count(str(eq_arrow))) + "")
                                print("└──────────────────────┤")
                                print_status_effect()
                                print("└──────────────────────┤")
                                prRed('│       Opponent       │')
                                print("│ Level: " + str(Boss_mob.level))
                                print("│ Name: " + Boss_mob.type)
                                print('│ HP: ' + str(Boss_mob.hp))
                                print("└──────────────────────┘")

                                print("Select a type of attack\n")
                                print("┌──────┐")
                                print('│Thrust:')
                                print("└──────┘")
                                print("┌──────┐")
                                print('│Slash :')
                                print("└──────┘")
                                print("┌──────┐")
                                print('│Spiral Slash:')
                                print("└──────┘")
                                move_choice = input("> ")
                                if move_choice in within.Sword_attack:
                                    if move_choice.lower() == 'thrust':
                                        if RandomMiss() < 10:
                                            crit_dmg = Critical_hit_sword()
                                            print_medeum("you thrust your " + weapon_choice + " forward and do " + str(
                                                Weapons[weapon_choice][
                                                    ATTACK] + myPlayer.attack + crit_dmg) + " damage!\n")
                                            print_medeum(' you do a extra ' + str(crit_dmg) + ' damage!')
                                            Damage_weapon()

                                            Boss_mob.damage_mob(
                                                Weapons[weapon_choice][ATTACK] + myPlayer.attack + crit_dmg)

                                            print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                            if Boss_mob.hp > 0:
                                                if Boss_mob.attack > 0:
                                                    Boss_attacking()
                                                else:
                                                    print_medeum(Boss_mob.type + " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum(Boss_mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\ victory.wav", winsound.SND_ASYNC)
                                                Boss_defeated()
                                                break

                                        else:
                                            print("you missed!")
                                            Boss_Missed()
                                    elif move_choice.lower() == 'slash':
                                        if RandomMiss() < 15:
                                            crit_dmg = Critical_hit_sword()
                                            print_medeum("you slash your " + weapon_choice + " and do " + str(
                                                Weapons[weapon_choice][
                                                    ATTACK] + myPlayer.attack + crit_dmg) + " damage!\n")
                                            Boss_mob.damage_mob(
                                                Weapons[weapon_choice][ATTACK] + myPlayer.attack + crit_dmg)
                                            print(' you do a extra ' + str(crit_dmg) + ' damage!')
                                            print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                            Damage_weapon()
                                            if Boss_mob.hp > 0:
                                                if Boss_mob.attack > 0:
                                                    Boss_attacking()
                                                else:
                                                    print_medeum(Boss_mob.type + " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum(Boss_mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\ victory.wav", winsound.SND_ASYNC)
                                                Boss_defeated()
                                                break

                                        else:
                                            print("you missed!")
                                            Boss_Missed()
                                    elif move_choice.lower() == 'spiral slash':
                                        if RandomMiss() < 8:
                                            crit_dmg = Critical_hit_sword()+3
                                            print_medeum("you spin and slash your " + weapon_choice + " and do " + str(
                                                Weapons[weapon_choice][
                                                    ATTACK] + myPlayer.attack + crit_dmg) + " damage!\n")
                                            print(' you do a extra ' + str(crit_dmg) + ' damage!')
                                            Boss_mob.damage_mob(Weapons[weapon_choice][ATTACK] + myPlayer.attack + crit_dmg)
                                            print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                            Damage_weapon()
                                            if Boss_mob.hp > 0:
                                                if Boss_mob.attack > 0:
                                                    Boss_attacking()
                                                else:
                                                    print_medeum(Boss_mob.type + " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum(Boss_mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\ victory.wav", winsound.SND_ASYNC)
                                                Boss_defeated()
                                                break

                                        else:
                                            print("you missed!")
                                            Boss_Missed()

                                else:
                                    print("that is not a valid move choice!")

                #################################### RANGED loop ##########################################
                elif weapon_choice in Ranged:
                    unequip_gear_low_health()
                    RandomMiss()
                    Critical_hit_Ranged()
                    os.system('cls')
                    quiver_arrow = ''.join(myPlayer.quiver)
                    eq_arrow = ''.join(myPlayer.equipped_Arrow)
                    print("┌───────────────────────────────┐")
                    print('│            Commands           │')
                    print("│             change            │")
                    print("└───────────────────────────────┘")
                    print(" ─────────────────────O")
                    prGreen('│       Player         │')
                    print("│" + myPlayer.name + "'s Health:" + str(myPlayer.hp) + "")
                    print("│" + myPlayer.name + "'s Mana:" + str(myPlayer.mp) + "")
                    print("│" + myPlayer.name + "'s Arrows:" + str(myPlayer.quiver.count(str(eq_arrow))) + "")
                    print("└──────────────────────┤")
                    print_status_effect()
                    print("└──────────────────────┤")
                    prRed('│       Opponent       │')
                    print("│ Level: " + str(Boss_mob.level))
                    print("│ Name: " + Boss_mob.type)
                    print('│ HP: ' + str(Boss_mob.hp))
                    print("└──────────────────────┘")

                    print("Select a type of attack\n")
                    print("┌──────┐")
                    print('│Single Shot:')
                    print("└──────┘")
                    print("┌──────┐")
                    print('│Triple Shot :')
                    print("└──────┘")
                    print("┌──────┐")
                    print('│Power Shot:')
                    print("└──────┘")
                    move_choice = input("> ")
                    if move_choice in within.Ranged_attack:
                        # FIRST ATTACK
                        if move_choice.lower() == 'single shot':
                            if myPlayer.quiver.count(eq_arrow) > 0:

                                myPlayer.quiver.remove(eq_arrow)
                                myPlayer.equipped_Arrow.remove(eq_arrow)
                                myPlayer.equipped_Arrow.append(eq_arrow)

                                if RandomMiss() < 15:
                                    crit_dmg = Critical_hit_Ranged()
                                    # player damages mob here
                                    print_medeum("you use your " + weapon_choice + " and do " + str(
                                        Ranged[weapon_choice][ATTACK] + myPlayer.Acrobatics + crit_dmg) + " Damage!\n")
                                    Boss_mob.damage_mob(Ranged[weapon_choice][ATTACK] + myPlayer.Acrobatics + crit_dmg)
                                    weapon_loaded.Deplete_arrow(1)
                                    print(' you do a extra ' + str(crit_dmg) + ' damage!')
                                    print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                    if Boss_mob.hp > 0:
                                        if Boss_mob.attack > 0:
                                            #mob attack player here
                                            Boss_attacking()
                                        else:
                                            print_medeum(Boss_mob.type+ " did 0 damage!\n")
                                            input('Press ENTER')
                                    else:
                                        print_medeum(Boss_mob.type + ' has been defeated!\n')

                                        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                        Boss_defeated()
                                        break
                                else:
                                    print("you missed!")
                                    weapon_loaded.Deplete_arrow(1)
                                    #hits you for missing here
                                    Boss_Missed()
                            elif myPlayer.quiver.count(eq_arrow) == 0 and myPlayer.equipped_Arrow.count(eq_arrow) > 0:
                                myPlayer.equipped_Arrow.remove(eq_arrow)
                                if RandomMiss() < 15:
                                    crit_dmg = Critical_hit_Ranged()
                                    # player damages mob here
                                    print_medeum("you use your " + weapon_choice + " and do " + str(
                                        Ranged[weapon_choice][ATTACK] + myPlayer.Acrobatics + crit_dmg) + " Damage!\n")
                                    Boss_mob.damage_mob(Ranged[weapon_choice][ATTACK] + myPlayer.Acrobatics + crit_dmg)
                                    weapon_loaded.Deplete_arrow(1)
                                    print(' you do a extra ' + str(crit_dmg) + ' damage!')
                                    print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                    if Boss_mob.hp > 0:
                                        if Boss_mob.attack > 0:
                                            #mob attack player here
                                            Boss_attacking()
                                        else:
                                            print_medeum(Boss_mob.type+ " did 0 damage!\n")
                                            input('Press ENTER')
                                    else:
                                        print_medeum(Boss_mob.type + ' has been defeated!\n')
                                        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                        Boss_defeated()
                                        break
                                else:
                                    print("you missed!")
                                    weapon_loaded.Deplete_arrow(1)
                                    #hits you for missing here
                                    Boss_Missed()
                            else:
                                print("out of arrows!")
                        # SECOND ATTACK
                        elif move_choice.lower() == 'triple shot':
                            if myPlayer.quiver.count(eq_arrow) >= 3:
                                myPlayer.quiver.remove(eq_arrow)
                                myPlayer.quiver.remove(eq_arrow)
                                myPlayer.quiver.remove(eq_arrow)

                                tripple_shot_chance = random.randint(1, 100)
                                if tripple_shot_chance == 3:
                                    print_medeum(
                                        "you use your " + weapon_choice + " and fire three shots and do " + str(
                                            Ranged[weapon_choice][
                                                ATTACK] * 3 + myPlayer.Acrobatics) + " Damage!\n")
                                    Boss_mob.damage_mob(Ranged[weapon_choice][ATTACK] * 3 + myPlayer.Acrobatics)

                                    print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                    if Boss_mob.hp > 0:
                                        if Mob.attack > 0:
                                            Boss_attacking()
                                        else:
                                            print_medeum(Boss_mob.type+ " did 0 damage!\n")
                                            input('Press ENTER')
                                    else:
                                        print_medeum(Boss_mob.type + ' has been defeated!\n')
                                        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                        Boss_defeated()
                                        break
                                elif tripple_shot_chance >= 50:
                                    print_medeum(
                                        "you use your " + weapon_choice + " and fire three shots and two land doing " + str(
                                            Ranged[weapon_choice][
                                                ATTACK] * 2 + myPlayer.Acrobatics) + " Damage!\n")
                                    Boss_mob.damage_mob(Ranged[weapon_choice][ATTACK] * 2 + myPlayer.Acrobatics)

                                    print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                    if Boss_mob.hp > 0:
                                        if Boss_mob.attack > 0:
                                            Boss_attacking()
                                        else:
                                            print_medeum(Boss_mob.type+ " did 0 damage!\n")
                                            input('Press ENTER')
                                    else:
                                        print_medeum(Boss_mob.type + ' has been defeated!\n')
                                        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                        Boss_defeated()
                                        break
                                elif tripple_shot_chance >= 20:
                                    print_medeum(
                                        "you use your " + weapon_choice + " and fire three shots and one lands doing " + str(
                                            Ranged[weapon_choice][ATTACK] + myPlayer.Acrobatics) + " Damage!\n")
                                    Boss_mob.damage_mob(Ranged[weapon_choice][ATTACK] + myPlayer.Acrobatics)

                                    print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                    if Boss_mob.hp > 0:
                                        if Boss_mob.attack > 0:
                                            Boss_attacking()
                                        else:
                                            print_medeum(Boss_mob.type+ " did 0 damage!\n")
                                            input('Press ENTER')
                                    else:
                                        print_medeum(Boss_mob.type + ' has been defeated!\n')
                                        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                        Boss_defeated()
                                        break
                                else:
                                    print("you missed all three!")

                                    Boss_Missed()
                            else:
                                print("out of arrows!")
                        # THIRD ATTACK
                        elif move_choice.lower() == 'power shot':
                            if myPlayer.quiver.count(eq_arrow) > 0:
                                myPlayer.quiver.remove(eq_arrow)
                                myPlayer.equipped_Arrow.remove(eq_arrow)
                                myPlayer.equipped_Arrow.append(eq_arrow)
                                if RandomMiss() < 10:
                                    crit_dmg = Critical_hit_Ranged()
                                    print_medeum("you use your " + weapon_choice + " and do " + str(
                                        Ranged[weapon_choice][
                                            ATTACK] + myPlayer.Acrobatics + crit_dmg) + " Damage!\n")
                                    Boss_mob.damage_mob(Ranged[weapon_choice][
                                                       ATTACK] + myPlayer.Acrobatics + crit_dmg)
                                    print(' you do a extra ' + str(crit_dmg) + ' damage!')

                                    print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                    if Boss_mob.hp > 0:
                                        if Boss_mob.attack > 0:
                                            Boss_attacking()
                                        else:
                                            print_medeum(Boss_mob.type+ " did 0 damage!\n")
                                            input('Press ENTER')
                                    else:
                                        print_medeum(Boss_mob.type + ' has been defeated!\n')
                                        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                        Boss_defeated()
                                        break
                                else:
                                    print("you missed!")
                                    Boss_Missed()
                            elif myPlayer.quiver.count(eq_arrow) == 0 and myPlayer.equipped_Arrow.count(eq_arrow) > 0:
                                myPlayer.equipped_Arrow.remove(eq_arrow)
                                if RandomMiss() < 10:
                                    crit_dmg = Critical_hit_Ranged()
                                    print_medeum("you use your " + weapon_choice + " and do " + str(
                                        Ranged[weapon_choice][
                                            ATTACK] + myPlayer.Acrobatics + crit_dmg) + " Damage!\n")
                                    Boss_mob.damage_mob(Ranged[weapon_choice][
                                                       ATTACK] + myPlayer.Acrobatics + crit_dmg)
                                    print(' you do a extra ' + str(crit_dmg) + ' damage!')

                                    print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                    if Boss_mob.hp > 0:
                                        if Boss_mob.attack > 0:
                                            Boss_attacking()
                                        else:
                                            print_medeum(Boss_mob.type+ " did 0 damage!\n")
                                            input('Press ENTER')
                                    else:
                                        print_medeum(Boss_mob.type + ' has been defeated!\n')
                                        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                        Boss_defeated()
                                        break
                                else:
                                    print("you missed!")
                                    Boss_Missed()
                            else:
                                print("out of arrows!")



                        while move_choice.lower() != 'change' and Boss_mob.hp > 0:
                            unequip_gear_low_health()
                            RandomMiss()
                            Critical_hit_Ranged()
                            os.system('cls')
                            quiver_arrow = ''.join(myPlayer.quiver)
                            eq_arrow = ''.join(myPlayer.equipped_Arrow)
                            print("┌───────────────────────────────┐")
                            print('│            Commands           │')
                            print("│             change            │")
                            print("└───────────────────────────────┘")
                            print(" ─────────────────────O")
                            prGreen('│       Player         │')
                            print("│" + myPlayer.name + "'s Health:" + str(myPlayer.hp) + "")
                            print("│" + myPlayer.name + "'s Mana:" + str(myPlayer.mp) + "")
                            print("│" + myPlayer.name + "'s Arrows:" + str(myPlayer.quiver.count(str(eq_arrow))) + "")
                            print("└──────────────────────┤")
                            print_status_effect()
                            print("└──────────────────────┤")
                            prRed('│       Opponent       │')
                            print("│ Level: " + str(Boss_mob.level))
                            print("│ Name: " + Boss_mob.type)
                            print('│ HP: ' + str(Boss_mob.hp))
                            print("└──────────────────────┘")

                            print("Select a type of attack\n")
                            print("┌──────┐")
                            print('│Single Shot:')
                            print("└──────┘")
                            print("┌──────┐")
                            print('│Triple Shot :')
                            print("└──────┘")
                            print("┌──────┐")
                            print('│Power Shot:')
                            print("└──────┘")
                            move_choice = input("> ")
                            if move_choice in within.Ranged_attack:
                                # FIRST ATTACK
                                if move_choice.lower() == 'single shot':
                                    if myPlayer.quiver.count(eq_arrow) > 0:

                                        myPlayer.quiver.remove(eq_arrow)
                                        myPlayer.equipped_Arrow.remove(eq_arrow)
                                        myPlayer.equipped_Arrow.append(eq_arrow)

                                        if RandomMiss() < 15:
                                            crit_dmg = Critical_hit_Ranged()
                                            # player damages mob here
                                            print_medeum("you use your " + weapon_choice + " and do " + str(
                                                Ranged[weapon_choice][
                                                    ATTACK] + myPlayer.Acrobatics + crit_dmg) + " Damage!\n")
                                            Boss_mob.damage_mob(
                                                Ranged[weapon_choice][ATTACK] + myPlayer.Acrobatics + crit_dmg)
                                            weapon_loaded.Deplete_arrow(1)
                                            print(' you do a extra ' + str(crit_dmg) + ' damage!')
                                            print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                            if Boss_mob.hp > 0:
                                                if Boss_mob.attack > 0:
                                                    # mob attack player here
                                                    Boss_attacking()
                                                else:
                                                    print_medeum(Boss_mob.type + " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum(Boss_mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                Boss_defeated()
                                                break
                                        else:
                                            print("you missed!")
                                            weapon_loaded.Deplete_arrow(1)
                                            # hits you for missing here
                                            Boss_Missed()
                                    elif myPlayer.quiver.count(eq_arrow) == 0 and myPlayer.equipped_Arrow.count(
                                            eq_arrow) > 0:
                                        myPlayer.equipped_Arrow.remove(eq_arrow)
                                        if RandomMiss() < 15:
                                            crit_dmg = Critical_hit_Ranged()
                                            # player damages mob here
                                            print_medeum("you use your " + weapon_choice + " and do " + str(
                                                Ranged[weapon_choice][
                                                    ATTACK] + myPlayer.Acrobatics + crit_dmg) + " Damage!\n")
                                            Boss_mob.damage_mob(
                                                Ranged[weapon_choice][ATTACK] + myPlayer.Acrobatics + crit_dmg)
                                            weapon_loaded.Deplete_arrow(1)
                                            print(' you do a extra ' + str(crit_dmg) + ' damage!')
                                            print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                            if Boss_mob.hp > 0:
                                                if Boss_mob.attack > 0:
                                                    # mob attack player here
                                                    Boss_attacking()
                                                else:
                                                    print_medeum(Boss_mob.type + " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum(Boss_mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                Boss_defeated()
                                                break
                                        else:
                                            print("you missed!")
                                            weapon_loaded.Deplete_arrow(1)
                                            # hits you for missing here
                                            Boss_Missed()
                                    else:
                                        print("out of arrows!")
                                # SECOND ATTACK
                                elif move_choice.lower() == 'triple shot':
                                    if myPlayer.quiver.count(eq_arrow) >= 3:
                                        myPlayer.quiver.remove(eq_arrow)
                                        myPlayer.quiver.remove(eq_arrow)
                                        myPlayer.quiver.remove(eq_arrow)

                                        tripple_shot_chance = random.randint(1, 100)
                                        if tripple_shot_chance == 3:
                                            print_medeum(
                                                "you use your " + weapon_choice + " and fire three shots and do " + str(
                                                    Ranged[weapon_choice][
                                                        ATTACK] * 3 + myPlayer.Acrobatics) + " Damage!\n")
                                            Boss_mob.damage_mob(Ranged[weapon_choice][ATTACK] * 3 + myPlayer.Acrobatics)

                                            print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                            if Boss_mob.hp > 0:
                                                if Boss_mob.attack > 0:
                                                    Boss_attacking()
                                                else:
                                                    print_medeum(Boss_mob.type + " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum(Boss_mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                Boss_defeated()
                                                break
                                        elif tripple_shot_chance >= 50:
                                            print_medeum(
                                                "you use your " + weapon_choice + " and fire three shots and two land doing " + str(
                                                    Ranged[weapon_choice][
                                                        ATTACK] * 2 + myPlayer.Acrobatics) + " Damage!\n")
                                            Boss_mob.damage_mob(Ranged[weapon_choice][ATTACK] * 2 + myPlayer.Acrobatics)

                                            print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                            if Boss_mob.hp > 0:
                                                if Boss_mob.attack > 0:
                                                    Boss_attacking()
                                                else:
                                                    print_medeum(Boss_mob.type + " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum(Boss_mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                Boss_defeated()
                                                break
                                        elif tripple_shot_chance >= 20:
                                            print_medeum(
                                                "you use your " + weapon_choice + " and fire three shots and one lands doing " + str(
                                                    Ranged[weapon_choice][ATTACK] + myPlayer.Acrobatics) + " Damage!\n")
                                            Boss_mob.damage_mob(Ranged[weapon_choice][ATTACK] + myPlayer.Acrobatics)

                                            print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                            if Boss_mob.hp > 0:
                                                if Boss_mob.attack > 0:
                                                    Boss_attacking()
                                                else:
                                                    print_medeum(Boss_mob.type + " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum(Boss_mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                Boss_defeated()
                                                break
                                        else:
                                            print("you missed all three!")

                                            Boss_Missed()
                                    else:
                                        print("out of arrows!")
                                # THIRD ATTACK
                                elif move_choice.lower() == 'power shot':
                                    if myPlayer.quiver.count(eq_arrow) > 0:
                                        myPlayer.quiver.remove(eq_arrow)
                                        myPlayer.equipped_Arrow.remove(eq_arrow)
                                        myPlayer.equipped_Arrow.append(eq_arrow)
                                        if RandomMiss() < 10:
                                            crit_dmg = Critical_hit_Ranged()
                                            print_medeum("you use your " + weapon_choice + " and do " + str(
                                                Ranged[weapon_choice][
                                                    ATTACK] + myPlayer.Acrobatics + crit_dmg) + " Damage!\n")
                                            Boss_mob.damage_mob(Ranged[weapon_choice][
                                                               ATTACK] + myPlayer.Acrobatics + crit_dmg)
                                            print(' you do a extra ' + str(crit_dmg) + ' damage!')

                                            print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                            if Boss_mob.hp > 0:
                                                if Boss_mob.attack > 0:
                                                    Boss_attacking()
                                                else:
                                                    print_medeum(Boss_mob.type + " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum(Boss_mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                Boss_defeated()
                                                break
                                        else:
                                            print("you missed!")
                                            Boss_Missed()
                                    elif myPlayer.quiver.count(eq_arrow) == 0 and myPlayer.equipped_Arrow.count(
                                            eq_arrow) > 0:
                                        myPlayer.equipped_Arrow.remove(eq_arrow)
                                        if RandomMiss() < 10:
                                            crit_dmg = Critical_hit_Ranged()
                                            print_medeum("you use your " + weapon_choice + " and do " + str(
                                                Ranged[weapon_choice][
                                                    ATTACK] + myPlayer.Acrobatics + crit_dmg) + " Damage!\n")
                                            Boss_mob.damage_mob(Ranged[weapon_choice][
                                                               ATTACK] + myPlayer.Acrobatics + crit_dmg)
                                            print(' you do a extra ' + str(crit_dmg) + ' damage!')

                                            print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                            if Boss_mob.hp > 0:
                                                if Boss_mob.attack > 0:
                                                    Boss_attacking()
                                                else:
                                                    print_medeum(Boss_mob.type + " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum(Boss_mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                Boss_defeated()
                                                break
                                        else:
                                            print("you missed!")
                                            Boss_Missed()
                                    else:
                                        print("out of arrows!")

                            else:
                                print("That is not a valid move choice!")
                #################################### Spells loop ##########################################
                elif weapon_choice in Spells:
                    if weapon_choice in myPlayer.equipped_spell:
                        RandomMiss()
                        Critical_hit_Spell()
                        os.system('cls')
                        RandomMiss()
                        quiver_arrow = ''.join(myPlayer.quiver)
                        eq_arrow = ''.join(myPlayer.equipped_Arrow)

                        print("┌───────────────────────────────┐")
                        print('│            Commands           │')
                        print("│             change            │")
                        print("└───────────────────────────────┘")
                        print(" ─────────────────────O")
                        prGreen('│       Player         │')
                        print("│" + myPlayer.name + "'s Health:" + str(myPlayer.hp) + "")
                        print("│" + myPlayer.name + "'s Mana:" + str(myPlayer.mp) + "")
                        print("│" + myPlayer.name + "'s Arrows:" + str(myPlayer.quiver.count(str(eq_arrow))) + "")
                        print("└──────────────────────┤")
                        print_status_effect()
                        print("└──────────────────────┤")
                        prRed('│       Opponent       │')
                        print("│ Level: " + str(Boss_mob.level))
                        print("│ Name: " + Boss_mob.type)
                        print('│ HP: ' + str(Boss_mob.hp))
                        print("└──────────────────────┘")

                        print("Select a type of attack\n")
                        print("┌──────┐")
                        print('│Single cast:')
                        print("└──────┘")
                        print("┌──────┐")
                        print('│Barrage cast :')
                        print("└──────┘")
                        print("┌──────┐")
                        print('│Charge cast:')
                        print("└──────┘")
                        move_choice = input("> ")
                        if move_choice in within.Spell_attack:
                            if move_choice.lower() == 'single cast':
                                if RandomMiss() < 15:
                                    if myPlayer.mp > 0:
                                        print_medeum("you single cast " + weapon_choice + " and do " + str(
                                            Spells[weapon_choice][ATTACK] + myPlayer.Magic_attack) + " Damage!\n")
                                        Boss_mob.damage_mob(Spells[weapon_choice][ATTACK] + myPlayer.Magic_attack)
                                        myPlayer.Reduce_mp(1)
                                        print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                        if Boss_mob.hp > 0:
                                            if Boss_mob.attack > 0:
                                                Boss_attacking()
                                            else:
                                                print_medeum(Boss_mob.type+ " did 0 damage!\n")
                                                input('Press ENTER')
                                        else:
                                            print_medeum(Boss_mob.type + ' has been defeated!\n')
                                            winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                            Boss_defeated()
                                            break
                                    else:
                                        print_medeum("You are out of Mana!")

                                else:
                                    print("you missed!")
                                    Boss_Missed()
                            #####################Barrage cast Start##############################
                            elif move_choice.lower() == 'barrage cast':
                                if myPlayer.mp >= 3:
                                    if RandomMiss() < 8:
                                        tripple_shot_chance = random.randint(1, 100)
                                        if tripple_shot_chance >= 90:
                                            print_medeum(
                                                "you cast " + weapon_choice + " and launch three shots and do " + str(
                                                    Spells[weapon_choice][
                                                        ATTACK] * 3 + myPlayer.Magic_attack) + " Damage!\n")
                                            Boss_mob.damage_mob(
                                                Spells[weapon_choice][ATTACK] * 3 + myPlayer.Magic_attack)
                                            myPlayer.Reduce_mp(3)
                                            print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                            if Boss_mob.hp > 0:
                                                if Boss_mob.attack > 0:
                                                    Boss_attacking()
                                                else:
                                                    print_medeum(Boss_mob.type+ " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum(Boss_mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                Boss_defeated()
                                                break
                                        ##########second attack
                                        elif tripple_shot_chance >= 50:
                                            print_medeum(
                                                "you cast " + weapon_choice + " and launch three shots and 2 land " + str(
                                                    Spells[weapon_choice][
                                                        ATTACK] * 2 + myPlayer.Magic_attack) + " Damage!\n")
                                            Boss_mob.damage_mob(
                                                Spells[weapon_choice][ATTACK] * 2 + myPlayer.Magic_attack)
                                            myPlayer.Reduce_mp(3)
                                            print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                            if Boss_mob.hp > 0:
                                                if Boss_mob.attack > 0:
                                                    Boss_attacking()
                                                else:
                                                    print_medeum(Boss_mob.type+ " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum(Boss_mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                Boss_defeated()
                                                break
                                        ##########third  attack
                                        elif tripple_shot_chance >= 20:
                                            print_medeum(
                                                "you cast " + weapon_choice + " and launch three shots and 1 lands " + str(
                                                    Spells[weapon_choice][
                                                        ATTACK] * 1 + myPlayer.Magic_attack) + " Damage!\n")
                                            Boss_mob.damage_mob(
                                                Spells[weapon_choice][ATTACK] * 1 + myPlayer.Magic_attack)
                                            myPlayer.Reduce_mp(3)
                                            print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                            if Boss_mob.hp > 0:
                                                if Boss_mob.attack > 0:
                                                    Boss_attacking()
                                                else:
                                                    print_medeum(Boss_mob.type+ " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum(Boss_mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                Boss_defeated()
                                                break
                                    else:
                                        print("you missed!\n")
                                        myPlayer.Reduce_mp(3)
                                        Boss_Missed()
                                else:
                                    print("Not enough mana!\n")
                            ###############################################Barrage cast End##############################
                            elif move_choice.lower() == 'charge cast':
                                if RandomMiss() < 10:
                                    if myPlayer.mp > 0:
                                        critical_attack = random.randint(0, myPlayer.Magic_attack * 2)
                                        print_medeum("you over charge your " + weapon_choice + " and do " + str(
                                            Spells[weapon_choice][
                                                ATTACK] + myPlayer.Magic_attack + critical_attack) + " Damage!\n")
                                        Boss_mob.damage_mob(
                                            Spells[weapon_choice][ATTACK] + myPlayer.Magic_attack + critical_attack)
                                        myPlayer.Reduce_mp(1)
                                        print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                    if Boss_mob.hp > 0:
                                        if Boss_mob.attack > 0:
                                            Boss_attacking()
                                        else:
                                            print_medeum(Boss_mob.type+ " did 0 damage!\n")
                                            input('Press ENTER')
                                    else:
                                        print_medeum(Boss_mob.type + ' has been defeated!\n')
                                        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                        Boss_defeated()
                                        break
                                else:
                                    print("you missed!")
                                    myPlayer.Reduce_mp(1)
                                    Boss_Missed()


                            while move_choice.lower() != 'change' and Mob.hp > 0:

                                unequip_gear_low_health()
                                RandomMiss()
                                Critical_hit_Spell()
                                os.system('cls')
                                RandomMiss()
                                quiver_arrow = ''.join(myPlayer.quiver)
                                eq_arrow = ''.join(myPlayer.equipped_Arrow)
                                print("┌───────────────────────────────┐")
                                print('│            Commands           │')
                                print("│             change            │")
                                print("└───────────────────────────────┘")
                                print(" ─────────────────────O")
                                prGreen('│       Player         │')
                                print("│" + myPlayer.name + "'s Health:" + str(myPlayer.hp) + "")
                                print("│" + myPlayer.name + "'s Mana:" + str(myPlayer.mp) + "")
                                print("│" + myPlayer.name + "'s Arrows:" + str(myPlayer.quiver.count(str(eq_arrow))) + "")
                                print("└──────────────────────┤")
                                print_status_effect()
                                print("└──────────────────────┤")
                                prRed('│       Opponent       │')
                                print("│ Level: " + str(Boss_mob.level))
                                print("│ Name: " + Boss_mob.type)
                                print('│ HP: ' + str(Boss_mob.hp))
                                print("└──────────────────────┘")

                                print("Select a type of attack\n")
                                print("┌──────┐")
                                print('│Single cast:')
                                print("└──────┘")
                                print("┌──────┐")
                                print('│Barrage cast :')
                                print("└──────┘")
                                print("┌──────┐")
                                print('│Charge cast:')
                                print("└──────┘")
                                move_choice = input("> ")
                                if move_choice in within.Spell_attack:
                                    if move_choice.lower() == 'single cast':
                                        if RandomMiss() < 15:
                                            if myPlayer.mp > 0:
                                                print_medeum("you single cast " + weapon_choice + " and do " + str(
                                                    Spells[weapon_choice][
                                                        ATTACK] + myPlayer.Magic_attack) + " Damage!\n")
                                                Boss_mob.damage_mob(Spells[weapon_choice][ATTACK] + myPlayer.Magic_attack)
                                                myPlayer.Reduce_mp(1)
                                                print(Mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                            if Boss_mob.hp > 0:
                                                if Boss_mob.attack > 0:
                                                    Boss_attacking()
                                                else:
                                                    print_medeum(Boss_mob.type+ " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum(Boss_mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                Boss_defeated()
                                                break
                                        else:
                                            print("you missed!")
                                            myPlayer.Reduce_mp(1)
                                            Boss_Missed()
                                    #####################Barrage cast Start##############################
                                    elif move_choice.lower() == 'barrage cast':
                                        if myPlayer.mp >= 3:
                                            if RandomMiss() < 8:
                                                tripple_shot_chance = random.randint(1, 100)
                                                if tripple_shot_chance >= 90:
                                                    print_medeum(
                                                        "you cast " + weapon_choice + " and launch three shots and do " + str(
                                                            Spells[weapon_choice][
                                                                ATTACK] * 3 + myPlayer.Magic_attack) + " Damage!\n")
                                                    Boss_mob.damage_mob(
                                                        Spells[weapon_choice][ATTACK] * 3 + myPlayer.Magic_attack)
                                                    myPlayer.Reduce_mp(3)
                                                    print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                                    if Boss_mob.hp > 0:
                                                        if Boss_mob.attack > 0:
                                                            Boss_attacking()
                                                        else:
                                                            print_medeum(Boss_mob.type+ " did 0 damage!\n")
                                                            input('Press ENTER')
                                                    else:
                                                        print_medeum(Boss_mob.type + ' has been defeated!\n')
                                                        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                        Boss_defeated()
                                                        break
                                                ##########second attack
                                                elif tripple_shot_chance >= 50:
                                                    print_medeum(
                                                        "you cast " + weapon_choice + " and launch three shots and 2 land " + str(
                                                            Spells[weapon_choice][
                                                                ATTACK] * 2 + myPlayer.Magic_attack) + " Damage!\n")
                                                    Boss_mob.damage_mob(
                                                        Spells[weapon_choice][ATTACK] * 2 + myPlayer.Magic_attack)
                                                    myPlayer.Reduce_mp(3)
                                                    print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                                    if Boss_mob.hp > 0:
                                                        if Boss_mob.attack > 0:
                                                            Boss_attacking()
                                                        else:
                                                            print_medeum(Boss_mob.type+ " did 0 damage!\n")
                                                            input('Press ENTER')
                                                    else:
                                                        print_medeum(Boss_mob.type + ' has been defeated!\n')
                                                        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                        Boss_defeated()
                                                        break
                                                ##########third  attack
                                                elif tripple_shot_chance >= 20:
                                                    print_medeum(
                                                        "you cast " + weapon_choice + " and launch three shots and 1 lands " + str(
                                                            Spells[weapon_choice][
                                                                ATTACK] * 1 + myPlayer.Magic_attack) + " Damage!\n")
                                                    Boss_mob.damage_mob(
                                                        Spells[weapon_choice][ATTACK] * 1 + myPlayer.Magic_attack)
                                                    myPlayer.Reduce_mp(3)
                                                    print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                                    if Boss_mob.hp > 0:
                                                        if Boss_mob.attack > 0:
                                                            Boss_attacking()
                                                        else:
                                                            print_medeum(Boss_mob.type+ " did 0 damage!\n")
                                                            input('Press ENTER')
                                                    else:
                                                        print_medeum(Boss_mob.type + ' has been defeated!\n')
                                                        winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                        Boss_defeated()
                                                        break
                                            else:
                                                print("you missed!\n")
                                                myPlayer.Reduce_mp(1)
                                                Boss_Missed()
                                        else:
                                            print("Not enough mana!\n")
                                    ###############################################Barrage cast End##############################
                                    elif move_choice.lower() == 'charge cast':
                                        if RandomMiss() < 10:
                                            if myPlayer.mp > 0:
                                                critical_attack = random.randint(0, myPlayer.Magic_attack * 2)
                                                print_medeum("you over charge your " + weapon_choice + " and do " + str(
                                                    Spells[weapon_choice][
                                                        ATTACK] + myPlayer.Magic_attack + critical_attack) + " Damage!\n")
                                                Boss_mob.damage_mob(Spells[weapon_choice][
                                                                   ATTACK] + myPlayer.Magic_attack + critical_attack)
                                                myPlayer.Reduce_mp(1)
                                                print(Boss_mob.type + " HP: " + str(Boss_mob.hp) + ".")
                                            if Boss_mob.hp > 0:
                                                if Boss_mob.attack > 0:
                                                    Boss_attacking()
                                                else:
                                                    print_medeum(Boss_mob.type+ " did 0 damage!\n")
                                                    input('Press ENTER')
                                            else:
                                                print_medeum(Boss_mob.type + ' has been defeated!\n')
                                                winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                                                Boss_defeated()
                                                break
                                        else:
                                            print("you missed!")
                                            myPlayer.Reduce_mp(1)
                                            Boss_Missed()


                ####################################Battle Over second loop ##########################################
                else:
                    print_medeum("you dont have a " + weapon_choice + "!\n")
            elif prompt.lower() in within.potions:
                Items()
            elif prompt.lower() == "run":
                run_chance = random.randint(1, Boss_mob.escape_chance)
                if run_chance > 20:
                    print_medeum("You got away!\n")
                    winsound.PlaySound("C:\walking.wav", winsound.SND_ASYNC)
                    input('Press ENTER to continue')
                    os.system('cls')
                    main_game_loop()
                else:
                    print_medeum("You couldnt get away!\n")
                    Boss_attacking()
                    os.system('cls')
                    if myPlayer.hp <= 0:
                        game_over()
            elif prompt.lower() in within.equip:
                Inventory_engine_2()
        if Boss_mob.hp <= 0:
            Boss_defeated()

#####################################Combat END######################################################


CombatPrompt = OrbCombat()
def Boss_combat():
    print_medeum('You have been attacked! Defend yourself!\n')
    winsound.PlaySound("C:\combat_music.wav", winsound.SND_ASYNC)
    Boss_refresh()
    CombatPrompt.Boss_combat_engine()


def combat():
    print_medeum('You have been attacked! Defend yourself!\n')
    winsound.PlaySound("C:\combat_music.wav", winsound.SND_ASYNC)
    Mob_refresh()
    CombatPrompt.Combat_engine()


def main_game_loop():
    while myPlayer.game_over is False:

        prompt()
    # if puzzles have been solved or boss defeated etc


def setup_game():

    os.system('cls')
    # Introduction()
    os.system('cls')
    #### Name Collecting ####


    os.system('cls')

    # winsound.PlaySound("C:\Introduction.wav", winsound.SND_ASYNC)
    print_medeum("Unknown voice 1: ....\n")
    input("Press ENTER to continue\n")
    os.system('cls')
    print_medeum('Unknown voice 1: ...quickly wake them up!\n')
    print_medeum('Unknown voice 1: try saying their name!\n')
    input("Press ENTER to continue")
    os.system('cls')
    print_medeum("Unknown voice 2: I dont know their name!\n")
    input("Press ENTER to continue\n")
    os.system('cls')
    print_medeum("Unknown voice 1: I thought it was...\n ")
    player_name = input("Name> ")
    while player_name.isalnum() == False:
        player_name = input("Name> ")

    print_medeum("Unknown voice 1: " + player_name + "!\n")
    input("Press ENTER to continue\n")
    os.system('cls')
    myPlayer.name = player_name
    if player_name == 'Link':
        myPlayer.inventory.append('master sword')
        print("Hello Hero of Time\n")
    elif player_name == 'Luke Skywalker':
        print('jedi master\n')
        myPlayer.inventory.append('Light Saber')

    #### JOB HANDLING ####
    print_medeum("Unknown voice 2: I think that woke them up, quickly " + player_name + " is getting up!\n")
    input("Press ENTER to continue")
    os.system('cls')
    print_medeum("Unknown voice 1: lets get out of here!\n")
    input("Press ENTER to continue")
    os.system('cls')
    print_medeum("...\n")
    print_medeum("Disembodied Voice: Hello " + str(myPlayer.name) + '.\n')
    print_medeum("This is where you choose your destiny\n")
    time.sleep(2.0)
    os.system('cls')
    print_medeum("What path do you wish to walk?\n")
    print("┌───────────────┐")
    print("     Commands    ")
    print("      About      ")
    print('└───────────────┘')
    print("┌───────────────┐" + "┌───────────────┐" + "┌───────────────┐" + "┌───────────────┐")
    prYellow("Fighter          Druid            Wizard           Paladin      ")
    print('└───────────────┘' + '└───────────────┘' + '└───────────────┘' + '└───────────────┘')
    print("┌───────────────┐")
    prYellow("Ranger")
    print('└───────────────┘')

    player_job = input("> ")
    valid_jobs = ['fighter', 'druid', 'wizard', 'paladin', 'ranger', 'about']
    myPlayer.job = player_job
    if player_job.lower() in valid_jobs:
        myPlayer.job = player_job
        print_medeum("You Choose the " + player_job + ".\n")
        ##########################
        ###   Job selection    ###
        ##########################
        if player_job.lower() == 'fighter':
            os.system('cls')
            print("""
            The FIGHTER class is a physical class that excells with the use of physical weapons such as
            swords/daggers/axes/hammers. They start with a bonus to ATTACK and SMITHING skill.



            """)
            input('Press ENTER to continue')
            myPlayer.Class.append('fighter')
            myPlayer.inventory.append("Rusty Sword")
            myPlayer.inventory.append('Antidote')
            my_points.Add(5)
            myPlayer.attack = 5
        elif player_job.lower() == 'druid':
            os.system('cls')
            print("""
                    The DRUID class is similar to the WIZARD class in that the MAGIC ATTACK skill is increased,
                    however the DRUID differs by having more starting health than the WIZARD but not as much MAGIC ATTACK
                    as the WIZARD. Making the DRUID class a little bit tankier than the WIZARD.



                                        """)
            input('Press ENTER to continue')
            myPlayer.Class.append('Druid')
            myPlayer.inventory.append('Druid Spell')
            myPlayer.inventory.append('Antidote')
            myPlayer.max_hp += 3
            myPlayer.hp = myPlayer.max_hp
            myPlayer.Magic_attack = 2
            myPlayer.max_mp = 10
            myPlayer.mp = myPlayer.max_mp
            my_points.Add(5)
        elif player_job.lower() == 'wizard':
            os.system('cls')
            print("""
        The WIZARD class is the fighter of the magical arts. A healthy increase in MAGIC ATTACK makes this is the best choice for 
        SPELL orientated game play. Where the WIZARD lacks in health, the class makes up for in MAGIC ATTACK.



                                        """)
            input('Press ENTER to continue')
            myPlayer.Class.append('Wizard')
            myPlayer.inventory.append('Shock Spell')
            myPlayer.inventory.append('Antidote')
            myPlayer.Magic_attack = 5
            my_points.Add(5)
            myPlayer.max_mp = 10
            myPlayer.mp = myPlayer.max_mp
        elif player_job.lower() == 'paladin':
            os.system('cls')
            print("""
                The PALADIN is arguably the TANK of the 5 classes. Boasting a decent HEALTH buff and ATTACK, the PALADIN is great for 

                balanced gameplay between HEALTH and ATTACK. Though this class may not get as much ATTACK as the FIGHTER,
                the PALADIN gains more HEALTH to balance that out.



                                        """)
            input('Press ENTER to continue')
            myPlayer.Class.append('Paladin')
            myPlayer.inventory.append("Rusty Sword")
            myPlayer.inventory.append("Wooden Shield")
            myPlayer.inventory.append('Antidote')
            myPlayer.max_hp += 5
            myPlayer.hp = myPlayer.max_hp
            my_points.Add(5)
        elif player_job.lower() == 'ranger':
            os.system('cls')
            print("""
                The Ranger class is unique in that it is the only class to excell with RANGED weapons. This means that
                Bows/Cross bows would be the RANGER's best WEAPON.The RANGER gets a bonus to LUCK and ATTACK.



                                        """)
            input('Press ENTER to continue')
            myPlayer.Class.append('Ranger')
            myPlayer.inventory.append('Hunter Bow')
            myPlayer.inventory.append('Antidote')
            myPlayer.attack = 3
            myPlayer.luck = 2
            myPlayer.quiver.append('iron arrow')
            myPlayer.quiver.append('iron arrow')
            myPlayer.quiver.append('iron arrow')
            myPlayer.quiver.append('iron arrow')
            myPlayer.quiver.append('iron arrow')
            myPlayer.quiver.append('iron arrow')
            myPlayer.quiver.append('iron arrow')
            myPlayer.quiver.append('iron arrow')
            myPlayer.quiver.append('iron arrow')
            myPlayer.quiver.append('iron arrow')
            myPlayer.quiver.append('iron arrow')
            myPlayer.quiver.append('iron arrow')
            myPlayer.quiver.append('iron arrow')
            myPlayer.quiver.append('iron arrow')
            myPlayer.quiver.append('iron arrow')
            my_points.Add(5)

    while player_job.lower() not in valid_jobs:
        print('Im dreadfully sorry, that is not a valid job\n')
        player_job = input("> ")
        if player_job.lower() in valid_jobs:
            myPlayer.job = player_job
            ##########################
            ###   Job selection    ###
            ##########################
            if player_job.lower() == 'fighter':
                os.system('cls')
                print("""
                The FIGHTER class is a physical class that excells with the use of physical weapons such as
                swords/daggers/axes/hammers. They start with a bonus to ATTACK and SMITHING skill.



                """)
                input('Press ENTER to continue')
                myPlayer.Class.append('fighter')
                myPlayer.inventory.append("Rusty Sword")
                myPlayer.inventory.append('Antidote')
                my_points.Add(5)
                myPlayer.attack = 5
            elif player_job.lower() == 'druid':
                os.system('cls')
                print("""
                        The DRUID class is similar to the WIZARD class in that the MAGIC ATTACK skill is increased,
                        however the DRUID differs by having more starting health than the WIZARD but not as much MAGIC ATTACK
                        as the WIZARD. Making the DRUID class a little bit tankier than the WIZARD.



                                            """)
                input('Press ENTER to continue')
                myPlayer.Class.append('Druid')
                myPlayer.inventory.append('Druid Spell')
                myPlayer.inventory.append('Antidote')
                myPlayer.max_hp += 3
                myPlayer.hp = myPlayer.max_hp
                myPlayer.Magic_attack = 2
                myPlayer.max_mp = 10
                myPlayer.mp = myPlayer.max_mp
                my_points.Add(5)
            elif player_job.lower() == 'wizard':
                os.system('cls')
                print("""
            The WIZARD class is the fighter of the magical arts. A healthy increase in MAGIC ATTACK makes this is the best choice for 
            SPELL orientated game play. Where the WIZARD lacks in health, the class makes up for in MAGIC ATTACK.



                                            """)
                input('Press ENTER to continue')
                myPlayer.Class.append('Wizard')
                myPlayer.inventory.append('Shock Spell')
                myPlayer.inventory.append('Antidote')
                myPlayer.Magic_attack = 5
                my_points.Add(5)
                myPlayer.max_mp = 10
                myPlayer.mp = myPlayer.max_mp
            elif player_job.lower() == 'paladin':
                os.system('cls')
                print("""
                    The PALADIN is arguably the TANK of the 5 classes. Boasting a decent HEALTH buff and ATTACK, the PALADIN is great for 

                    balanced gameplay between HEALTH and ATTACK. Though this class may not get as much ATTACK as the FIGHTER,
                    the PALADIN gains more HEALTH to balance that out.



                                            """)
                input('Press ENTER to continue')
                myPlayer.Class.append('Paladin')
                myPlayer.inventory.append("Rusty Sword")
                myPlayer.inventory.append("Wooden Shield")
                myPlayer.inventory.append('Antidote')
                myPlayer.max_hp += 5
                myPlayer.hp = myPlayer.max_hp
                my_points.Add(5)
            elif player_job.lower() == 'ranger':
                os.system('cls')
                print("""
                    The Ranger class is unique in that it is the only class to excell with RANGED weapons. This means that
                    Bows/Cross bows would be the RANGER's best WEAPON.The RANGER gets a bonus to LUCK and ATTACK.



                                            """)
                input('Press ENTER to continue')
                myPlayer.Class.append('Ranger')
                myPlayer.inventory.append('Hunter Bow')
                myPlayer.inventory.append('Antidote')
                myPlayer.attack = 3
                myPlayer.luck = 2
                myPlayer.quiver.append('iron arrow')
                myPlayer.quiver.append('iron arrow')
                myPlayer.quiver.append('iron arrow')
                myPlayer.quiver.append('iron arrow')
                myPlayer.quiver.append('iron arrow')
                myPlayer.quiver.append('iron arrow')
                myPlayer.quiver.append('iron arrow')
                myPlayer.quiver.append('iron arrow')
                myPlayer.quiver.append('iron arrow')
                myPlayer.quiver.append('iron arrow')
                myPlayer.quiver.append('iron arrow')
                myPlayer.quiver.append('iron arrow')
                myPlayer.quiver.append('iron arrow')
                myPlayer.quiver.append('iron arrow')
                myPlayer.quiver.append('iron arrow')

                my_points.Add(5)

    #### Introduction ####
    attribute_engine()
    os.system('cls')
    print("┌───────────────────────────────────┐")
    print('│          ╪How to Play╪            │')
    print("│                                   │")
    print("└───────────────────────────────────┘")
    print_medeum('TIP: Type HELP in order to get the full list of available commands.\n')
    input("Press ENTER to continue\n")
    help()
    print_medeum("Your adventure has begun " + player_job + '.\n')
    input("Press ENTER to continue\n")
    myPlayer.name = player_name
    os.system('cls')
    print("┌───────────────────────────────────┐")
    print('│   ╪Chapter 1: The Inheritance╪    │')
    print("│                                   │")
    print("└───────────────────────────────────┘")
    Missions['Mission 1'][ACTIVE] = True
    input("Press ENTER to continue\n")
    os.system('cls')
    print('Dear ' + myPlayer.name + ".\n")
    print("""  Attorney of Freiherren of Schwarzwald has contacted you in regards to a inheritance of der Haupteingang Manor.
                  You are to be summoned to claim this inheritance immediately. Please respond within 10 days so that we can-
                  get all the necessary paperwork done.

                  Post Haste,

                               Attorney Klaus Muller



        """)
    input("Press ENTER to continue\n")

    os.system('cls')
    Progression.Intro_chapter1()
    assign_saves()
    save()
    save_dict_Ranged()
    save_dict_gear()
    save_dict_Spells()
    save_dict_Weapons()
    save_dict_Mission()
    save_dict_areamap()
    prompt()

title_screen()


